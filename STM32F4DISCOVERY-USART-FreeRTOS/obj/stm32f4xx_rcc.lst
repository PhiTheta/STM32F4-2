   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"stm32f4xx_rcc.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.data.APBAHBPrescTable,"aw",%progbits
  20              		.align	2
  23              	APBAHBPrescTable:
  24 0000 00       		.byte	0
  25 0001 00       		.byte	0
  26 0002 00       		.byte	0
  27 0003 00       		.byte	0
  28 0004 01       		.byte	1
  29 0005 02       		.byte	2
  30 0006 03       		.byte	3
  31 0007 04       		.byte	4
  32 0008 01       		.byte	1
  33 0009 02       		.byte	2
  34 000a 03       		.byte	3
  35 000b 04       		.byte	4
  36 000c 06       		.byte	6
  37 000d 07       		.byte	7
  38 000e 08       		.byte	8
  39 000f 09       		.byte	9
  40              		.section	.text.RCC_DeInit,"ax",%progbits
  41              		.align	2
  42              		.global	RCC_DeInit
  43              		.thumb
  44              		.thumb_func
  46              	RCC_DeInit:
  47              	.LFB110:
  48              		.file 1 "libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c"
   1:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
   2:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   ******************************************************************************
   3:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @file    stm32f4xx_rcc.c
   4:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @author  MCD Application Team
   5:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @version V1.0.0RC1
   6:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @date    25-August-2011
   7:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief   This file provides firmware functions to manage the following 
   8:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          functionalities of the Reset and clock control (RCC) peripheral:           
   9:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *           - Internal/external clocks, PLL, CSS and MCO configuration
  10:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *           - System, AHB and APB busses clocks configuration
  11:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *           - Peripheral clocks configuration
  12:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *           - Interrupts and flags management
  13:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *
  14:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *  @verbatim
  15:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *               
  16:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          ===================================================================
  17:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *                               RCC specific features
  18:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          ===================================================================
  19:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *    
  20:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          After reset the device is running from Internal High Speed oscillator 
  21:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          (HSI 16MHz) with Flash 0 wait state, Flash prefetch buffer, D-Cache 
  22:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          and I-Cache are disabled, and all peripherals are off except internal
  23:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          SRAM, Flash and JTAG.
  24:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *           - There is no prescaler on High speed (AHB) and Low speed (APB) busses;
  25:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *             all peripherals mapped on these busses are running at HSI speed.
  26:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *       	  - The clock for all peripherals is switched off, except the SRAM and FLASH.
  27:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *           - All GPIOs are in input floating state, except the JTAG pins which
  28:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *             are assigned to be used for debug purpose.
  29:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *        
  30:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          Once the device started from reset, the user application has to:        
  31:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *           - Configure the clock source to be used to drive the System clock
  32:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *             (if the application needs higher frequency/performance)
  33:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *           - Configure the System clock frequency and Flash settings  
  34:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *           - Configure the AHB and APB busses prescalers
  35:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *           - Enable the clock for the peripheral(s) to be used
  36:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *           - Configure the clock source(s) for peripherals which clocks are not
  37:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *             derived from the System clock (I2S, RTC, ADC, USB OTG FS/SDIO/RNG)      
  38:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *                        
  39:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *  @endverbatim
  40:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *    
  41:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   ******************************************************************************
  42:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @attention
  43:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *
  44:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
  45:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
  46:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
  47:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
  48:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
  49:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
  50:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *
  51:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
  52:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   ******************************************************************************
  53:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
  54:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
  55:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* Includes ------------------------------------------------------------------*/
  56:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #include "stm32f4xx_rcc.h"
  57:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
  58:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
  59:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @{
  60:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
  61:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
  62:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /** @defgroup RCC 
  63:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief RCC driver modules
  64:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @{
  65:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */ 
  66:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
  67:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* Private typedef -----------------------------------------------------------*/
  68:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* Private define ------------------------------------------------------------*/
  69:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* ------------ RCC registers bit address in the alias region ----------- */
  70:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define RCC_OFFSET                (RCC_BASE - PERIPH_BASE)
  71:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* --- CR Register ---*/
  72:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* Alias word address of HSION bit */
  73:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define CR_OFFSET                 (RCC_OFFSET + 0x00)
  74:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define HSION_BitNumber           0x00
  75:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define CR_HSION_BB               (PERIPH_BB_BASE + (CR_OFFSET * 32) + (HSION_BitNumber * 4))
  76:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* Alias word address of CSSON bit */
  77:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define CSSON_BitNumber           0x13
  78:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define CR_CSSON_BB               (PERIPH_BB_BASE + (CR_OFFSET * 32) + (CSSON_BitNumber * 4))
  79:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* Alias word address of PLLON bit */
  80:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define PLLON_BitNumber           0x18
  81:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define CR_PLLON_BB               (PERIPH_BB_BASE + (CR_OFFSET * 32) + (PLLON_BitNumber * 4))
  82:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* Alias word address of PLLI2SON bit */
  83:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define PLLI2SON_BitNumber        0x1A
  84:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define CR_PLLI2SON_BB            (PERIPH_BB_BASE + (CR_OFFSET * 32) + (PLLI2SON_BitNumber * 4))
  85:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
  86:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* --- CFGR Register ---*/
  87:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* Alias word address of I2SSRC bit */
  88:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define CFGR_OFFSET               (RCC_OFFSET + 0x08)
  89:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define I2SSRC_BitNumber          0x17
  90:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define CFGR_I2SSRC_BB            (PERIPH_BB_BASE + (CFGR_OFFSET * 32) + (I2SSRC_BitNumber * 4))
  91:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
  92:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* --- BDCR Register ---*/
  93:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* Alias word address of RTCEN bit */
  94:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define BDCR_OFFSET               (RCC_OFFSET + 0x70)
  95:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define RTCEN_BitNumber           0x0F
  96:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define BDCR_RTCEN_BB             (PERIPH_BB_BASE + (BDCR_OFFSET * 32) + (RTCEN_BitNumber * 4))
  97:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* Alias word address of BDRST bit */
  98:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define BDRST_BitNumber           0x10
  99:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define BDCR_BDRST_BB             (PERIPH_BB_BASE + (BDCR_OFFSET * 32) + (BDRST_BitNumber * 4))
 100:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* --- CSR Register ---*/
 101:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* Alias word address of LSION bit */
 102:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define CSR_OFFSET                (RCC_OFFSET + 0x74)
 103:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define LSION_BitNumber           0x00
 104:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define CSR_LSION_BB              (PERIPH_BB_BASE + (CSR_OFFSET * 32) + (LSION_BitNumber * 4))
 105:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* ---------------------- RCC registers bit mask ------------------------ */
 106:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* CFGR register bit mask */
 107:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define CFGR_MCO2_RESET_MASK      ((uint32_t)0x07FFFFFF)
 108:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define CFGR_MCO1_RESET_MASK      ((uint32_t)0xF89FFFFF)
 109:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 110:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* RCC Flag Mask */
 111:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define FLAG_MASK                 ((uint8_t)0x1F)
 112:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 113:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* CR register byte 3 (Bits[23:16]) base address */
 114:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define CR_BYTE3_ADDRESS          ((uint32_t)0x40023802)
 115:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 116:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* CIR register byte 2 (Bits[15:8]) base address */
 117:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define CIR_BYTE2_ADDRESS         ((uint32_t)(RCC_BASE + 0x0C + 0x01))
 118:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 119:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* CIR register byte 3 (Bits[23:16]) base address */
 120:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define CIR_BYTE3_ADDRESS         ((uint32_t)(RCC_BASE + 0x0C + 0x02))
 121:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 122:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* BDCR register base address */
 123:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define BDCR_ADDRESS              (PERIPH_BASE + BDCR_OFFSET)
 124:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 125:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* Private macro -------------------------------------------------------------*/
 126:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* Private variables ---------------------------------------------------------*/
 127:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** static __I uint8_t APBAHBPrescTable[16] = {0, 0, 0, 0, 1, 2, 3, 4, 1, 2, 3, 4, 6, 7, 8, 9};
 128:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 129:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* Private function prototypes -----------------------------------------------*/
 130:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* Private functions ---------------------------------------------------------*/
 131:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 132:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /** @defgroup RCC_Private_Functions
 133:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @{
 134:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */ 
 135:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 136:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /** @defgroup RCC_Group1 Internal and external clocks, PLL, CSS and MCO configuration functions
 137:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  *  @brief   Internal and external clocks, PLL, CSS and MCO configuration functions 
 138:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  *
 139:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** @verbatim   
 140:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  ===============================================================================
 141:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       Internal/external clocks, PLL, CSS and MCO configuration functions
 142:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  ===============================================================================  
 143:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 144:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   This section provide functions allowing to configure the internal/external clocks,
 145:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   PLLs, CSS and MCO pins.
 146:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   
 147:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   1. HSI (high-speed internal), 16 MHz factory-trimmed RC used directly or through
 148:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      the PLL as System clock source.
 149:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 150:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   2. LSI (low-speed internal), 32 KHz low consumption RC used as IWDG and/or RTC
 151:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      clock source.
 152:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 153:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   3. HSE (high-speed external), 4 to 26 MHz crystal oscillator used directly or
 154:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      through the PLL as System clock source. Can be used also as RTC clock source.
 155:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 156:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   4. LSE (low-speed external), 32 KHz oscillator used as RTC clock source.   
 157:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 158:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   5. PLL (clocked by HSI or HSE), featuring two different output clocks:
 159:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       - The first output is used to generate the high speed system clock (up to 120 MHz)
 160:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       - The second output is used to generate the clock for the USB OTG FS (48 MHz),
 161:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****         the random analog generator (<=48 MHz) and the SDIO (<= 48 MHz).
 162:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 163:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   6. PLLI2S (clocked by HSI or HSE), used to generate an accurate clock to achieve 
 164:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      high-quality audio performance on the I2S interface.
 165:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   
 166:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   7. CSS (Clock security system), once enable and if a HSE clock failure occurs 
 167:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      (HSE used directly or through PLL as System clock source), the System clock
 168:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      is automatically switched to HSI and an interrupt is generated if enabled. 
 169:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      The interrupt is linked to the Cortex-M4 NMI (Non-Maskable Interrupt) 
 170:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      exception vector.   
 171:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 172:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   8. MCO1 (microcontroller clock output), used to output HSI, LSE, HSE or PLL
 173:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      clock (through a configurable prescaler) on PA8 pin.
 174:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 175:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   9. MCO2 (microcontroller clock output), used to output HSE, PLL, SYSCLK or PLLI2S
 176:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      clock (through a configurable prescaler) on PC9 pin.
 177:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 178:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** @endverbatim
 179:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @{
 180:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 181:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 182:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 183:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Resets the RCC clock configuration to the default reset state.
 184:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   The default reset state of the clock configuration is given below:
 185:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            - HSI ON and used as system clock source
 186:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            - HSE, PLL and PLLI2S OFF
 187:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            - AHB, APB1 and APB2 prescaler set to 1.
 188:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            - CSS, MCO1 and MCO2 OFF
 189:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            - All interrupts disabled
 190:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   This function doesn't modify the configuration of the
 191:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            - Peripheral clocks
 192:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            - LSI, LSE and RTC clocks 
 193:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  None
 194:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 195:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 196:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_DeInit(void)
 197:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
  49              		.loc 1 197 0
  50              		.cfi_startproc
  51              		@ args = 0, pretend = 0, frame = 0
  52              		@ frame_needed = 1, uses_anonymous_args = 0
  53              		@ link register save eliminated.
  54 0000 80B4     		push	{r7}
  55              	.LCFI0:
  56              		.cfi_def_cfa_offset 4
  57              		.cfi_offset 7, -4
  58 0002 00AF     		add	r7, sp, #0
  59              	.LCFI1:
  60              		.cfi_def_cfa_register 7
 198:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Set HSION bit */
 199:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->CR |= (uint32_t)0x00000001;
  61              		.loc 1 199 0
  62 0004 104B     		ldr	r3, .L2
  63 0006 104A     		ldr	r2, .L2
  64 0008 1268     		ldr	r2, [r2]
  65 000a 42F00102 		orr	r2, r2, #1
  66 000e 1A60     		str	r2, [r3]
 200:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 201:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Reset CFGR register */
 202:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->CFGR = 0x00000000;
  67              		.loc 1 202 0
  68 0010 0D4B     		ldr	r3, .L2
  69 0012 0022     		movs	r2, #0
  70 0014 9A60     		str	r2, [r3, #8]
 203:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 204:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Reset HSEON, CSSON and PLLON bits */
 205:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->CR &= (uint32_t)0xFEF6FFFF;
  71              		.loc 1 205 0
  72 0016 0C4A     		ldr	r2, .L2
  73 0018 0B4B     		ldr	r3, .L2
  74 001a 1B68     		ldr	r3, [r3]
  75 001c 23F08473 		bic	r3, r3, #17301504
  76 0020 23F48033 		bic	r3, r3, #65536
  77 0024 1360     		str	r3, [r2]
 206:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 207:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Reset PLLCFGR register */
 208:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->PLLCFGR = 0x24003010;
  78              		.loc 1 208 0
  79 0026 084B     		ldr	r3, .L2
  80 0028 084A     		ldr	r2, .L2+4
  81 002a 5A60     		str	r2, [r3, #4]
 209:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 210:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Reset HSEBYP bit */
 211:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->CR &= (uint32_t)0xFFFBFFFF;
  82              		.loc 1 211 0
  83 002c 064B     		ldr	r3, .L2
  84 002e 064A     		ldr	r2, .L2
  85 0030 1268     		ldr	r2, [r2]
  86 0032 22F48022 		bic	r2, r2, #262144
  87 0036 1A60     		str	r2, [r3]
 212:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 213:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Disable all interrupts */
 214:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->CIR = 0x00000000;
  88              		.loc 1 214 0
  89 0038 034B     		ldr	r3, .L2
  90 003a 0022     		movs	r2, #0
  91 003c DA60     		str	r2, [r3, #12]
 215:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
  92              		.loc 1 215 0
  93 003e BD46     		mov	sp, r7
  94              		@ sp needed
  95 0040 5DF8047B 		ldr	r7, [sp], #4
  96 0044 7047     		bx	lr
  97              	.L3:
  98 0046 00BF     		.align	2
  99              	.L2:
 100 0048 00380240 		.word	1073887232
 101 004c 10300024 		.word	603992080
 102              		.cfi_endproc
 103              	.LFE110:
 105              		.section	.text.RCC_HSEConfig,"ax",%progbits
 106              		.align	2
 107              		.global	RCC_HSEConfig
 108              		.thumb
 109              		.thumb_func
 111              	RCC_HSEConfig:
 112              	.LFB111:
 216:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 217:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 218:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Configures the External High Speed oscillator (HSE).
 219:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   After enabling the HSE (RCC_HSE_ON or RCC_HSE_Bypass), the application
 220:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         software should wait on HSERDY flag to be set indicating that HSE clock
 221:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         is stable and can be used to clock the PLL and/or system clock.
 222:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   HSE state can not be changed if it is used directly or through the
 223:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         PLL as system clock. In this case, you have to select another source
 224:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         of the system clock then change the HSE state (ex. disable it).
 225:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   The HSE is stopped by hardware when entering STOP and STANDBY modes.  
 226:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   This function reset the CSSON bit, so if the Clock security system(CSS)
 227:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         was previously enabled you have to enable it again after calling this
 228:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         function.    
 229:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_HSE: specifies the new state of the HSE.
 230:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 231:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_HSE_OFF: turn OFF the HSE oscillator, HSERDY flag goes low after
 232:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *                              6 HSE oscillator clock cycles.
 233:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_HSE_ON: turn ON the HSE oscillator
 234:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
 235:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 236:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 237:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_HSEConfig(uint8_t RCC_HSE)
 238:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 113              		.loc 1 238 0
 114              		.cfi_startproc
 115              		@ args = 0, pretend = 0, frame = 8
 116              		@ frame_needed = 1, uses_anonymous_args = 0
 117              		@ link register save eliminated.
 118 0000 80B4     		push	{r7}
 119              	.LCFI2:
 120              		.cfi_def_cfa_offset 4
 121              		.cfi_offset 7, -4
 122 0002 83B0     		sub	sp, sp, #12
 123              	.LCFI3:
 124              		.cfi_def_cfa_offset 16
 125 0004 00AF     		add	r7, sp, #0
 126              	.LCFI4:
 127              		.cfi_def_cfa_register 7
 128 0006 0346     		mov	r3, r0
 129 0008 FB71     		strb	r3, [r7, #7]
 239:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 240:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_HSE(RCC_HSE));
 241:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 242:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
 243:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE_OFF;
 130              		.loc 1 243 0
 131 000a 054B     		ldr	r3, .L5
 132 000c 0022     		movs	r2, #0
 133 000e 1A70     		strb	r2, [r3]
 244:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 245:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Set the new HSE configuration -------------------------------------------*/
 246:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE;
 134              		.loc 1 246 0
 135 0010 034B     		ldr	r3, .L5
 136 0012 FA79     		ldrb	r2, [r7, #7]
 137 0014 1A70     		strb	r2, [r3]
 247:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 138              		.loc 1 247 0
 139 0016 0C37     		adds	r7, r7, #12
 140 0018 BD46     		mov	sp, r7
 141              		@ sp needed
 142 001a 5DF8047B 		ldr	r7, [sp], #4
 143 001e 7047     		bx	lr
 144              	.L6:
 145              		.align	2
 146              	.L5:
 147 0020 02380240 		.word	1073887234
 148              		.cfi_endproc
 149              	.LFE111:
 151              		.section	.text.RCC_WaitForHSEStartUp,"ax",%progbits
 152              		.align	2
 153              		.global	RCC_WaitForHSEStartUp
 154              		.thumb
 155              		.thumb_func
 157              	RCC_WaitForHSEStartUp:
 158              	.LFB112:
 248:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 249:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 250:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Waits for HSE start-up.
 251:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   This functions waits on HSERDY flag to be set and return SUCCESS if 
 252:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         this flag is set, otherwise returns ERROR if the timeout is reached 
 253:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         and this flag is not set. The timeout value is defined by the constant
 254:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         HSE_STARTUP_TIMEOUT in stm32f4xx.h file. You can tailor it depending
 255:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         on the HSE crystal used in your application. 
 256:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  None
 257:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval An ErrorStatus enumeration value:
 258:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          - SUCCESS: HSE oscillator is stable and ready to use
 259:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          - ERROR: HSE oscillator not yet ready
 260:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 261:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** ErrorStatus RCC_WaitForHSEStartUp(void)
 262:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 159              		.loc 1 262 0
 160              		.cfi_startproc
 161              		@ args = 0, pretend = 0, frame = 8
 162              		@ frame_needed = 1, uses_anonymous_args = 0
 163 0000 80B5     		push	{r7, lr}
 164              	.LCFI5:
 165              		.cfi_def_cfa_offset 8
 166              		.cfi_offset 7, -8
 167              		.cfi_offset 14, -4
 168 0002 82B0     		sub	sp, sp, #8
 169              	.LCFI6:
 170              		.cfi_def_cfa_offset 16
 171 0004 00AF     		add	r7, sp, #0
 172              	.LCFI7:
 173              		.cfi_def_cfa_register 7
 263:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   __IO uint32_t startupcounter = 0;
 174              		.loc 1 263 0
 175 0006 0023     		movs	r3, #0
 176 0008 3B60     		str	r3, [r7]
 264:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   ErrorStatus status = ERROR;
 177              		.loc 1 264 0
 178 000a 0023     		movs	r3, #0
 179 000c FB71     		strb	r3, [r7, #7]
 265:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   FlagStatus hsestatus = RESET;
 180              		.loc 1 265 0
 181 000e 0023     		movs	r3, #0
 182 0010 BB71     		strb	r3, [r7, #6]
 183              	.L9:
 266:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Wait till HSE is ready and if Time out is reached exit */
 267:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   do
 268:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
 269:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     hsestatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
 184              		.loc 1 269 0 discriminator 1
 185 0012 3120     		movs	r0, #49
 186 0014 FFF7FEFF 		bl	RCC_GetFlagStatus
 187 0018 0346     		mov	r3, r0
 188 001a BB71     		strb	r3, [r7, #6]
 270:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     startupcounter++;
 189              		.loc 1 270 0 discriminator 1
 190 001c 3B68     		ldr	r3, [r7]
 191 001e 0133     		adds	r3, r3, #1
 192 0020 3B60     		str	r3, [r7]
 271:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   } while((startupcounter != HSE_STARTUP_TIMEOUT) && (hsestatus == RESET));
 193              		.loc 1 271 0 discriminator 1
 194 0022 3B68     		ldr	r3, [r7]
 195 0024 B3F5A06F 		cmp	r3, #1280
 196 0028 02D0     		beq	.L8
 197 002a BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 198 002c 002B     		cmp	r3, #0
 199 002e F0D0     		beq	.L9
 200              	.L8:
 272:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 273:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
 201              		.loc 1 273 0
 202 0030 3120     		movs	r0, #49
 203 0032 FFF7FEFF 		bl	RCC_GetFlagStatus
 204 0036 0346     		mov	r3, r0
 205 0038 002B     		cmp	r3, #0
 206 003a 02D0     		beq	.L10
 274:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
 275:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     status = SUCCESS;
 207              		.loc 1 275 0
 208 003c 0123     		movs	r3, #1
 209 003e FB71     		strb	r3, [r7, #7]
 210 0040 01E0     		b	.L11
 211              	.L10:
 276:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
 277:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
 278:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
 279:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     status = ERROR;
 212              		.loc 1 279 0
 213 0042 0023     		movs	r3, #0
 214 0044 FB71     		strb	r3, [r7, #7]
 215              	.L11:
 280:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
 281:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   return (status);
 216              		.loc 1 281 0
 217 0046 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 282:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 218              		.loc 1 282 0
 219 0048 1846     		mov	r0, r3
 220 004a 0837     		adds	r7, r7, #8
 221 004c BD46     		mov	sp, r7
 222              		@ sp needed
 223 004e 80BD     		pop	{r7, pc}
 224              		.cfi_endproc
 225              	.LFE112:
 227              		.section	.text.RCC_AdjustHSICalibrationValue,"ax",%progbits
 228              		.align	2
 229              		.global	RCC_AdjustHSICalibrationValue
 230              		.thumb
 231              		.thumb_func
 233              	RCC_AdjustHSICalibrationValue:
 234              	.LFB113:
 283:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 284:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 285:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Adjusts the Internal High Speed oscillator (HSI) calibration value.
 286:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   The calibration is used to compensate for the variations in voltage
 287:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         and temperature that influence the frequency of the internal HSI RC.
 288:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  HSICalibrationValue: specifies the calibration trimming value.
 289:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         This parameter must be a number between 0 and 0x1F.
 290:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 291:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 292:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
 293:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 235              		.loc 1 293 0
 236              		.cfi_startproc
 237              		@ args = 0, pretend = 0, frame = 16
 238              		@ frame_needed = 1, uses_anonymous_args = 0
 239              		@ link register save eliminated.
 240 0000 80B4     		push	{r7}
 241              	.LCFI8:
 242              		.cfi_def_cfa_offset 4
 243              		.cfi_offset 7, -4
 244 0002 85B0     		sub	sp, sp, #20
 245              	.LCFI9:
 246              		.cfi_def_cfa_offset 24
 247 0004 00AF     		add	r7, sp, #0
 248              	.LCFI10:
 249              		.cfi_def_cfa_register 7
 250 0006 0346     		mov	r3, r0
 251 0008 FB71     		strb	r3, [r7, #7]
 294:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 252              		.loc 1 294 0
 253 000a 0023     		movs	r3, #0
 254 000c FB60     		str	r3, [r7, #12]
 295:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 296:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));
 297:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 298:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg = RCC->CR;
 255              		.loc 1 298 0
 256 000e 0A4B     		ldr	r3, .L14
 257 0010 1B68     		ldr	r3, [r3]
 258 0012 FB60     		str	r3, [r7, #12]
 299:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 300:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Clear HSITRIM[4:0] bits */
 301:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg &= ~RCC_CR_HSITRIM;
 259              		.loc 1 301 0
 260 0014 FB68     		ldr	r3, [r7, #12]
 261 0016 23F0F803 		bic	r3, r3, #248
 262 001a FB60     		str	r3, [r7, #12]
 302:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 303:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
 304:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg |= (uint32_t)HSICalibrationValue << 3;
 263              		.loc 1 304 0
 264 001c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 265 001e DB00     		lsls	r3, r3, #3
 266 0020 FA68     		ldr	r2, [r7, #12]
 267 0022 1343     		orrs	r3, r3, r2
 268 0024 FB60     		str	r3, [r7, #12]
 305:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 306:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Store the new value */
 307:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->CR = tmpreg;
 269              		.loc 1 307 0
 270 0026 044B     		ldr	r3, .L14
 271 0028 FA68     		ldr	r2, [r7, #12]
 272 002a 1A60     		str	r2, [r3]
 308:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 273              		.loc 1 308 0
 274 002c 1437     		adds	r7, r7, #20
 275 002e BD46     		mov	sp, r7
 276              		@ sp needed
 277 0030 5DF8047B 		ldr	r7, [sp], #4
 278 0034 7047     		bx	lr
 279              	.L15:
 280 0036 00BF     		.align	2
 281              	.L14:
 282 0038 00380240 		.word	1073887232
 283              		.cfi_endproc
 284              	.LFE113:
 286              		.section	.text.RCC_HSICmd,"ax",%progbits
 287              		.align	2
 288              		.global	RCC_HSICmd
 289              		.thumb
 290              		.thumb_func
 292              	RCC_HSICmd:
 293              	.LFB114:
 309:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 310:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 311:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the Internal High Speed oscillator (HSI).
 312:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   The HSI is stopped by hardware when entering STOP and STANDBY modes.
 313:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         It is used (enabled by hardware) as system clock source after startup
 314:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         from Reset, wakeup from STOP and STANDBY mode, or in case of failure
 315:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         of the HSE used directly or indirectly as system clock (if the Clock
 316:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         Security System CSS is enabled).             
 317:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   HSI can not be stopped if it is used as system clock source. In this case,
 318:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         you have to select another source of the system clock then stop the HSI.  
 319:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   After enabling the HSI, the application software should wait on HSIRDY
 320:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         flag to be set indicating that HSI clock is stable and can be used as
 321:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         system clock source.  
 322:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the HSI.
 323:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
 324:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   When the HSI is stopped, HSIRDY flag goes low after 6 HSI oscillator
 325:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         clock cycles.  
 326:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 327:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 328:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_HSICmd(FunctionalState NewState)
 329:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 294              		.loc 1 329 0
 295              		.cfi_startproc
 296              		@ args = 0, pretend = 0, frame = 8
 297              		@ frame_needed = 1, uses_anonymous_args = 0
 298              		@ link register save eliminated.
 299 0000 80B4     		push	{r7}
 300              	.LCFI11:
 301              		.cfi_def_cfa_offset 4
 302              		.cfi_offset 7, -4
 303 0002 83B0     		sub	sp, sp, #12
 304              	.LCFI12:
 305              		.cfi_def_cfa_offset 16
 306 0004 00AF     		add	r7, sp, #0
 307              	.LCFI13:
 308              		.cfi_def_cfa_register 7
 309 0006 0346     		mov	r3, r0
 310 0008 FB71     		strb	r3, [r7, #7]
 330:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 331:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 332:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 333:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
 311              		.loc 1 333 0
 312 000a 044B     		ldr	r3, .L17
 313 000c FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 314 000e 1A60     		str	r2, [r3]
 334:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 315              		.loc 1 334 0
 316 0010 0C37     		adds	r7, r7, #12
 317 0012 BD46     		mov	sp, r7
 318              		@ sp needed
 319 0014 5DF8047B 		ldr	r7, [sp], #4
 320 0018 7047     		bx	lr
 321              	.L18:
 322 001a 00BF     		.align	2
 323              	.L17:
 324 001c 00004742 		.word	1111949312
 325              		.cfi_endproc
 326              	.LFE114:
 328              		.section	.text.RCC_LSEConfig,"ax",%progbits
 329              		.align	2
 330              		.global	RCC_LSEConfig
 331              		.thumb
 332              		.thumb_func
 334              	RCC_LSEConfig:
 335              	.LFB115:
 335:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 336:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 337:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Configures the External Low Speed oscillator (LSE).
 338:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   As the LSE is in the Backup domain and write access is denied to
 339:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         this domain after reset, you have to enable write access using 
 340:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         PWR_BackupAccessCmd(ENABLE) function before to configure the LSE
 341:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         (to be done once after reset).  
 342:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   After enabling the LSE (RCC_LSE_ON or RCC_LSE_Bypass), the application
 343:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         software should wait on LSERDY flag to be set indicating that LSE clock
 344:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         is stable and can be used to clock the RTC.
 345:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_LSE: specifies the new state of the LSE.
 346:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 347:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_LSE_OFF: turn OFF the LSE oscillator, LSERDY flag goes low after
 348:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *                              6 LSE oscillator clock cycles.
 349:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_LSE_ON: turn ON the LSE oscillator
 350:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
 351:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 352:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 353:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_LSEConfig(uint8_t RCC_LSE)
 354:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 336              		.loc 1 354 0
 337              		.cfi_startproc
 338              		@ args = 0, pretend = 0, frame = 8
 339              		@ frame_needed = 1, uses_anonymous_args = 0
 340              		@ link register save eliminated.
 341 0000 80B4     		push	{r7}
 342              	.LCFI14:
 343              		.cfi_def_cfa_offset 4
 344              		.cfi_offset 7, -4
 345 0002 83B0     		sub	sp, sp, #12
 346              	.LCFI15:
 347              		.cfi_def_cfa_offset 16
 348 0004 00AF     		add	r7, sp, #0
 349              	.LCFI16:
 350              		.cfi_def_cfa_register 7
 351 0006 0346     		mov	r3, r0
 352 0008 FB71     		strb	r3, [r7, #7]
 355:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 356:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_LSE(RCC_LSE));
 357:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 358:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
 359:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Reset LSEON bit */
 360:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 353              		.loc 1 360 0
 354 000a 0C4B     		ldr	r3, .L24
 355 000c 0022     		movs	r2, #0
 356 000e 1A70     		strb	r2, [r3]
 361:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 362:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Reset LSEBYP bit */
 363:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 357              		.loc 1 363 0
 358 0010 0A4B     		ldr	r3, .L24
 359 0012 0022     		movs	r2, #0
 360 0014 1A70     		strb	r2, [r3]
 364:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 365:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
 366:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   switch (RCC_LSE)
 361              		.loc 1 366 0
 362 0016 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 363 0018 012B     		cmp	r3, #1
 364 001a 02D0     		beq	.L21
 365 001c 042B     		cmp	r3, #4
 366 001e 04D0     		beq	.L22
 367:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
 368:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     case RCC_LSE_ON:
 369:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       /* Set LSEON bit */
 370:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
 371:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       break;
 372:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     case RCC_LSE_Bypass:
 373:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       /* Set LSEBYP and LSEON bits */
 374:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
 375:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       break;
 376:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     default:
 377:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       break;
 367              		.loc 1 377 0
 368 0020 07E0     		b	.L19
 369              	.L21:
 370:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
 370              		.loc 1 370 0
 371 0022 064B     		ldr	r3, .L24
 372 0024 0122     		movs	r2, #1
 373 0026 1A70     		strb	r2, [r3]
 371:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       break;
 374              		.loc 1 371 0
 375 0028 03E0     		b	.L19
 376              	.L22:
 374:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
 377              		.loc 1 374 0
 378 002a 044B     		ldr	r3, .L24
 379 002c 0522     		movs	r2, #5
 380 002e 1A70     		strb	r2, [r3]
 375:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       break;
 381              		.loc 1 375 0
 382 0030 00BF     		nop
 383              	.L19:
 378:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
 379:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 384              		.loc 1 379 0
 385 0032 0C37     		adds	r7, r7, #12
 386 0034 BD46     		mov	sp, r7
 387              		@ sp needed
 388 0036 5DF8047B 		ldr	r7, [sp], #4
 389 003a 7047     		bx	lr
 390              	.L25:
 391              		.align	2
 392              	.L24:
 393 003c 70380240 		.word	1073887344
 394              		.cfi_endproc
 395              	.LFE115:
 397              		.section	.text.RCC_LSICmd,"ax",%progbits
 398              		.align	2
 399              		.global	RCC_LSICmd
 400              		.thumb
 401              		.thumb_func
 403              	RCC_LSICmd:
 404              	.LFB116:
 380:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 381:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 382:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the Internal Low Speed oscillator (LSI).
 383:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   After enabling the LSI, the application software should wait on 
 384:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         LSIRDY flag to be set indicating that LSI clock is stable and can
 385:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         be used to clock the IWDG and/or the RTC.
 386:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   LSI can not be disabled if the IWDG is running.  
 387:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the LSI.
 388:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
 389:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   When the LSI is stopped, LSIRDY flag goes low after 6 LSI oscillator
 390:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         clock cycles. 
 391:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 392:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 393:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_LSICmd(FunctionalState NewState)
 394:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 405              		.loc 1 394 0
 406              		.cfi_startproc
 407              		@ args = 0, pretend = 0, frame = 8
 408              		@ frame_needed = 1, uses_anonymous_args = 0
 409              		@ link register save eliminated.
 410 0000 80B4     		push	{r7}
 411              	.LCFI17:
 412              		.cfi_def_cfa_offset 4
 413              		.cfi_offset 7, -4
 414 0002 83B0     		sub	sp, sp, #12
 415              	.LCFI18:
 416              		.cfi_def_cfa_offset 16
 417 0004 00AF     		add	r7, sp, #0
 418              	.LCFI19:
 419              		.cfi_def_cfa_register 7
 420 0006 0346     		mov	r3, r0
 421 0008 FB71     		strb	r3, [r7, #7]
 395:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 396:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 397:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 398:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
 422              		.loc 1 398 0
 423 000a 044B     		ldr	r3, .L27
 424 000c FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 425 000e 1A60     		str	r2, [r3]
 399:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 426              		.loc 1 399 0
 427 0010 0C37     		adds	r7, r7, #12
 428 0012 BD46     		mov	sp, r7
 429              		@ sp needed
 430 0014 5DF8047B 		ldr	r7, [sp], #4
 431 0018 7047     		bx	lr
 432              	.L28:
 433 001a 00BF     		.align	2
 434              	.L27:
 435 001c 800E4742 		.word	1111953024
 436              		.cfi_endproc
 437              	.LFE116:
 439              		.section	.text.RCC_PLLConfig,"ax",%progbits
 440              		.align	2
 441              		.global	RCC_PLLConfig
 442              		.thumb
 443              		.thumb_func
 445              	RCC_PLLConfig:
 446              	.LFB117:
 400:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 401:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 402:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Configures the main PLL clock source, multiplication and division factors.
 403:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   This function must be used only when the main PLL is disabled.
 404:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *  
 405:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_PLLSource: specifies the PLL entry clock source.
 406:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 407:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_PLLSource_HSI: HSI oscillator clock selected as PLL clock entry
 408:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_PLLSource_HSE: HSE oscillator clock selected as PLL clock entry
 409:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   This clock source (RCC_PLLSource) is common for the main PLL and PLLI2S.  
 410:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *  
 411:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  PLLM: specifies the division factor for PLL VCO input clock
 412:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 0 and 63.
 413:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   You have to set the PLLM parameter correctly to ensure that the VCO input
 414:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         frequency ranges from 1 to 2 MHz. It is recommended to select a frequency
 415:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         of 2 MHz to limit PLL jitter.
 416:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *  
 417:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  PLLN: specifies the multiplication factor for PLL VCO output clock
 418:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 192 and 432.
 419:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   You have to set the PLLN parameter correctly to ensure that the VCO
 420:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         output frequency is between 192 and 432 MHz.
 421:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *   
 422:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  PLLP: specifies the division factor for main system clock (SYSCLK)
 423:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter must be a number in the range {2, 4, 6, or 8}.
 424:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   You have to set the PLLP parameter correctly to not exceed 120 MHz on
 425:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         the System clock frequency.
 426:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *  
 427:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  PLLQ: specifies the division factor for OTG FS, SDIO and RNG clocks
 428:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 4 and 15.
 429:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   If the USB OTG FS is used in your application, you have to set the
 430:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         PLLQ parameter correctly to have 48 MHz clock for the USB. However,
 431:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         the SDIO and RNG need a frequency lower than or equal to 48 MHz to work
 432:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         correctly.
 433:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *   
 434:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 435:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 436:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP, uint32_t PL
 437:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 447              		.loc 1 437 0
 448              		.cfi_startproc
 449              		@ args = 4, pretend = 0, frame = 16
 450              		@ frame_needed = 1, uses_anonymous_args = 0
 451              		@ link register save eliminated.
 452 0000 80B4     		push	{r7}
 453              	.LCFI20:
 454              		.cfi_def_cfa_offset 4
 455              		.cfi_offset 7, -4
 456 0002 85B0     		sub	sp, sp, #20
 457              	.LCFI21:
 458              		.cfi_def_cfa_offset 24
 459 0004 00AF     		add	r7, sp, #0
 460              	.LCFI22:
 461              		.cfi_def_cfa_register 7
 462 0006 F860     		str	r0, [r7, #12]
 463 0008 B960     		str	r1, [r7, #8]
 464 000a 7A60     		str	r2, [r7, #4]
 465 000c 3B60     		str	r3, [r7]
 438:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 439:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
 440:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLM_VALUE(PLLM));
 441:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLN_VALUE(PLLN));
 442:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLP_VALUE(PLLP));
 443:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLQ_VALUE(PLLQ));
 444:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 445:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
 466              		.loc 1 445 0
 467 000e 0A4B     		ldr	r3, .L30
 468 0010 7A68     		ldr	r2, [r7, #4]
 469 0012 9101     		lsls	r1, r2, #6
 470 0014 BA68     		ldr	r2, [r7, #8]
 471 0016 1143     		orrs	r1, r1, r2
 472 0018 3A68     		ldr	r2, [r7]
 473 001a 5208     		lsrs	r2, r2, #1
 474 001c 013A     		subs	r2, r2, #1
 475 001e 1204     		lsls	r2, r2, #16
 476 0020 1143     		orrs	r1, r1, r2
 477 0022 FA68     		ldr	r2, [r7, #12]
 478 0024 1143     		orrs	r1, r1, r2
 446:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****                  (PLLQ << 24);
 479              		.loc 1 446 0
 480 0026 BA69     		ldr	r2, [r7, #24]
 481 0028 1206     		lsls	r2, r2, #24
 445:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
 482              		.loc 1 445 0
 483 002a 0A43     		orrs	r2, r2, r1
 484 002c 5A60     		str	r2, [r3, #4]
 447:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 485              		.loc 1 447 0
 486 002e 1437     		adds	r7, r7, #20
 487 0030 BD46     		mov	sp, r7
 488              		@ sp needed
 489 0032 5DF8047B 		ldr	r7, [sp], #4
 490 0036 7047     		bx	lr
 491              	.L31:
 492              		.align	2
 493              	.L30:
 494 0038 00380240 		.word	1073887232
 495              		.cfi_endproc
 496              	.LFE117:
 498              		.section	.text.RCC_PLLCmd,"ax",%progbits
 499              		.align	2
 500              		.global	RCC_PLLCmd
 501              		.thumb
 502              		.thumb_func
 504              	RCC_PLLCmd:
 505              	.LFB118:
 448:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 449:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 450:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the main PLL.
 451:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   After enabling the main PLL, the application software should wait on 
 452:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         PLLRDY flag to be set indicating that PLL clock is stable and can
 453:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         be used as system clock source.
 454:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   The main PLL can not be disabled if it is used as system clock source
 455:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   The main PLL is disabled by hardware when entering STOP and STANDBY modes.
 456:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the main PLL. This parameter can be: ENABLE or DISABLE.
 457:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 458:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 459:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_PLLCmd(FunctionalState NewState)
 460:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 506              		.loc 1 460 0
 507              		.cfi_startproc
 508              		@ args = 0, pretend = 0, frame = 8
 509              		@ frame_needed = 1, uses_anonymous_args = 0
 510              		@ link register save eliminated.
 511 0000 80B4     		push	{r7}
 512              	.LCFI23:
 513              		.cfi_def_cfa_offset 4
 514              		.cfi_offset 7, -4
 515 0002 83B0     		sub	sp, sp, #12
 516              	.LCFI24:
 517              		.cfi_def_cfa_offset 16
 518 0004 00AF     		add	r7, sp, #0
 519              	.LCFI25:
 520              		.cfi_def_cfa_register 7
 521 0006 0346     		mov	r3, r0
 522 0008 FB71     		strb	r3, [r7, #7]
 461:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 462:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 463:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 523              		.loc 1 463 0
 524 000a 044B     		ldr	r3, .L33
 525 000c FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 526 000e 1A60     		str	r2, [r3]
 464:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 527              		.loc 1 464 0
 528 0010 0C37     		adds	r7, r7, #12
 529 0012 BD46     		mov	sp, r7
 530              		@ sp needed
 531 0014 5DF8047B 		ldr	r7, [sp], #4
 532 0018 7047     		bx	lr
 533              	.L34:
 534 001a 00BF     		.align	2
 535              	.L33:
 536 001c 60004742 		.word	1111949408
 537              		.cfi_endproc
 538              	.LFE118:
 540              		.section	.text.RCC_PLLI2SConfig,"ax",%progbits
 541              		.align	2
 542              		.global	RCC_PLLI2SConfig
 543              		.thumb
 544              		.thumb_func
 546              	RCC_PLLI2SConfig:
 547              	.LFB119:
 465:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 466:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 467:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Configures the PLLI2S clock multiplication and division factors.
 468:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *   
 469:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   PLLI2S is available only in Silicon RevisionB and RevisionY.    
 470:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   This function must be used only when the PLLI2S is disabled.
 471:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   PLLI2S clock source is common with the main PLL (configured in 
 472:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         RCC_PLLConfig function )  
 473:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *             
 474:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  PLLI2SN: specifies the multiplication factor for PLLI2S VCO output clock
 475:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 192 and 432.
 476:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   You have to set the PLLI2SN parameter correctly to ensure that the VCO 
 477:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         output frequency is between 192 and 432 MHz.
 478:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *    
 479:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  PLLI2SR: specifies the division factor for I2S clock
 480:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 2 and 7.
 481:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   You have to set the PLLI2SR parameter correctly to not exceed 192 MHz
 482:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         on the I2S clock frequency.
 483:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *   
 484:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 485:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 486:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_PLLI2SConfig(uint32_t PLLI2SN, uint32_t PLLI2SR)
 487:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 548              		.loc 1 487 0
 549              		.cfi_startproc
 550              		@ args = 0, pretend = 0, frame = 8
 551              		@ frame_needed = 1, uses_anonymous_args = 0
 552              		@ link register save eliminated.
 553 0000 80B4     		push	{r7}
 554              	.LCFI26:
 555              		.cfi_def_cfa_offset 4
 556              		.cfi_offset 7, -4
 557 0002 83B0     		sub	sp, sp, #12
 558              	.LCFI27:
 559              		.cfi_def_cfa_offset 16
 560 0004 00AF     		add	r7, sp, #0
 561              	.LCFI28:
 562              		.cfi_def_cfa_register 7
 563 0006 7860     		str	r0, [r7, #4]
 564 0008 3960     		str	r1, [r7]
 488:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 489:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLI2SN_VALUE(PLLI2SN));
 490:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLI2SR_VALUE(PLLI2SR));
 491:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 492:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->PLLI2SCFGR = (PLLI2SN << 6) | (PLLI2SR << 28);
 565              		.loc 1 492 0
 566 000a 064B     		ldr	r3, .L36
 567 000c 7A68     		ldr	r2, [r7, #4]
 568 000e 9101     		lsls	r1, r2, #6
 569 0010 3A68     		ldr	r2, [r7]
 570 0012 1207     		lsls	r2, r2, #28
 571 0014 0A43     		orrs	r2, r2, r1
 572 0016 C3F88420 		str	r2, [r3, #132]
 493:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 573              		.loc 1 493 0
 574 001a 0C37     		adds	r7, r7, #12
 575 001c BD46     		mov	sp, r7
 576              		@ sp needed
 577 001e 5DF8047B 		ldr	r7, [sp], #4
 578 0022 7047     		bx	lr
 579              	.L37:
 580              		.align	2
 581              	.L36:
 582 0024 00380240 		.word	1073887232
 583              		.cfi_endproc
 584              	.LFE119:
 586              		.section	.text.RCC_PLLI2SCmd,"ax",%progbits
 587              		.align	2
 588              		.global	RCC_PLLI2SCmd
 589              		.thumb
 590              		.thumb_func
 592              	RCC_PLLI2SCmd:
 593              	.LFB120:
 494:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 495:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 496:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the PLLI2S.
 497:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   PLLI2S is available only in RevisionB and RevisionY 
 498:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   The PLLI2S is disabled by hardware when entering STOP and STANDBY modes.  
 499:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the PLLI2S. This parameter can be: ENABLE or DISABLE.
 500:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 501:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 502:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_PLLI2SCmd(FunctionalState NewState)
 503:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 594              		.loc 1 503 0
 595              		.cfi_startproc
 596              		@ args = 0, pretend = 0, frame = 8
 597              		@ frame_needed = 1, uses_anonymous_args = 0
 598              		@ link register save eliminated.
 599 0000 80B4     		push	{r7}
 600              	.LCFI29:
 601              		.cfi_def_cfa_offset 4
 602              		.cfi_offset 7, -4
 603 0002 83B0     		sub	sp, sp, #12
 604              	.LCFI30:
 605              		.cfi_def_cfa_offset 16
 606 0004 00AF     		add	r7, sp, #0
 607              	.LCFI31:
 608              		.cfi_def_cfa_register 7
 609 0006 0346     		mov	r3, r0
 610 0008 FB71     		strb	r3, [r7, #7]
 504:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 505:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 506:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *(__IO uint32_t *) CR_PLLI2SON_BB = (uint32_t)NewState;
 611              		.loc 1 506 0
 612 000a 044B     		ldr	r3, .L39
 613 000c FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 614 000e 1A60     		str	r2, [r3]
 507:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 615              		.loc 1 507 0
 616 0010 0C37     		adds	r7, r7, #12
 617 0012 BD46     		mov	sp, r7
 618              		@ sp needed
 619 0014 5DF8047B 		ldr	r7, [sp], #4
 620 0018 7047     		bx	lr
 621              	.L40:
 622 001a 00BF     		.align	2
 623              	.L39:
 624 001c 68004742 		.word	1111949416
 625              		.cfi_endproc
 626              	.LFE120:
 628              		.section	.text.RCC_ClockSecuritySystemCmd,"ax",%progbits
 629              		.align	2
 630              		.global	RCC_ClockSecuritySystemCmd
 631              		.thumb
 632              		.thumb_func
 634              	RCC_ClockSecuritySystemCmd:
 635              	.LFB121:
 508:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 509:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 510:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the Clock Security System.
 511:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   If a failure is detected on the HSE oscillator clock, this oscillator
 512:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         is automatically disabled and an interrupt is generated to inform the
 513:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         software about the failure (Clock Security System Interrupt, CSSI),
 514:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         allowing the MCU to perform rescue operations. The CSSI is linked to 
 515:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.  
 516:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the Clock Security System.
 517:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         This parameter can be: ENABLE or DISABLE.
 518:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 519:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 520:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
 521:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 636              		.loc 1 521 0
 637              		.cfi_startproc
 638              		@ args = 0, pretend = 0, frame = 8
 639              		@ frame_needed = 1, uses_anonymous_args = 0
 640              		@ link register save eliminated.
 641 0000 80B4     		push	{r7}
 642              	.LCFI32:
 643              		.cfi_def_cfa_offset 4
 644              		.cfi_offset 7, -4
 645 0002 83B0     		sub	sp, sp, #12
 646              	.LCFI33:
 647              		.cfi_def_cfa_offset 16
 648 0004 00AF     		add	r7, sp, #0
 649              	.LCFI34:
 650              		.cfi_def_cfa_register 7
 651 0006 0346     		mov	r3, r0
 652 0008 FB71     		strb	r3, [r7, #7]
 522:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 523:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 524:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
 653              		.loc 1 524 0
 654 000a 044B     		ldr	r3, .L42
 655 000c FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 656 000e 1A60     		str	r2, [r3]
 525:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 657              		.loc 1 525 0
 658 0010 0C37     		adds	r7, r7, #12
 659 0012 BD46     		mov	sp, r7
 660              		@ sp needed
 661 0014 5DF8047B 		ldr	r7, [sp], #4
 662 0018 7047     		bx	lr
 663              	.L43:
 664 001a 00BF     		.align	2
 665              	.L42:
 666 001c 4C004742 		.word	1111949388
 667              		.cfi_endproc
 668              	.LFE121:
 670              		.section	.text.RCC_MCO1Config,"ax",%progbits
 671              		.align	2
 672              		.global	RCC_MCO1Config
 673              		.thumb
 674              		.thumb_func
 676              	RCC_MCO1Config:
 677              	.LFB122:
 526:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 527:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 528:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Selects the clock source to output on MCO1 pin(PA8).
 529:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   PA8 should be configured in alternate function mode.
 530:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_MCO1Source: specifies the clock source to output.
 531:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 532:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Source_HSI: HSI clock selected as MCO1 source
 533:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Source_LSE: LSE clock selected as MCO1 source
 534:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Source_HSE: HSE clock selected as MCO1 source
 535:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Source_PLLCLK: main PLL clock selected as MCO1 source
 536:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_MCO1Div: specifies the MCO1 prescaler.
 537:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 538:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Div_1: no division applied to MCO1 clock
 539:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Div_2: division by 2 applied to MCO1 clock
 540:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Div_3: division by 3 applied to MCO1 clock
 541:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Div_4: division by 4 applied to MCO1 clock
 542:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Div_5: division by 5 applied to MCO1 clock
 543:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 544:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 545:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_MCO1Config(uint32_t RCC_MCO1Source, uint32_t RCC_MCO1Div)
 546:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 678              		.loc 1 546 0
 679              		.cfi_startproc
 680              		@ args = 0, pretend = 0, frame = 16
 681              		@ frame_needed = 1, uses_anonymous_args = 0
 682              		@ link register save eliminated.
 683 0000 80B4     		push	{r7}
 684              	.LCFI35:
 685              		.cfi_def_cfa_offset 4
 686              		.cfi_offset 7, -4
 687 0002 85B0     		sub	sp, sp, #20
 688              	.LCFI36:
 689              		.cfi_def_cfa_offset 24
 690 0004 00AF     		add	r7, sp, #0
 691              	.LCFI37:
 692              		.cfi_def_cfa_register 7
 693 0006 7860     		str	r0, [r7, #4]
 694 0008 3960     		str	r1, [r7]
 547:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 695              		.loc 1 547 0
 696 000a 0023     		movs	r3, #0
 697 000c FB60     		str	r3, [r7, #12]
 548:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   
 549:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 550:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_MCO1SOURCE(RCC_MCO1Source));
 551:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_MCO1DIV(RCC_MCO1Div));  
 552:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 553:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg = RCC->CFGR;
 698              		.loc 1 553 0
 699 000e 0A4B     		ldr	r3, .L45
 700 0010 9B68     		ldr	r3, [r3, #8]
 701 0012 FB60     		str	r3, [r7, #12]
 554:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 555:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Clear MCO1[1:0] and MCO1PRE[2:0] bits */
 556:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg &= CFGR_MCO1_RESET_MASK;
 702              		.loc 1 556 0
 703 0014 FB68     		ldr	r3, [r7, #12]
 704 0016 23F0EC63 		bic	r3, r3, #123731968
 705 001a FB60     		str	r3, [r7, #12]
 557:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 558:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Select MCO1 clock source and prescaler */
 559:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg |= RCC_MCO1Source | RCC_MCO1Div;
 706              		.loc 1 559 0
 707 001c 7A68     		ldr	r2, [r7, #4]
 708 001e 3B68     		ldr	r3, [r7]
 709 0020 1343     		orrs	r3, r3, r2
 710 0022 FA68     		ldr	r2, [r7, #12]
 711 0024 1343     		orrs	r3, r3, r2
 712 0026 FB60     		str	r3, [r7, #12]
 560:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 561:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Store the new value */
 562:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->CFGR = tmpreg;  
 713              		.loc 1 562 0
 714 0028 034B     		ldr	r3, .L45
 715 002a FA68     		ldr	r2, [r7, #12]
 716 002c 9A60     		str	r2, [r3, #8]
 563:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 717              		.loc 1 563 0
 718 002e 1437     		adds	r7, r7, #20
 719 0030 BD46     		mov	sp, r7
 720              		@ sp needed
 721 0032 5DF8047B 		ldr	r7, [sp], #4
 722 0036 7047     		bx	lr
 723              	.L46:
 724              		.align	2
 725              	.L45:
 726 0038 00380240 		.word	1073887232
 727              		.cfi_endproc
 728              	.LFE122:
 730              		.section	.text.RCC_MCO2Config,"ax",%progbits
 731              		.align	2
 732              		.global	RCC_MCO2Config
 733              		.thumb
 734              		.thumb_func
 736              	RCC_MCO2Config:
 737              	.LFB123:
 564:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 565:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 566:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Selects the clock source to output on MCO2 pin(PC9).
 567:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   PC9 should be configured in alternate function mode.
 568:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_MCO2Source: specifies the clock source to output.
 569:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 570:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO2Source_SYSCLK: System clock (SYSCLK) selected as MCO2 source
 571:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO2Source_PLLI2SCLK: PLLI2S clock selected as MCO2 source
 572:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO2Source_HSE: HSE clock selected as MCO2 source
 573:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO2Source_PLLCLK: main PLL clock selected as MCO2 source
 574:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_MCO2Div: specifies the MCO2 prescaler.
 575:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 576:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO2Div_1: no division applied to MCO2 clock
 577:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO2Div_2: division by 2 applied to MCO2 clock
 578:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO2Div_3: division by 3 applied to MCO2 clock
 579:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO2Div_4: division by 4 applied to MCO2 clock
 580:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO2Div_5: division by 5 applied to MCO2 clock
 581:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 582:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 583:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_MCO2Config(uint32_t RCC_MCO2Source, uint32_t RCC_MCO2Div)
 584:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 738              		.loc 1 584 0
 739              		.cfi_startproc
 740              		@ args = 0, pretend = 0, frame = 16
 741              		@ frame_needed = 1, uses_anonymous_args = 0
 742              		@ link register save eliminated.
 743 0000 80B4     		push	{r7}
 744              	.LCFI38:
 745              		.cfi_def_cfa_offset 4
 746              		.cfi_offset 7, -4
 747 0002 85B0     		sub	sp, sp, #20
 748              	.LCFI39:
 749              		.cfi_def_cfa_offset 24
 750 0004 00AF     		add	r7, sp, #0
 751              	.LCFI40:
 752              		.cfi_def_cfa_register 7
 753 0006 7860     		str	r0, [r7, #4]
 754 0008 3960     		str	r1, [r7]
 585:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 755              		.loc 1 585 0
 756 000a 0023     		movs	r3, #0
 757 000c FB60     		str	r3, [r7, #12]
 586:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   
 587:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 588:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_MCO2SOURCE(RCC_MCO2Source));
 589:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_MCO2DIV(RCC_MCO2Div));
 590:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   
 591:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg = RCC->CFGR;
 758              		.loc 1 591 0
 759 000e 0A4B     		ldr	r3, .L48
 760 0010 9B68     		ldr	r3, [r3, #8]
 761 0012 FB60     		str	r3, [r7, #12]
 592:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   
 593:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Clear MCO2 and MCO2PRE[2:0] bits */
 594:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg &= CFGR_MCO2_RESET_MASK;
 762              		.loc 1 594 0
 763 0014 FB68     		ldr	r3, [r7, #12]
 764 0016 23F07843 		bic	r3, r3, #-134217728
 765 001a FB60     		str	r3, [r7, #12]
 595:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 596:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Select MCO2 clock source and prescaler */
 597:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg |= RCC_MCO2Source | RCC_MCO2Div;
 766              		.loc 1 597 0
 767 001c 7A68     		ldr	r2, [r7, #4]
 768 001e 3B68     		ldr	r3, [r7]
 769 0020 1343     		orrs	r3, r3, r2
 770 0022 FA68     		ldr	r2, [r7, #12]
 771 0024 1343     		orrs	r3, r3, r2
 772 0026 FB60     		str	r3, [r7, #12]
 598:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 599:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Store the new value */
 600:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->CFGR = tmpreg;  
 773              		.loc 1 600 0
 774 0028 034B     		ldr	r3, .L48
 775 002a FA68     		ldr	r2, [r7, #12]
 776 002c 9A60     		str	r2, [r3, #8]
 601:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 777              		.loc 1 601 0
 778 002e 1437     		adds	r7, r7, #20
 779 0030 BD46     		mov	sp, r7
 780              		@ sp needed
 781 0032 5DF8047B 		ldr	r7, [sp], #4
 782 0036 7047     		bx	lr
 783              	.L49:
 784              		.align	2
 785              	.L48:
 786 0038 00380240 		.word	1073887232
 787              		.cfi_endproc
 788              	.LFE123:
 790              		.section	.text.RCC_SYSCLKConfig,"ax",%progbits
 791              		.align	2
 792              		.global	RCC_SYSCLKConfig
 793              		.thumb
 794              		.thumb_func
 796              	RCC_SYSCLKConfig:
 797              	.LFB124:
 602:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 603:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 604:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @}
 605:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 606:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 607:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /** @defgroup RCC_Group2 System AHB and APB busses clocks configuration functions
 608:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  *  @brief   System, AHB and APB busses clocks configuration functions
 609:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  *
 610:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** @verbatim   
 611:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  ===============================================================================
 612:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****              System, AHB and APB busses clocks configuration functions
 613:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  ===============================================================================  
 614:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 615:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   This section provide functions allowing to configure the System, AHB, APB1 and 
 616:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   APB2 busses clocks.
 617:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   
 618:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   1. Several clock sources can be used to drive the System clock (SYSCLK): HSI,
 619:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      HSE and PLL.
 620:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      The AHB clock (HCLK) is derived from System clock through configurable prescaler
 621:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      and used to clock the CPU, memory and peripherals mapped on AHB bus (DMA, GPIO...).
 622:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      APB1 (PCLK1) and APB2 (PCLK2) clocks are derived from AHB clock through 
 623:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      configurable prescalers and used to clock the peripherals mapped on these busses.
 624:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      You can use "RCC_GetClocksFreq()" function to retrieve the frequencies of these clocks.  
 625:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 626:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** @note All the peripheral clocks are derived from the System clock (SYSCLK) except:
 627:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****        - I2S: the I2S clock can be derived either from a specific PLL (PLLI2S) or
 628:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****           from an external clock mapped on the I2S_CKIN pin. 
 629:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****           You have to use RCC_I2SCLKConfig() function to configure this clock. 
 630:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****        - RTC: the RTC clock can be derived either from the LSI, LSE or HSE clock
 631:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****           divided by 2 to 31. You have to use RCC_RTCCLKConfig() and RCC_RTCCLKCmd()
 632:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****           functions to configure this clock. 
 633:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****        - USB OTG FS, SDIO and RTC: USB OTG FS require a frequency equal to 48 MHz
 634:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****           to work correctly, while the SDIO require a frequency equal or lower than
 635:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****           to 48. This clock is derived of the main PLL through PLLQ divider.
 636:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****        - IWDG clock which is always the LSI clock.
 637:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****        
 638:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   2. The maximum frequency of the SYSCLK and HCLK is 120 MHz, PCLK2 60 MHz and PCLK1 30 MHz.
 639:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      Depending on the device voltage range, the maximum frequency should be 
 640:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      adapted accordingly:
 641:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  +-------------------------------------------------------------------------------------+     
 642:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  | Latency       |                HCLK clock frequency (MHz)                           |
 643:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |               |---------------------------------------------------------------------|     
 644:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |               | voltage range  | voltage range  | voltage range   | voltage range   |
 645:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |               | 2.7 V - 3.6 V  | 2.4 V - 2.7 V  | 2.1 V - 2.4 V   | 1.8 V - 2.1 V   |
 646:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|           
 647:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |0WS(1CPU cycle)|0 < HCLK <= 30  |0 < HCLK <= 24  |0 < HCLK <= 18   |0 < HCLK <= 16   |
 648:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|   
 649:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |1WS(2CPU cycle)|30 < HCLK <= 60 |24 < HCLK <= 48 |18 < HCLK <= 36  |16 < HCLK <= 32  | 
 650:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|   
 651:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |2WS(3CPU cycle)|60 < HCLK <= 90 |48 < HCLK <= 72 |36 < HCLK <= 54  |32 < HCLK <= 48  |
 652:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------| 
 653:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |3WS(4CPU cycle)|90 < HCLK <= 120|72 < HCLK <= 96 |54 < HCLK <= 72  |48 < HCLK <= 64  |
 654:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------| 
 655:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |4WS(5CPU cycle)|      NA        |96 < HCLK <= 120|72 < HCLK <= 90  |64 < HCLK <= 80  |
 656:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------| 
 657:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |5WS(6CPU cycle)|      NA        |      NA        |90 < HCLK <= 108 |80 < HCLK <= 96  | 
 658:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------| 
 659:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |6WS(7CPU cycle)|      NA        |      NA        |108 < HCLK <= 120|96 < HCLK <= 112 | 
 660:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------| 
 661:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |7WS(8CPU cycle)|      NA        |     NA         |     NA          |112 < HCLK <= 120| 
 662:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  +-------------------------------------------------------------------------------------+    
 663:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 664:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 665:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** @endverbatim
 666:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @{
 667:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 668:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 669:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 670:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Configures the system clock (SYSCLK).
 671:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   The HSI is used (enabled by hardware) as system clock source after
 672:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         startup from Reset, wake-up from STOP and STANDBY mode, or in case
 673:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         of failure of the HSE used directly or indirectly as system clock
 674:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         (if the Clock Security System CSS is enabled).
 675:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   A switch from one clock source to another occurs only if the target
 676:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         clock source is ready (clock stable after startup delay or PLL locked). 
 677:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         If a clock source which is not yet ready is selected, the switch will
 678:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         occur when the clock source will be ready. 
 679:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         You can use RCC_GetSYSCLKSource() function to know which clock is
 680:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         currently used as system clock source. 
 681:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_SYSCLKSource: specifies the clock source used as system clock.
 682:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 683:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLKSource_HSI:    HSI selected as system clock source
 684:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLKSource_HSE:    HSE selected as system clock source
 685:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock source
 686:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 687:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 688:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
 689:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 798              		.loc 1 689 0
 799              		.cfi_startproc
 800              		@ args = 0, pretend = 0, frame = 16
 801              		@ frame_needed = 1, uses_anonymous_args = 0
 802              		@ link register save eliminated.
 803 0000 80B4     		push	{r7}
 804              	.LCFI41:
 805              		.cfi_def_cfa_offset 4
 806              		.cfi_offset 7, -4
 807 0002 85B0     		sub	sp, sp, #20
 808              	.LCFI42:
 809              		.cfi_def_cfa_offset 24
 810 0004 00AF     		add	r7, sp, #0
 811              	.LCFI43:
 812              		.cfi_def_cfa_register 7
 813 0006 7860     		str	r0, [r7, #4]
 690:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 814              		.loc 1 690 0
 815 0008 0023     		movs	r3, #0
 816 000a FB60     		str	r3, [r7, #12]
 691:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 692:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 693:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
 694:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 695:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg = RCC->CFGR;
 817              		.loc 1 695 0
 818 000c 094B     		ldr	r3, .L51
 819 000e 9B68     		ldr	r3, [r3, #8]
 820 0010 FB60     		str	r3, [r7, #12]
 696:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 697:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Clear SW[1:0] bits */
 698:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg &= ~RCC_CFGR_SW;
 821              		.loc 1 698 0
 822 0012 FB68     		ldr	r3, [r7, #12]
 823 0014 23F00303 		bic	r3, r3, #3
 824 0018 FB60     		str	r3, [r7, #12]
 699:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 700:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
 701:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg |= RCC_SYSCLKSource;
 825              		.loc 1 701 0
 826 001a FA68     		ldr	r2, [r7, #12]
 827 001c 7B68     		ldr	r3, [r7, #4]
 828 001e 1343     		orrs	r3, r3, r2
 829 0020 FB60     		str	r3, [r7, #12]
 702:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 703:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Store the new value */
 704:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->CFGR = tmpreg;
 830              		.loc 1 704 0
 831 0022 044B     		ldr	r3, .L51
 832 0024 FA68     		ldr	r2, [r7, #12]
 833 0026 9A60     		str	r2, [r3, #8]
 705:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 834              		.loc 1 705 0
 835 0028 1437     		adds	r7, r7, #20
 836 002a BD46     		mov	sp, r7
 837              		@ sp needed
 838 002c 5DF8047B 		ldr	r7, [sp], #4
 839 0030 7047     		bx	lr
 840              	.L52:
 841 0032 00BF     		.align	2
 842              	.L51:
 843 0034 00380240 		.word	1073887232
 844              		.cfi_endproc
 845              	.LFE124:
 847              		.section	.text.RCC_GetSYSCLKSource,"ax",%progbits
 848              		.align	2
 849              		.global	RCC_GetSYSCLKSource
 850              		.thumb
 851              		.thumb_func
 853              	RCC_GetSYSCLKSource:
 854              	.LFB125:
 706:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 707:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 708:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Returns the clock source used as system clock.
 709:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  None
 710:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval The clock source used as system clock. The returned value can be one
 711:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         of the following:
 712:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *              - 0x00: HSI used as system clock
 713:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *              - 0x04: HSE used as system clock
 714:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *              - 0x08: PLL used as system clock
 715:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 716:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** uint8_t RCC_GetSYSCLKSource(void)
 717:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 855              		.loc 1 717 0
 856              		.cfi_startproc
 857              		@ args = 0, pretend = 0, frame = 0
 858              		@ frame_needed = 1, uses_anonymous_args = 0
 859              		@ link register save eliminated.
 860 0000 80B4     		push	{r7}
 861              	.LCFI44:
 862              		.cfi_def_cfa_offset 4
 863              		.cfi_offset 7, -4
 864 0002 00AF     		add	r7, sp, #0
 865              	.LCFI45:
 866              		.cfi_def_cfa_register 7
 718:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   return ((uint8_t)(RCC->CFGR & RCC_CFGR_SWS));
 867              		.loc 1 718 0
 868 0004 054B     		ldr	r3, .L55
 869 0006 9B68     		ldr	r3, [r3, #8]
 870 0008 DBB2     		uxtb	r3, r3
 871 000a 03F00C03 		and	r3, r3, #12
 872 000e DBB2     		uxtb	r3, r3
 719:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 873              		.loc 1 719 0
 874 0010 1846     		mov	r0, r3
 875 0012 BD46     		mov	sp, r7
 876              		@ sp needed
 877 0014 5DF8047B 		ldr	r7, [sp], #4
 878 0018 7047     		bx	lr
 879              	.L56:
 880 001a 00BF     		.align	2
 881              	.L55:
 882 001c 00380240 		.word	1073887232
 883              		.cfi_endproc
 884              	.LFE125:
 886              		.section	.text.RCC_HCLKConfig,"ax",%progbits
 887              		.align	2
 888              		.global	RCC_HCLKConfig
 889              		.thumb
 890              		.thumb_func
 892              	RCC_HCLKConfig:
 893              	.LFB126:
 720:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 721:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 722:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Configures the AHB clock (HCLK).
 723:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   Depending on the device voltage range, the software has to set correctly
 724:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         these bits to ensure that HCLK not exceed the maximum allowed frequency
 725:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         (for more details refer to section above
 726:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *           "CPU, AHB and APB busses clocks configuration functions")
 727:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_SYSCLK: defines the AHB clock divider. This clock is derived from 
 728:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         the system clock (SYSCLK).
 729:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 730:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div1: AHB clock = SYSCLK
 731:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div2: AHB clock = SYSCLK/2
 732:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div4: AHB clock = SYSCLK/4
 733:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div8: AHB clock = SYSCLK/8
 734:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div16: AHB clock = SYSCLK/16
 735:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div64: AHB clock = SYSCLK/64
 736:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div128: AHB clock = SYSCLK/128
 737:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
 738:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
 739:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 740:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 741:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
 742:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 894              		.loc 1 742 0
 895              		.cfi_startproc
 896              		@ args = 0, pretend = 0, frame = 16
 897              		@ frame_needed = 1, uses_anonymous_args = 0
 898              		@ link register save eliminated.
 899 0000 80B4     		push	{r7}
 900              	.LCFI46:
 901              		.cfi_def_cfa_offset 4
 902              		.cfi_offset 7, -4
 903 0002 85B0     		sub	sp, sp, #20
 904              	.LCFI47:
 905              		.cfi_def_cfa_offset 24
 906 0004 00AF     		add	r7, sp, #0
 907              	.LCFI48:
 908              		.cfi_def_cfa_register 7
 909 0006 7860     		str	r0, [r7, #4]
 743:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 910              		.loc 1 743 0
 911 0008 0023     		movs	r3, #0
 912 000a FB60     		str	r3, [r7, #12]
 744:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   
 745:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 746:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_HCLK(RCC_SYSCLK));
 747:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 748:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg = RCC->CFGR;
 913              		.loc 1 748 0
 914 000c 094B     		ldr	r3, .L58
 915 000e 9B68     		ldr	r3, [r3, #8]
 916 0010 FB60     		str	r3, [r7, #12]
 749:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 750:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Clear HPRE[3:0] bits */
 751:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg &= ~RCC_CFGR_HPRE;
 917              		.loc 1 751 0
 918 0012 FB68     		ldr	r3, [r7, #12]
 919 0014 23F0F003 		bic	r3, r3, #240
 920 0018 FB60     		str	r3, [r7, #12]
 752:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 753:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
 754:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg |= RCC_SYSCLK;
 921              		.loc 1 754 0
 922 001a FA68     		ldr	r2, [r7, #12]
 923 001c 7B68     		ldr	r3, [r7, #4]
 924 001e 1343     		orrs	r3, r3, r2
 925 0020 FB60     		str	r3, [r7, #12]
 755:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 756:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Store the new value */
 757:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->CFGR = tmpreg;
 926              		.loc 1 757 0
 927 0022 044B     		ldr	r3, .L58
 928 0024 FA68     		ldr	r2, [r7, #12]
 929 0026 9A60     		str	r2, [r3, #8]
 758:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 930              		.loc 1 758 0
 931 0028 1437     		adds	r7, r7, #20
 932 002a BD46     		mov	sp, r7
 933              		@ sp needed
 934 002c 5DF8047B 		ldr	r7, [sp], #4
 935 0030 7047     		bx	lr
 936              	.L59:
 937 0032 00BF     		.align	2
 938              	.L58:
 939 0034 00380240 		.word	1073887232
 940              		.cfi_endproc
 941              	.LFE126:
 943              		.section	.text.RCC_PCLK1Config,"ax",%progbits
 944              		.align	2
 945              		.global	RCC_PCLK1Config
 946              		.thumb
 947              		.thumb_func
 949              	RCC_PCLK1Config:
 950              	.LFB127:
 759:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 760:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 761:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 762:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Configures the Low Speed APB clock (PCLK1).
 763:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_HCLK: defines the APB1 clock divider. This clock is derived from 
 764:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         the AHB clock (HCLK).
 765:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 766:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div1:  APB1 clock = HCLK
 767:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div2:  APB1 clock = HCLK/2
 768:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div4:  APB1 clock = HCLK/4
 769:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div8:  APB1 clock = HCLK/8
 770:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
 771:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 772:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 773:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_PCLK1Config(uint32_t RCC_HCLK)
 774:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 951              		.loc 1 774 0
 952              		.cfi_startproc
 953              		@ args = 0, pretend = 0, frame = 16
 954              		@ frame_needed = 1, uses_anonymous_args = 0
 955              		@ link register save eliminated.
 956 0000 80B4     		push	{r7}
 957              	.LCFI49:
 958              		.cfi_def_cfa_offset 4
 959              		.cfi_offset 7, -4
 960 0002 85B0     		sub	sp, sp, #20
 961              	.LCFI50:
 962              		.cfi_def_cfa_offset 24
 963 0004 00AF     		add	r7, sp, #0
 964              	.LCFI51:
 965              		.cfi_def_cfa_register 7
 966 0006 7860     		str	r0, [r7, #4]
 775:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 967              		.loc 1 775 0
 968 0008 0023     		movs	r3, #0
 969 000a FB60     		str	r3, [r7, #12]
 776:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 777:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 778:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PCLK(RCC_HCLK));
 779:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 780:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg = RCC->CFGR;
 970              		.loc 1 780 0
 971 000c 094B     		ldr	r3, .L61
 972 000e 9B68     		ldr	r3, [r3, #8]
 973 0010 FB60     		str	r3, [r7, #12]
 781:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 782:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Clear PPRE1[2:0] bits */
 783:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg &= ~RCC_CFGR_PPRE1;
 974              		.loc 1 783 0
 975 0012 FB68     		ldr	r3, [r7, #12]
 976 0014 23F4E053 		bic	r3, r3, #7168
 977 0018 FB60     		str	r3, [r7, #12]
 784:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 785:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Set PPRE1[2:0] bits according to RCC_HCLK value */
 786:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg |= RCC_HCLK;
 978              		.loc 1 786 0
 979 001a FA68     		ldr	r2, [r7, #12]
 980 001c 7B68     		ldr	r3, [r7, #4]
 981 001e 1343     		orrs	r3, r3, r2
 982 0020 FB60     		str	r3, [r7, #12]
 787:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 788:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Store the new value */
 789:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->CFGR = tmpreg;
 983              		.loc 1 789 0
 984 0022 044B     		ldr	r3, .L61
 985 0024 FA68     		ldr	r2, [r7, #12]
 986 0026 9A60     		str	r2, [r3, #8]
 790:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 987              		.loc 1 790 0
 988 0028 1437     		adds	r7, r7, #20
 989 002a BD46     		mov	sp, r7
 990              		@ sp needed
 991 002c 5DF8047B 		ldr	r7, [sp], #4
 992 0030 7047     		bx	lr
 993              	.L62:
 994 0032 00BF     		.align	2
 995              	.L61:
 996 0034 00380240 		.word	1073887232
 997              		.cfi_endproc
 998              	.LFE127:
 1000              		.section	.text.RCC_PCLK2Config,"ax",%progbits
 1001              		.align	2
 1002              		.global	RCC_PCLK2Config
 1003              		.thumb
 1004              		.thumb_func
 1006              	RCC_PCLK2Config:
 1007              	.LFB128:
 791:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 792:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 793:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Configures the High Speed APB clock (PCLK2).
 794:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_HCLK: defines the APB2 clock divider. This clock is derived from 
 795:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         the AHB clock (HCLK).
 796:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 797:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div1:  APB2 clock = HCLK
 798:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div2:  APB2 clock = HCLK/2
 799:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div4:  APB2 clock = HCLK/4
 800:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div8:  APB2 clock = HCLK/8
 801:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
 802:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 803:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 804:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_PCLK2Config(uint32_t RCC_HCLK)
 805:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 1008              		.loc 1 805 0
 1009              		.cfi_startproc
 1010              		@ args = 0, pretend = 0, frame = 16
 1011              		@ frame_needed = 1, uses_anonymous_args = 0
 1012              		@ link register save eliminated.
 1013 0000 80B4     		push	{r7}
 1014              	.LCFI52:
 1015              		.cfi_def_cfa_offset 4
 1016              		.cfi_offset 7, -4
 1017 0002 85B0     		sub	sp, sp, #20
 1018              	.LCFI53:
 1019              		.cfi_def_cfa_offset 24
 1020 0004 00AF     		add	r7, sp, #0
 1021              	.LCFI54:
 1022              		.cfi_def_cfa_register 7
 1023 0006 7860     		str	r0, [r7, #4]
 806:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 1024              		.loc 1 806 0
 1025 0008 0023     		movs	r3, #0
 1026 000a FB60     		str	r3, [r7, #12]
 807:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 808:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 809:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PCLK(RCC_HCLK));
 810:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 811:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg = RCC->CFGR;
 1027              		.loc 1 811 0
 1028 000c 094B     		ldr	r3, .L64
 1029 000e 9B68     		ldr	r3, [r3, #8]
 1030 0010 FB60     		str	r3, [r7, #12]
 812:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 813:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Clear PPRE2[2:0] bits */
 814:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg &= ~RCC_CFGR_PPRE2;
 1031              		.loc 1 814 0
 1032 0012 FB68     		ldr	r3, [r7, #12]
 1033 0014 23F46043 		bic	r3, r3, #57344
 1034 0018 FB60     		str	r3, [r7, #12]
 815:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 816:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Set PPRE2[2:0] bits according to RCC_HCLK value */
 817:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg |= RCC_HCLK << 3;
 1035              		.loc 1 817 0
 1036 001a 7B68     		ldr	r3, [r7, #4]
 1037 001c DB00     		lsls	r3, r3, #3
 1038 001e FA68     		ldr	r2, [r7, #12]
 1039 0020 1343     		orrs	r3, r3, r2
 1040 0022 FB60     		str	r3, [r7, #12]
 818:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 819:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Store the new value */
 820:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->CFGR = tmpreg;
 1041              		.loc 1 820 0
 1042 0024 034B     		ldr	r3, .L64
 1043 0026 FA68     		ldr	r2, [r7, #12]
 1044 0028 9A60     		str	r2, [r3, #8]
 821:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 1045              		.loc 1 821 0
 1046 002a 1437     		adds	r7, r7, #20
 1047 002c BD46     		mov	sp, r7
 1048              		@ sp needed
 1049 002e 5DF8047B 		ldr	r7, [sp], #4
 1050 0032 7047     		bx	lr
 1051              	.L65:
 1052              		.align	2
 1053              	.L64:
 1054 0034 00380240 		.word	1073887232
 1055              		.cfi_endproc
 1056              	.LFE128:
 1058              		.section	.text.RCC_GetClocksFreq,"ax",%progbits
 1059              		.align	2
 1060              		.global	RCC_GetClocksFreq
 1061              		.thumb
 1062              		.thumb_func
 1064              	RCC_GetClocksFreq:
 1065              	.LFB129:
 822:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 823:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 824:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Returns the frequencies of different on chip clocks; SYSCLK, HCLK, 
 825:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         PCLK1 and PCLK2.       
 826:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * 
 827:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   The system frequency computed by this function is not the real 
 828:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         frequency in the chip. It is calculated based on the predefined 
 829:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         constant and the selected clock source:
 830:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note     If SYSCLK source is HSI, function returns values based on HSI_VALUE(*)
 831:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note     If SYSCLK source is HSE, function returns values based on HSE_VALUE(**)
 832:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note     If SYSCLK source is PLL, function returns values based on HSE_VALUE(**) 
 833:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *           or HSI_VALUE(*) multiplied/divided by the PLL factors.         
 834:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note     (*) HSI_VALUE is a constant defined in stm32f4xx.h file (default value
 835:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *               16 MHz) but the real value may vary depending on the variations
 836:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *               in voltage and temperature.
 837:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note     (**) HSE_VALUE is a constant defined in stm32f4xx.h file (default value
 838:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *                25 MHz), user has to ensure that HSE_VALUE is same as the real
 839:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *                frequency of the crystal used. Otherwise, this function may
 840:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *                have wrong result.
 841:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *                
 842:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   The result of this function could be not correct when using fractional
 843:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         value for HSE crystal.
 844:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *   
 845:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_Clocks: pointer to a RCC_ClocksTypeDef structure which will hold
 846:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          the clocks frequencies.
 847:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *     
 848:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   This function can be used by the user application to compute the 
 849:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         baudrate for the communication peripherals or configure other parameters.
 850:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   Each time SYSCLK, HCLK, PCLK1 and/or PCLK2 clock changes, this function
 851:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         must be called to update the structure's field. Otherwise, any
 852:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         configuration based on this function will be incorrect.
 853:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *    
 854:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 855:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 856:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
 857:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 1066              		.loc 1 857 0
 1067              		.cfi_startproc
 1068              		@ args = 0, pretend = 0, frame = 32
 1069              		@ frame_needed = 1, uses_anonymous_args = 0
 1070              		@ link register save eliminated.
 1071 0000 80B4     		push	{r7}
 1072              	.LCFI55:
 1073              		.cfi_def_cfa_offset 4
 1074              		.cfi_offset 7, -4
 1075 0002 89B0     		sub	sp, sp, #36
 1076              	.LCFI56:
 1077              		.cfi_def_cfa_offset 40
 1078 0004 00AF     		add	r7, sp, #0
 1079              	.LCFI57:
 1080              		.cfi_def_cfa_register 7
 1081 0006 7860     		str	r0, [r7, #4]
 858:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 1082              		.loc 1 858 0
 1083 0008 0023     		movs	r3, #0
 1084 000a BB61     		str	r3, [r7, #24]
 1085 000c 0023     		movs	r3, #0
 1086 000e 7B61     		str	r3, [r7, #20]
 1087 0010 0023     		movs	r3, #0
 1088 0012 FB61     		str	r3, [r7, #28]
 1089 0014 0223     		movs	r3, #2
 1090 0016 3B61     		str	r3, [r7, #16]
 1091 0018 0023     		movs	r3, #0
 1092 001a FB60     		str	r3, [r7, #12]
 1093 001c 0223     		movs	r3, #2
 1094 001e BB60     		str	r3, [r7, #8]
 859:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 860:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Get SYSCLK source -------------------------------------------------------*/
 861:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmp = RCC->CFGR & RCC_CFGR_SWS;
 1095              		.loc 1 861 0
 1096 0020 484B     		ldr	r3, .L75
 1097 0022 9B68     		ldr	r3, [r3, #8]
 1098 0024 03F00C03 		and	r3, r3, #12
 1099 0028 BB61     		str	r3, [r7, #24]
 862:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 863:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   switch (tmp)
 1100              		.loc 1 863 0
 1101 002a BB69     		ldr	r3, [r7, #24]
 1102 002c 042B     		cmp	r3, #4
 1103 002e 07D0     		beq	.L68
 1104 0030 082B     		cmp	r3, #8
 1105 0032 09D0     		beq	.L69
 1106 0034 002B     		cmp	r3, #0
 1107 0036 3FD1     		bne	.L74
 864:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
 865:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     case 0x00:  /* HSI used as system clock source */
 866:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 1108              		.loc 1 866 0
 1109 0038 7B68     		ldr	r3, [r7, #4]
 1110 003a 434A     		ldr	r2, .L75+4
 1111 003c 1A60     		str	r2, [r3]
 867:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       break;
 1112              		.loc 1 867 0
 1113 003e 3FE0     		b	.L71
 1114              	.L68:
 868:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     case 0x04:  /* HSE used as system clock  source */
 869:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 1115              		.loc 1 869 0
 1116 0040 7B68     		ldr	r3, [r7, #4]
 1117 0042 424A     		ldr	r2, .L75+8
 1118 0044 1A60     		str	r2, [r3]
 870:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       break;
 1119              		.loc 1 870 0
 1120 0046 3BE0     		b	.L71
 1121              	.L69:
 871:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     case 0x08:  /* PLL used as system clock  source */
 872:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 873:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
 874:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****          SYSCLK = PLL_VCO / PLLP
 875:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****          */    
 876:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 1122              		.loc 1 876 0
 1123 0048 3E4B     		ldr	r3, .L75
 1124 004a 5B68     		ldr	r3, [r3, #4]
 1125 004c 03F48003 		and	r3, r3, #4194304
 1126 0050 9B0D     		lsrs	r3, r3, #22
 1127 0052 FB60     		str	r3, [r7, #12]
 877:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 1128              		.loc 1 877 0
 1129 0054 3B4B     		ldr	r3, .L75
 1130 0056 5B68     		ldr	r3, [r3, #4]
 1131 0058 03F03F03 		and	r3, r3, #63
 1132 005c BB60     		str	r3, [r7, #8]
 878:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       
 879:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       if (pllsource != 0)
 1133              		.loc 1 879 0
 1134 005e FB68     		ldr	r3, [r7, #12]
 1135 0060 002B     		cmp	r3, #0
 1136 0062 0DD0     		beq	.L72
 880:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       {
 881:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****         /* HSE used as PLL clock source */
 882:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****         pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 1137              		.loc 1 882 0
 1138 0064 394A     		ldr	r2, .L75+8
 1139 0066 BB68     		ldr	r3, [r7, #8]
 1140 0068 B2FBF3F2 		udiv	r2, r2, r3
 1141 006c 354B     		ldr	r3, .L75
 1142 006e 5968     		ldr	r1, [r3, #4]
 1143 0070 47F6C073 		movw	r3, #32704
 1144 0074 0B40     		ands	r3, r3, r1
 1145 0076 9B09     		lsrs	r3, r3, #6
 1146 0078 03FB02F3 		mul	r3, r3, r2
 1147 007c FB61     		str	r3, [r7, #28]
 1148 007e 0CE0     		b	.L73
 1149              	.L72:
 883:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       }
 884:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       else
 885:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       {
 886:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****         /* HSI used as PLL clock source */
 887:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****         pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 1150              		.loc 1 887 0
 1151 0080 314A     		ldr	r2, .L75+4
 1152 0082 BB68     		ldr	r3, [r7, #8]
 1153 0084 B2FBF3F2 		udiv	r2, r2, r3
 1154 0088 2E4B     		ldr	r3, .L75
 1155 008a 5968     		ldr	r1, [r3, #4]
 1156 008c 47F6C073 		movw	r3, #32704
 1157 0090 0B40     		ands	r3, r3, r1
 1158 0092 9B09     		lsrs	r3, r3, #6
 1159 0094 03FB02F3 		mul	r3, r3, r2
 1160 0098 FB61     		str	r3, [r7, #28]
 1161              	.L73:
 888:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       }
 889:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 890:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 1162              		.loc 1 890 0
 1163 009a 2A4B     		ldr	r3, .L75
 1164 009c 5B68     		ldr	r3, [r3, #4]
 1165 009e 03F44033 		and	r3, r3, #196608
 1166 00a2 1B0C     		lsrs	r3, r3, #16
 1167 00a4 0133     		adds	r3, r3, #1
 1168 00a6 5B00     		lsls	r3, r3, #1
 1169 00a8 3B61     		str	r3, [r7, #16]
 891:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 1170              		.loc 1 891 0
 1171 00aa FA69     		ldr	r2, [r7, #28]
 1172 00ac 3B69     		ldr	r3, [r7, #16]
 1173 00ae B2FBF3F2 		udiv	r2, r2, r3
 1174 00b2 7B68     		ldr	r3, [r7, #4]
 1175 00b4 1A60     		str	r2, [r3]
 892:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       break;
 1176              		.loc 1 892 0
 1177 00b6 03E0     		b	.L71
 1178              	.L74:
 893:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     default:
 894:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 1179              		.loc 1 894 0
 1180 00b8 7B68     		ldr	r3, [r7, #4]
 1181 00ba 234A     		ldr	r2, .L75+4
 1182 00bc 1A60     		str	r2, [r3]
 895:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       break;
 1183              		.loc 1 895 0
 1184 00be 00BF     		nop
 1185              	.L71:
 896:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
 897:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/
 898:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 899:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Get HCLK prescaler */
 900:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmp = RCC->CFGR & RCC_CFGR_HPRE;
 1186              		.loc 1 900 0
 1187 00c0 204B     		ldr	r3, .L75
 1188 00c2 9B68     		ldr	r3, [r3, #8]
 1189 00c4 03F0F003 		and	r3, r3, #240
 1190 00c8 BB61     		str	r3, [r7, #24]
 901:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmp = tmp >> 4;
 1191              		.loc 1 901 0
 1192 00ca BB69     		ldr	r3, [r7, #24]
 1193 00cc 1B09     		lsrs	r3, r3, #4
 1194 00ce BB61     		str	r3, [r7, #24]
 902:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   presc = APBAHBPrescTable[tmp];
 1195              		.loc 1 902 0
 1196 00d0 1F4A     		ldr	r2, .L75+12
 1197 00d2 BB69     		ldr	r3, [r7, #24]
 1198 00d4 1344     		add	r3, r3, r2
 1199 00d6 1B78     		ldrb	r3, [r3]
 1200 00d8 DBB2     		uxtb	r3, r3
 1201 00da 7B61     		str	r3, [r7, #20]
 903:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* HCLK clock frequency */
 904:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 1202              		.loc 1 904 0
 1203 00dc 7B68     		ldr	r3, [r7, #4]
 1204 00de 1A68     		ldr	r2, [r3]
 1205 00e0 7B69     		ldr	r3, [r7, #20]
 1206 00e2 DA40     		lsrs	r2, r2, r3
 1207 00e4 7B68     		ldr	r3, [r7, #4]
 1208 00e6 5A60     		str	r2, [r3, #4]
 905:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 906:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Get PCLK1 prescaler */
 907:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 1209              		.loc 1 907 0
 1210 00e8 164B     		ldr	r3, .L75
 1211 00ea 9B68     		ldr	r3, [r3, #8]
 1212 00ec 03F4E053 		and	r3, r3, #7168
 1213 00f0 BB61     		str	r3, [r7, #24]
 908:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmp = tmp >> 10;
 1214              		.loc 1 908 0
 1215 00f2 BB69     		ldr	r3, [r7, #24]
 1216 00f4 9B0A     		lsrs	r3, r3, #10
 1217 00f6 BB61     		str	r3, [r7, #24]
 909:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   presc = APBAHBPrescTable[tmp];
 1218              		.loc 1 909 0
 1219 00f8 154A     		ldr	r2, .L75+12
 1220 00fa BB69     		ldr	r3, [r7, #24]
 1221 00fc 1344     		add	r3, r3, r2
 1222 00fe 1B78     		ldrb	r3, [r3]
 1223 0100 DBB2     		uxtb	r3, r3
 1224 0102 7B61     		str	r3, [r7, #20]
 910:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* PCLK1 clock frequency */
 911:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 1225              		.loc 1 911 0
 1226 0104 7B68     		ldr	r3, [r7, #4]
 1227 0106 5A68     		ldr	r2, [r3, #4]
 1228 0108 7B69     		ldr	r3, [r7, #20]
 1229 010a DA40     		lsrs	r2, r2, r3
 1230 010c 7B68     		ldr	r3, [r7, #4]
 1231 010e 9A60     		str	r2, [r3, #8]
 912:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 913:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Get PCLK2 prescaler */
 914:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 1232              		.loc 1 914 0
 1233 0110 0C4B     		ldr	r3, .L75
 1234 0112 9B68     		ldr	r3, [r3, #8]
 1235 0114 03F46043 		and	r3, r3, #57344
 1236 0118 BB61     		str	r3, [r7, #24]
 915:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmp = tmp >> 13;
 1237              		.loc 1 915 0
 1238 011a BB69     		ldr	r3, [r7, #24]
 1239 011c 5B0B     		lsrs	r3, r3, #13
 1240 011e BB61     		str	r3, [r7, #24]
 916:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   presc = APBAHBPrescTable[tmp];
 1241              		.loc 1 916 0
 1242 0120 0B4A     		ldr	r2, .L75+12
 1243 0122 BB69     		ldr	r3, [r7, #24]
 1244 0124 1344     		add	r3, r3, r2
 1245 0126 1B78     		ldrb	r3, [r3]
 1246 0128 DBB2     		uxtb	r3, r3
 1247 012a 7B61     		str	r3, [r7, #20]
 917:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* PCLK2 clock frequency */
 918:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 1248              		.loc 1 918 0
 1249 012c 7B68     		ldr	r3, [r7, #4]
 1250 012e 5A68     		ldr	r2, [r3, #4]
 1251 0130 7B69     		ldr	r3, [r7, #20]
 1252 0132 DA40     		lsrs	r2, r2, r3
 1253 0134 7B68     		ldr	r3, [r7, #4]
 1254 0136 DA60     		str	r2, [r3, #12]
 919:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 1255              		.loc 1 919 0
 1256 0138 2437     		adds	r7, r7, #36
 1257 013a BD46     		mov	sp, r7
 1258              		@ sp needed
 1259 013c 5DF8047B 		ldr	r7, [sp], #4
 1260 0140 7047     		bx	lr
 1261              	.L76:
 1262 0142 00BF     		.align	2
 1263              	.L75:
 1264 0144 00380240 		.word	1073887232
 1265 0148 0024F400 		.word	16000000
 1266 014c 00127A00 		.word	8000000
 1267 0150 00000000 		.word	APBAHBPrescTable
 1268              		.cfi_endproc
 1269              	.LFE129:
 1271              		.section	.text.RCC_RTCCLKConfig,"ax",%progbits
 1272              		.align	2
 1273              		.global	RCC_RTCCLKConfig
 1274              		.thumb
 1275              		.thumb_func
 1277              	RCC_RTCCLKConfig:
 1278              	.LFB130:
 920:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 921:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 922:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @}
 923:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 924:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 925:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /** @defgroup RCC_Group3 Peripheral clocks configuration functions
 926:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  *  @brief   Peripheral clocks configuration functions 
 927:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  *
 928:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** @verbatim   
 929:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  ===============================================================================
 930:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****                    Peripheral clocks configuration functions
 931:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  ===============================================================================  
 932:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 933:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   This section provide functions allowing to configure the Peripheral clocks. 
 934:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   
 935:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   1. The RTC clock which is derived from the LSI, LSE or HSE clock divided by 2 to 31.
 936:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      
 937:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   2. After restart from Reset or wakeup from STANDBY, all peripherals are off
 938:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      except internal SRAM, Flash and JTAG. Before to start using a peripheral you
 939:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      have to enable its interface clock. You can do this using RCC_AHBPeriphClockCmd()
 940:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      , RCC_APB2PeriphClockCmd() and RCC_APB1PeriphClockCmd() functions.
 941:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 942:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   3. To reset the peripherals configuration (to the default state after device reset)
 943:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      you can use RCC_AHBPeriphResetCmd(), RCC_APB2PeriphResetCmd() and 
 944:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      RCC_APB1PeriphResetCmd() functions.
 945:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      
 946:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   4. To further reduce power consumption in SLEEP mode the peripheral clocks can
 947:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      be disabled prior to executing the WFI or WFE instructions. You can do this
 948:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      using RCC_AHBPeriphClockLPModeCmd(), RCC_APB2PeriphClockLPModeCmd() and
 949:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      RCC_APB1PeriphClockLPModeCmd() functions.  
 950:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 951:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** @endverbatim
 952:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @{
 953:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 954:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 955:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 956:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Configures the RTC clock (RTCCLK).
 957:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   As the RTC clock configuration bits are in the Backup domain and write
 958:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         access is denied to this domain after reset, you have to enable write
 959:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         access using PWR_BackupAccessCmd(ENABLE) function before to configure
 960:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         the RTC clock source (to be done once after reset).    
 961:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   Once the RTC clock is configured it can't be changed unless the  
 962:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         Backup domain is reset using RCC_BackupResetCmd() function, or by
 963:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         a Power On Reset (POR).
 964:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *    
 965:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_RTCCLKSource: specifies the RTC clock source.
 966:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 967:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_RTCCLKSource_LSE: LSE selected as RTC clock
 968:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_RTCCLKSource_LSI: LSI selected as RTC clock
 969:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_RTCCLKSource_HSE_Divx: HSE clock divided by x selected
 970:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *                                            as RTC clock, where x:[2,31]
 971:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *  
 972:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   If the LSE or LSI is used as RTC clock source, the RTC continues to
 973:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         work in STOP and STANDBY modes, and can be used as wakeup source.
 974:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         However, when the HSE clock is used as RTC clock source, the RTC
 975:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         cannot be used in STOP and STANDBY modes.    
 976:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   The maximum input clock frequency for RTC is 1MHz (when using HSE as
 977:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         RTC clock source).
 978:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *  
 979:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 980:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 981:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
 982:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 1279              		.loc 1 982 0
 1280              		.cfi_startproc
 1281              		@ args = 0, pretend = 0, frame = 16
 1282              		@ frame_needed = 1, uses_anonymous_args = 0
 1283              		@ link register save eliminated.
 1284 0000 80B4     		push	{r7}
 1285              	.LCFI58:
 1286              		.cfi_def_cfa_offset 4
 1287              		.cfi_offset 7, -4
 1288 0002 85B0     		sub	sp, sp, #20
 1289              	.LCFI59:
 1290              		.cfi_def_cfa_offset 24
 1291 0004 00AF     		add	r7, sp, #0
 1292              	.LCFI60:
 1293              		.cfi_def_cfa_register 7
 1294 0006 7860     		str	r0, [r7, #4]
 983:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 1295              		.loc 1 983 0
 1296 0008 0023     		movs	r3, #0
 1297 000a FB60     		str	r3, [r7, #12]
 984:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 985:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 986:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));
 987:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 988:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
 1298              		.loc 1 988 0
 1299 000c 7B68     		ldr	r3, [r7, #4]
 1300 000e 03F44073 		and	r3, r3, #768
 1301 0012 B3F5407F 		cmp	r3, #768
 1302 0016 11D1     		bne	.L78
 989:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
 990:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     tmpreg = RCC->CFGR;
 1303              		.loc 1 990 0
 1304 0018 0F4B     		ldr	r3, .L79
 1305 001a 9B68     		ldr	r3, [r3, #8]
 1306 001c FB60     		str	r3, [r7, #12]
 991:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 992:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     /* Clear RTCPRE[4:0] bits */
 993:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     tmpreg &= ~RCC_CFGR_RTCPRE;
 1307              		.loc 1 993 0
 1308 001e FB68     		ldr	r3, [r7, #12]
 1309 0020 23F4F813 		bic	r3, r3, #2031616
 1310 0024 FB60     		str	r3, [r7, #12]
 994:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 995:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     /* Configure HSE division factor for RTC clock */
 996:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
 1311              		.loc 1 996 0
 1312 0026 7B68     		ldr	r3, [r7, #4]
 1313 0028 23F07043 		bic	r3, r3, #-268435456
 1314 002c 23F44073 		bic	r3, r3, #768
 1315 0030 FA68     		ldr	r2, [r7, #12]
 1316 0032 1343     		orrs	r3, r3, r2
 1317 0034 FB60     		str	r3, [r7, #12]
 997:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 998:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     /* Store the new value */
 999:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->CFGR = tmpreg;
 1318              		.loc 1 999 0
 1319 0036 084B     		ldr	r3, .L79
 1320 0038 FA68     		ldr	r2, [r7, #12]
 1321 003a 9A60     		str	r2, [r3, #8]
 1322              	.L78:
1000:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1001:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     
1002:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Select the RTC clock source */
1003:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->BDCR |= (RCC_RTCCLKSource & 0x00000FFF);
 1323              		.loc 1 1003 0
 1324 003c 064B     		ldr	r3, .L79
 1325 003e 064A     		ldr	r2, .L79
 1326 0040 116F     		ldr	r1, [r2, #112]
 1327 0042 7A68     		ldr	r2, [r7, #4]
 1328 0044 C2F30B02 		ubfx	r2, r2, #0, #12
 1329 0048 0A43     		orrs	r2, r2, r1
 1330 004a 1A67     		str	r2, [r3, #112]
1004:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 1331              		.loc 1 1004 0
 1332 004c 1437     		adds	r7, r7, #20
 1333 004e BD46     		mov	sp, r7
 1334              		@ sp needed
 1335 0050 5DF8047B 		ldr	r7, [sp], #4
 1336 0054 7047     		bx	lr
 1337              	.L80:
 1338 0056 00BF     		.align	2
 1339              	.L79:
 1340 0058 00380240 		.word	1073887232
 1341              		.cfi_endproc
 1342              	.LFE130:
 1344              		.section	.text.RCC_RTCCLKCmd,"ax",%progbits
 1345              		.align	2
 1346              		.global	RCC_RTCCLKCmd
 1347              		.thumb
 1348              		.thumb_func
 1350              	RCC_RTCCLKCmd:
 1351              	.LFB131:
1005:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1006:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1007:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the RTC clock.
1008:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   This function must be used only after the RTC clock source was selected
1009:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         using the RCC_RTCCLKConfig function.
1010:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the RTC clock. This parameter can be: ENABLE or DISABLE.
1011:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1012:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1013:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_RTCCLKCmd(FunctionalState NewState)
1014:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 1352              		.loc 1 1014 0
 1353              		.cfi_startproc
 1354              		@ args = 0, pretend = 0, frame = 8
 1355              		@ frame_needed = 1, uses_anonymous_args = 0
 1356              		@ link register save eliminated.
 1357 0000 80B4     		push	{r7}
 1358              	.LCFI61:
 1359              		.cfi_def_cfa_offset 4
 1360              		.cfi_offset 7, -4
 1361 0002 83B0     		sub	sp, sp, #12
 1362              	.LCFI62:
 1363              		.cfi_def_cfa_offset 16
 1364 0004 00AF     		add	r7, sp, #0
 1365              	.LCFI63:
 1366              		.cfi_def_cfa_register 7
 1367 0006 0346     		mov	r3, r0
 1368 0008 FB71     		strb	r3, [r7, #7]
1015:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1016:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1017:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1018:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
 1369              		.loc 1 1018 0
 1370 000a 044B     		ldr	r3, .L82
 1371 000c FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 1372 000e 1A60     		str	r2, [r3]
1019:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 1373              		.loc 1 1019 0
 1374 0010 0C37     		adds	r7, r7, #12
 1375 0012 BD46     		mov	sp, r7
 1376              		@ sp needed
 1377 0014 5DF8047B 		ldr	r7, [sp], #4
 1378 0018 7047     		bx	lr
 1379              	.L83:
 1380 001a 00BF     		.align	2
 1381              	.L82:
 1382 001c 3C0E4742 		.word	1111952956
 1383              		.cfi_endproc
 1384              	.LFE131:
 1386              		.section	.text.RCC_BackupResetCmd,"ax",%progbits
 1387              		.align	2
 1388              		.global	RCC_BackupResetCmd
 1389              		.thumb
 1390              		.thumb_func
 1392              	RCC_BackupResetCmd:
 1393              	.LFB132:
1020:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1021:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1022:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Forces or releases the Backup domain reset.
1023:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   This function resets the RTC peripheral (including the backup registers)
1024:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         and the RTC clock source selection in RCC_CSR register.
1025:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   The BKPSRAM is not affected by this reset.    
1026:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the Backup domain reset.
1027:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1028:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1029:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1030:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_BackupResetCmd(FunctionalState NewState)
1031:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 1394              		.loc 1 1031 0
 1395              		.cfi_startproc
 1396              		@ args = 0, pretend = 0, frame = 8
 1397              		@ frame_needed = 1, uses_anonymous_args = 0
 1398              		@ link register save eliminated.
 1399 0000 80B4     		push	{r7}
 1400              	.LCFI64:
 1401              		.cfi_def_cfa_offset 4
 1402              		.cfi_offset 7, -4
 1403 0002 83B0     		sub	sp, sp, #12
 1404              	.LCFI65:
 1405              		.cfi_def_cfa_offset 16
 1406 0004 00AF     		add	r7, sp, #0
 1407              	.LCFI66:
 1408              		.cfi_def_cfa_register 7
 1409 0006 0346     		mov	r3, r0
 1410 0008 FB71     		strb	r3, [r7, #7]
1032:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1033:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1034:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
 1411              		.loc 1 1034 0
 1412 000a 044B     		ldr	r3, .L85
 1413 000c FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 1414 000e 1A60     		str	r2, [r3]
1035:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 1415              		.loc 1 1035 0
 1416 0010 0C37     		adds	r7, r7, #12
 1417 0012 BD46     		mov	sp, r7
 1418              		@ sp needed
 1419 0014 5DF8047B 		ldr	r7, [sp], #4
 1420 0018 7047     		bx	lr
 1421              	.L86:
 1422 001a 00BF     		.align	2
 1423              	.L85:
 1424 001c 400E4742 		.word	1111952960
 1425              		.cfi_endproc
 1426              	.LFE132:
 1428              		.section	.text.RCC_I2SCLKConfig,"ax",%progbits
 1429              		.align	2
 1430              		.global	RCC_I2SCLKConfig
 1431              		.thumb
 1432              		.thumb_func
 1434              	RCC_I2SCLKConfig:
 1435              	.LFB133:
1036:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1037:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1038:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Configures the I2S clock source (I2SCLK).
1039:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *
1040:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   This function must be called before enabling the I2S APB clock.
1041:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   This function applies only to Silicon RevisionB and RevisionY.
1042:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *
1043:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_I2SCLKSource: specifies the I2S clock source.
1044:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
1045:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_I2S2CLKSource_PLLI2S: PLLI2S clock used as I2S clock source
1046:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_I2S2CLKSource_Ext: External clock mapped on the I2S_CKIN pin
1047:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *                                        used as I2S clock source
1048:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1049:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1050:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_I2SCLKConfig(uint32_t RCC_I2SCLKSource)
1051:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 1436              		.loc 1 1051 0
 1437              		.cfi_startproc
 1438              		@ args = 0, pretend = 0, frame = 8
 1439              		@ frame_needed = 1, uses_anonymous_args = 0
 1440              		@ link register save eliminated.
 1441 0000 80B4     		push	{r7}
 1442              	.LCFI67:
 1443              		.cfi_def_cfa_offset 4
 1444              		.cfi_offset 7, -4
 1445 0002 83B0     		sub	sp, sp, #12
 1446              	.LCFI68:
 1447              		.cfi_def_cfa_offset 16
 1448 0004 00AF     		add	r7, sp, #0
 1449              	.LCFI69:
 1450              		.cfi_def_cfa_register 7
 1451 0006 7860     		str	r0, [r7, #4]
1052:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1053:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_I2SCLK_SOURCE(RCC_I2SCLKSource));
1054:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1055:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *(__IO uint32_t *) CFGR_I2SSRC_BB = RCC_I2SCLKSource;
 1452              		.loc 1 1055 0
 1453 0008 034B     		ldr	r3, .L88
 1454 000a 7A68     		ldr	r2, [r7, #4]
 1455 000c 1A60     		str	r2, [r3]
1056:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 1456              		.loc 1 1056 0
 1457 000e 0C37     		adds	r7, r7, #12
 1458 0010 BD46     		mov	sp, r7
 1459              		@ sp needed
 1460 0012 5DF8047B 		ldr	r7, [sp], #4
 1461 0016 7047     		bx	lr
 1462              	.L89:
 1463              		.align	2
 1464              	.L88:
 1465 0018 5C014742 		.word	1111949660
 1466              		.cfi_endproc
 1467              	.LFE133:
 1469              		.section	.text.RCC_AHB1PeriphClockCmd,"ax",%progbits
 1470              		.align	2
 1471              		.global	RCC_AHB1PeriphClockCmd
 1472              		.thumb
 1473              		.thumb_func
 1475              	RCC_AHB1PeriphClockCmd:
 1476              	.LFB134:
1057:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1058:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1059:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the AHB1 peripheral clock.
1060:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   After reset, the peripheral clock (used for registers read/write access)
1061:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         is disabled and the application software has to enable this clock before 
1062:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         using it.   
1063:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_AHBPeriph: specifies the AHB1 peripheral to gates its clock.
1064:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
1065:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOA:       GPIOA clock
1066:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOB:       GPIOB clock 
1067:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOC:       GPIOC clock
1068:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOD:       GPIOD clock
1069:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOE:       GPIOE clock
1070:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOF:       GPIOF clock
1071:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOG:       GPIOG clock
1072:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOG:       GPIOG clock
1073:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOI:       GPIOI clock
1074:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_CRC:         CRC clock
1075:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_BKPSRAM:     BKPSRAM interface clock
1076:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_DMA1:        DMA1 clock
1077:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_DMA2:        DMA2 clock
1078:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC:     Ethernet MAC clock
1079:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC_Tx:  Ethernet Transmission clock
1080:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC_Rx:  Ethernet Reception clock
1081:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC_PTP: Ethernet PTP clock
1082:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_OTG_HS:      USB OTG HS clock
1083:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_OTG_HS_ULPI: USB OTG HS ULPI clock
1084:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1085:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1086:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1087:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1088:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
1089:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 1477              		.loc 1 1089 0
 1478              		.cfi_startproc
 1479              		@ args = 0, pretend = 0, frame = 8
 1480              		@ frame_needed = 1, uses_anonymous_args = 0
 1481              		@ link register save eliminated.
 1482 0000 80B4     		push	{r7}
 1483              	.LCFI70:
 1484              		.cfi_def_cfa_offset 4
 1485              		.cfi_offset 7, -4
 1486 0002 83B0     		sub	sp, sp, #12
 1487              	.LCFI71:
 1488              		.cfi_def_cfa_offset 16
 1489 0004 00AF     		add	r7, sp, #0
 1490              	.LCFI72:
 1491              		.cfi_def_cfa_register 7
 1492 0006 7860     		str	r0, [r7, #4]
 1493 0008 0B46     		mov	r3, r1
 1494 000a FB70     		strb	r3, [r7, #3]
1090:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1091:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));
1092:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1093:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1094:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1495              		.loc 1 1094 0
 1496 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1497 000e 002B     		cmp	r3, #0
 1498 0010 06D0     		beq	.L91
1095:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1096:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB1ENR |= RCC_AHB1Periph;
 1499              		.loc 1 1096 0
 1500 0012 094B     		ldr	r3, .L93
 1501 0014 084A     		ldr	r2, .L93
 1502 0016 116B     		ldr	r1, [r2, #48]
 1503 0018 7A68     		ldr	r2, [r7, #4]
 1504 001a 0A43     		orrs	r2, r2, r1
 1505 001c 1A63     		str	r2, [r3, #48]
 1506 001e 06E0     		b	.L90
 1507              	.L91:
1097:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1098:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
1099:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1100:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB1ENR &= ~RCC_AHB1Periph;
 1508              		.loc 1 1100 0
 1509 0020 054B     		ldr	r3, .L93
 1510 0022 054A     		ldr	r2, .L93
 1511 0024 116B     		ldr	r1, [r2, #48]
 1512 0026 7A68     		ldr	r2, [r7, #4]
 1513 0028 D243     		mvns	r2, r2
 1514 002a 0A40     		ands	r2, r2, r1
 1515 002c 1A63     		str	r2, [r3, #48]
 1516              	.L90:
1101:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1102:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 1517              		.loc 1 1102 0
 1518 002e 0C37     		adds	r7, r7, #12
 1519 0030 BD46     		mov	sp, r7
 1520              		@ sp needed
 1521 0032 5DF8047B 		ldr	r7, [sp], #4
 1522 0036 7047     		bx	lr
 1523              	.L94:
 1524              		.align	2
 1525              	.L93:
 1526 0038 00380240 		.word	1073887232
 1527              		.cfi_endproc
 1528              	.LFE134:
 1530              		.section	.text.RCC_AHB2PeriphClockCmd,"ax",%progbits
 1531              		.align	2
 1532              		.global	RCC_AHB2PeriphClockCmd
 1533              		.thumb
 1534              		.thumb_func
 1536              	RCC_AHB2PeriphClockCmd:
 1537              	.LFB135:
1103:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1104:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1105:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the AHB2 peripheral clock.
1106:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   After reset, the peripheral clock (used for registers read/write access)
1107:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         is disabled and the application software has to enable this clock before 
1108:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         using it. 
1109:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_AHBPeriph: specifies the AHB2 peripheral to gates its clock.
1110:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
1111:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_DCMI:   DCMI clock
1112:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_CRYP:   CRYP clock
1113:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_HASH:   HASH clock
1114:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_RNG:    RNG clock
1115:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_OTG_FS: USB OTG FS clock
1116:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1117:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1118:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1119:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1120:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_AHB2PeriphClockCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
1121:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 1538              		.loc 1 1121 0
 1539              		.cfi_startproc
 1540              		@ args = 0, pretend = 0, frame = 8
 1541              		@ frame_needed = 1, uses_anonymous_args = 0
 1542              		@ link register save eliminated.
 1543 0000 80B4     		push	{r7}
 1544              	.LCFI73:
 1545              		.cfi_def_cfa_offset 4
 1546              		.cfi_offset 7, -4
 1547 0002 83B0     		sub	sp, sp, #12
 1548              	.LCFI74:
 1549              		.cfi_def_cfa_offset 16
 1550 0004 00AF     		add	r7, sp, #0
 1551              	.LCFI75:
 1552              		.cfi_def_cfa_register 7
 1553 0006 7860     		str	r0, [r7, #4]
 1554 0008 0B46     		mov	r3, r1
 1555 000a FB70     		strb	r3, [r7, #3]
1122:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1123:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
1124:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1125:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1126:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1556              		.loc 1 1126 0
 1557 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1558 000e 002B     		cmp	r3, #0
 1559 0010 06D0     		beq	.L96
1127:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1128:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB2ENR |= RCC_AHB2Periph;
 1560              		.loc 1 1128 0
 1561 0012 094B     		ldr	r3, .L98
 1562 0014 084A     		ldr	r2, .L98
 1563 0016 516B     		ldr	r1, [r2, #52]
 1564 0018 7A68     		ldr	r2, [r7, #4]
 1565 001a 0A43     		orrs	r2, r2, r1
 1566 001c 5A63     		str	r2, [r3, #52]
 1567 001e 06E0     		b	.L95
 1568              	.L96:
1129:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1130:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
1131:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1132:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB2ENR &= ~RCC_AHB2Periph;
 1569              		.loc 1 1132 0
 1570 0020 054B     		ldr	r3, .L98
 1571 0022 054A     		ldr	r2, .L98
 1572 0024 516B     		ldr	r1, [r2, #52]
 1573 0026 7A68     		ldr	r2, [r7, #4]
 1574 0028 D243     		mvns	r2, r2
 1575 002a 0A40     		ands	r2, r2, r1
 1576 002c 5A63     		str	r2, [r3, #52]
 1577              	.L95:
1133:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1134:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 1578              		.loc 1 1134 0
 1579 002e 0C37     		adds	r7, r7, #12
 1580 0030 BD46     		mov	sp, r7
 1581              		@ sp needed
 1582 0032 5DF8047B 		ldr	r7, [sp], #4
 1583 0036 7047     		bx	lr
 1584              	.L99:
 1585              		.align	2
 1586              	.L98:
 1587 0038 00380240 		.word	1073887232
 1588              		.cfi_endproc
 1589              	.LFE135:
 1591              		.section	.text.RCC_AHB3PeriphClockCmd,"ax",%progbits
 1592              		.align	2
 1593              		.global	RCC_AHB3PeriphClockCmd
 1594              		.thumb
 1595              		.thumb_func
 1597              	RCC_AHB3PeriphClockCmd:
 1598              	.LFB136:
1135:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1136:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1137:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the AHB3 peripheral clock.
1138:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   After reset, the peripheral clock (used for registers read/write access)
1139:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         is disabled and the application software has to enable this clock before 
1140:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         using it. 
1141:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_AHBPeriph: specifies the AHB3 peripheral to gates its clock.
1142:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter must be: RCC_AHB3Periph_FSMC
1143:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1144:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1145:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1146:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1147:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_AHB3PeriphClockCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
1148:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 1599              		.loc 1 1148 0
 1600              		.cfi_startproc
 1601              		@ args = 0, pretend = 0, frame = 8
 1602              		@ frame_needed = 1, uses_anonymous_args = 0
 1603              		@ link register save eliminated.
 1604 0000 80B4     		push	{r7}
 1605              	.LCFI76:
 1606              		.cfi_def_cfa_offset 4
 1607              		.cfi_offset 7, -4
 1608 0002 83B0     		sub	sp, sp, #12
 1609              	.LCFI77:
 1610              		.cfi_def_cfa_offset 16
 1611 0004 00AF     		add	r7, sp, #0
 1612              	.LCFI78:
 1613              		.cfi_def_cfa_register 7
 1614 0006 7860     		str	r0, [r7, #4]
 1615 0008 0B46     		mov	r3, r1
 1616 000a FB70     		strb	r3, [r7, #3]
1149:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1150:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
1151:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1152:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1153:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1617              		.loc 1 1153 0
 1618 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1619 000e 002B     		cmp	r3, #0
 1620 0010 06D0     		beq	.L101
1154:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1155:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB3ENR |= RCC_AHB3Periph;
 1621              		.loc 1 1155 0
 1622 0012 094B     		ldr	r3, .L103
 1623 0014 084A     		ldr	r2, .L103
 1624 0016 916B     		ldr	r1, [r2, #56]
 1625 0018 7A68     		ldr	r2, [r7, #4]
 1626 001a 0A43     		orrs	r2, r2, r1
 1627 001c 9A63     		str	r2, [r3, #56]
 1628 001e 06E0     		b	.L100
 1629              	.L101:
1156:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1157:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
1158:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1159:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB3ENR &= ~RCC_AHB3Periph;
 1630              		.loc 1 1159 0
 1631 0020 054B     		ldr	r3, .L103
 1632 0022 054A     		ldr	r2, .L103
 1633 0024 916B     		ldr	r1, [r2, #56]
 1634 0026 7A68     		ldr	r2, [r7, #4]
 1635 0028 D243     		mvns	r2, r2
 1636 002a 0A40     		ands	r2, r2, r1
 1637 002c 9A63     		str	r2, [r3, #56]
 1638              	.L100:
1160:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1161:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 1639              		.loc 1 1161 0
 1640 002e 0C37     		adds	r7, r7, #12
 1641 0030 BD46     		mov	sp, r7
 1642              		@ sp needed
 1643 0032 5DF8047B 		ldr	r7, [sp], #4
 1644 0036 7047     		bx	lr
 1645              	.L104:
 1646              		.align	2
 1647              	.L103:
 1648 0038 00380240 		.word	1073887232
 1649              		.cfi_endproc
 1650              	.LFE136:
 1652              		.section	.text.RCC_APB1PeriphClockCmd,"ax",%progbits
 1653              		.align	2
 1654              		.global	RCC_APB1PeriphClockCmd
 1655              		.thumb
 1656              		.thumb_func
 1658              	RCC_APB1PeriphClockCmd:
 1659              	.LFB137:
1162:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1163:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1164:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the Low Speed APB (APB1) peripheral clock.
1165:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   After reset, the peripheral clock (used for registers read/write access)
1166:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         is disabled and the application software has to enable this clock before 
1167:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         using it. 
1168:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_APB1Periph: specifies the APB1 peripheral to gates its clock.
1169:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
1170:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM2:   TIM2 clock
1171:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM3:   TIM3 clock
1172:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM4:   TIM4 clock
1173:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM5:   TIM5 clock
1174:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM6:   TIM6 clock
1175:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM7:   TIM7 clock
1176:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM12:  TIM12 clock
1177:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM13:  TIM13 clock
1178:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM14:  TIM14 clock
1179:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_WWDG:   WWDG clock
1180:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_SPI2:   SPI2 clock
1181:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_SPI3:   SPI3 clock
1182:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_USART2: USART2 clock
1183:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_USART3: USART3 clock
1184:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART4:  UART4 clock
1185:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART5:  UART5 clock
1186:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C1:   I2C1 clock
1187:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C2:   I2C2 clock
1188:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C3:   I2C3 clock
1189:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_CAN1:   CAN1 clock
1190:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_CAN2:   CAN2 clock
1191:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_PWR:    PWR clock
1192:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_DAC:    DAC clock
1193:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1194:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1195:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1196:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1197:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
1198:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 1660              		.loc 1 1198 0
 1661              		.cfi_startproc
 1662              		@ args = 0, pretend = 0, frame = 8
 1663              		@ frame_needed = 1, uses_anonymous_args = 0
 1664              		@ link register save eliminated.
 1665 0000 80B4     		push	{r7}
 1666              	.LCFI79:
 1667              		.cfi_def_cfa_offset 4
 1668              		.cfi_offset 7, -4
 1669 0002 83B0     		sub	sp, sp, #12
 1670              	.LCFI80:
 1671              		.cfi_def_cfa_offset 16
 1672 0004 00AF     		add	r7, sp, #0
 1673              	.LCFI81:
 1674              		.cfi_def_cfa_register 7
 1675 0006 7860     		str	r0, [r7, #4]
 1676 0008 0B46     		mov	r3, r1
 1677 000a FB70     		strb	r3, [r7, #3]
1199:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1200:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
1201:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1202:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1203:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1678              		.loc 1 1203 0
 1679 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1680 000e 002B     		cmp	r3, #0
 1681 0010 06D0     		beq	.L106
1204:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1205:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->APB1ENR |= RCC_APB1Periph;
 1682              		.loc 1 1205 0
 1683 0012 094B     		ldr	r3, .L108
 1684 0014 084A     		ldr	r2, .L108
 1685 0016 116C     		ldr	r1, [r2, #64]
 1686 0018 7A68     		ldr	r2, [r7, #4]
 1687 001a 0A43     		orrs	r2, r2, r1
 1688 001c 1A64     		str	r2, [r3, #64]
 1689 001e 06E0     		b	.L105
 1690              	.L106:
1206:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1207:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
1208:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1209:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->APB1ENR &= ~RCC_APB1Periph;
 1691              		.loc 1 1209 0
 1692 0020 054B     		ldr	r3, .L108
 1693 0022 054A     		ldr	r2, .L108
 1694 0024 116C     		ldr	r1, [r2, #64]
 1695 0026 7A68     		ldr	r2, [r7, #4]
 1696 0028 D243     		mvns	r2, r2
 1697 002a 0A40     		ands	r2, r2, r1
 1698 002c 1A64     		str	r2, [r3, #64]
 1699              	.L105:
1210:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1211:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 1700              		.loc 1 1211 0
 1701 002e 0C37     		adds	r7, r7, #12
 1702 0030 BD46     		mov	sp, r7
 1703              		@ sp needed
 1704 0032 5DF8047B 		ldr	r7, [sp], #4
 1705 0036 7047     		bx	lr
 1706              	.L109:
 1707              		.align	2
 1708              	.L108:
 1709 0038 00380240 		.word	1073887232
 1710              		.cfi_endproc
 1711              	.LFE137:
 1713              		.section	.text.RCC_APB2PeriphClockCmd,"ax",%progbits
 1714              		.align	2
 1715              		.global	RCC_APB2PeriphClockCmd
 1716              		.thumb
 1717              		.thumb_func
 1719              	RCC_APB2PeriphClockCmd:
 1720              	.LFB138:
1212:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1213:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1214:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the High Speed APB (APB2) peripheral clock.
1215:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   After reset, the peripheral clock (used for registers read/write access)
1216:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         is disabled and the application software has to enable this clock before 
1217:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         using it.
1218:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_APB2Periph: specifies the APB2 peripheral to gates its clock.
1219:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
1220:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM1:   TIM1 clock
1221:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM8:   TIM8 clock
1222:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_USART1: USART1 clock
1223:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_USART6: USART6 clock
1224:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC1:   ADC1 clock
1225:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC2:   ADC2 clock
1226:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC3:   ADC3 clock
1227:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SDIO:   SDIO clock
1228:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SPI1:   SPI1 clock
1229:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SYSCFG: SYSCFG clock
1230:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM9:   TIM9 clock
1231:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM10:  TIM10 clock
1232:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM11:  TIM11 clock
1233:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1234:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1235:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1236:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1237:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
1238:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 1721              		.loc 1 1238 0
 1722              		.cfi_startproc
 1723              		@ args = 0, pretend = 0, frame = 8
 1724              		@ frame_needed = 1, uses_anonymous_args = 0
 1725              		@ link register save eliminated.
 1726 0000 80B4     		push	{r7}
 1727              	.LCFI82:
 1728              		.cfi_def_cfa_offset 4
 1729              		.cfi_offset 7, -4
 1730 0002 83B0     		sub	sp, sp, #12
 1731              	.LCFI83:
 1732              		.cfi_def_cfa_offset 16
 1733 0004 00AF     		add	r7, sp, #0
 1734              	.LCFI84:
 1735              		.cfi_def_cfa_register 7
 1736 0006 7860     		str	r0, [r7, #4]
 1737 0008 0B46     		mov	r3, r1
 1738 000a FB70     		strb	r3, [r7, #3]
1239:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1240:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
1241:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1242:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1243:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1739              		.loc 1 1243 0
 1740 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1741 000e 002B     		cmp	r3, #0
 1742 0010 06D0     		beq	.L111
1244:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1245:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->APB2ENR |= RCC_APB2Periph;
 1743              		.loc 1 1245 0
 1744 0012 094B     		ldr	r3, .L113
 1745 0014 084A     		ldr	r2, .L113
 1746 0016 516C     		ldr	r1, [r2, #68]
 1747 0018 7A68     		ldr	r2, [r7, #4]
 1748 001a 0A43     		orrs	r2, r2, r1
 1749 001c 5A64     		str	r2, [r3, #68]
 1750 001e 06E0     		b	.L110
 1751              	.L111:
1246:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1247:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
1248:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1249:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->APB2ENR &= ~RCC_APB2Periph;
 1752              		.loc 1 1249 0
 1753 0020 054B     		ldr	r3, .L113
 1754 0022 054A     		ldr	r2, .L113
 1755 0024 516C     		ldr	r1, [r2, #68]
 1756 0026 7A68     		ldr	r2, [r7, #4]
 1757 0028 D243     		mvns	r2, r2
 1758 002a 0A40     		ands	r2, r2, r1
 1759 002c 5A64     		str	r2, [r3, #68]
 1760              	.L110:
1250:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1251:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 1761              		.loc 1 1251 0
 1762 002e 0C37     		adds	r7, r7, #12
 1763 0030 BD46     		mov	sp, r7
 1764              		@ sp needed
 1765 0032 5DF8047B 		ldr	r7, [sp], #4
 1766 0036 7047     		bx	lr
 1767              	.L114:
 1768              		.align	2
 1769              	.L113:
 1770 0038 00380240 		.word	1073887232
 1771              		.cfi_endproc
 1772              	.LFE138:
 1774              		.section	.text.RCC_AHB1PeriphResetCmd,"ax",%progbits
 1775              		.align	2
 1776              		.global	RCC_AHB1PeriphResetCmd
 1777              		.thumb
 1778              		.thumb_func
 1780              	RCC_AHB1PeriphResetCmd:
 1781              	.LFB139:
1252:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1253:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1254:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Forces or releases AHB1 peripheral reset.
1255:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_AHB1Periph: specifies the AHB1 peripheral to reset.
1256:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
1257:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOA:   GPIOA clock
1258:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOB:   GPIOB clock 
1259:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOC:   GPIOC clock
1260:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOD:   GPIOD clock
1261:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOE:   GPIOE clock
1262:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOF:   GPIOF clock
1263:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOG:   GPIOG clock
1264:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOG:   GPIOG clock
1265:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOI:   GPIOI clock
1266:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_CRC:     CRC clock
1267:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_DMA1:    DMA1 clock
1268:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_DMA2:    DMA2 clock
1269:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC: Ethernet MAC clock
1270:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_OTG_HS:  USB OTG HS clock
1271:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *                  
1272:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral reset.
1273:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1274:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1275:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1276:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_AHB1PeriphResetCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
1277:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 1782              		.loc 1 1277 0
 1783              		.cfi_startproc
 1784              		@ args = 0, pretend = 0, frame = 8
 1785              		@ frame_needed = 1, uses_anonymous_args = 0
 1786              		@ link register save eliminated.
 1787 0000 80B4     		push	{r7}
 1788              	.LCFI85:
 1789              		.cfi_def_cfa_offset 4
 1790              		.cfi_offset 7, -4
 1791 0002 83B0     		sub	sp, sp, #12
 1792              	.LCFI86:
 1793              		.cfi_def_cfa_offset 16
 1794 0004 00AF     		add	r7, sp, #0
 1795              	.LCFI87:
 1796              		.cfi_def_cfa_register 7
 1797 0006 7860     		str	r0, [r7, #4]
 1798 0008 0B46     		mov	r3, r1
 1799 000a FB70     		strb	r3, [r7, #3]
1278:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1279:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
1280:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1281:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1282:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1800              		.loc 1 1282 0
 1801 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1802 000e 002B     		cmp	r3, #0
 1803 0010 06D0     		beq	.L116
1283:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1284:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB1RSTR |= RCC_AHB1Periph;
 1804              		.loc 1 1284 0
 1805 0012 094B     		ldr	r3, .L118
 1806 0014 084A     		ldr	r2, .L118
 1807 0016 1169     		ldr	r1, [r2, #16]
 1808 0018 7A68     		ldr	r2, [r7, #4]
 1809 001a 0A43     		orrs	r2, r2, r1
 1810 001c 1A61     		str	r2, [r3, #16]
 1811 001e 06E0     		b	.L115
 1812              	.L116:
1285:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1286:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
1287:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1288:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB1RSTR &= ~RCC_AHB1Periph;
 1813              		.loc 1 1288 0
 1814 0020 054B     		ldr	r3, .L118
 1815 0022 054A     		ldr	r2, .L118
 1816 0024 1169     		ldr	r1, [r2, #16]
 1817 0026 7A68     		ldr	r2, [r7, #4]
 1818 0028 D243     		mvns	r2, r2
 1819 002a 0A40     		ands	r2, r2, r1
 1820 002c 1A61     		str	r2, [r3, #16]
 1821              	.L115:
1289:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1290:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 1822              		.loc 1 1290 0
 1823 002e 0C37     		adds	r7, r7, #12
 1824 0030 BD46     		mov	sp, r7
 1825              		@ sp needed
 1826 0032 5DF8047B 		ldr	r7, [sp], #4
 1827 0036 7047     		bx	lr
 1828              	.L119:
 1829              		.align	2
 1830              	.L118:
 1831 0038 00380240 		.word	1073887232
 1832              		.cfi_endproc
 1833              	.LFE139:
 1835              		.section	.text.RCC_AHB2PeriphResetCmd,"ax",%progbits
 1836              		.align	2
 1837              		.global	RCC_AHB2PeriphResetCmd
 1838              		.thumb
 1839              		.thumb_func
 1841              	RCC_AHB2PeriphResetCmd:
 1842              	.LFB140:
1291:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1292:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1293:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Forces or releases AHB2 peripheral reset.
1294:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_AHB2Periph: specifies the AHB2 peripheral to reset.
1295:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
1296:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_DCMI:   DCMI clock
1297:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_CRYP:   CRYP clock
1298:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_HASH:   HASH clock
1299:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_RNG:    RNG clock
1300:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_OTG_FS: USB OTG FS clock
1301:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral reset.
1302:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1303:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1304:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1305:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_AHB2PeriphResetCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
1306:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 1843              		.loc 1 1306 0
 1844              		.cfi_startproc
 1845              		@ args = 0, pretend = 0, frame = 8
 1846              		@ frame_needed = 1, uses_anonymous_args = 0
 1847              		@ link register save eliminated.
 1848 0000 80B4     		push	{r7}
 1849              	.LCFI88:
 1850              		.cfi_def_cfa_offset 4
 1851              		.cfi_offset 7, -4
 1852 0002 83B0     		sub	sp, sp, #12
 1853              	.LCFI89:
 1854              		.cfi_def_cfa_offset 16
 1855 0004 00AF     		add	r7, sp, #0
 1856              	.LCFI90:
 1857              		.cfi_def_cfa_register 7
 1858 0006 7860     		str	r0, [r7, #4]
 1859 0008 0B46     		mov	r3, r1
 1860 000a FB70     		strb	r3, [r7, #3]
1307:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1308:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
1309:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1310:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1311:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1861              		.loc 1 1311 0
 1862 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1863 000e 002B     		cmp	r3, #0
 1864 0010 06D0     		beq	.L121
1312:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1313:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB2RSTR |= RCC_AHB2Periph;
 1865              		.loc 1 1313 0
 1866 0012 094B     		ldr	r3, .L123
 1867 0014 084A     		ldr	r2, .L123
 1868 0016 5169     		ldr	r1, [r2, #20]
 1869 0018 7A68     		ldr	r2, [r7, #4]
 1870 001a 0A43     		orrs	r2, r2, r1
 1871 001c 5A61     		str	r2, [r3, #20]
 1872 001e 06E0     		b	.L120
 1873              	.L121:
1314:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1315:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
1316:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1317:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB2RSTR &= ~RCC_AHB2Periph;
 1874              		.loc 1 1317 0
 1875 0020 054B     		ldr	r3, .L123
 1876 0022 054A     		ldr	r2, .L123
 1877 0024 5169     		ldr	r1, [r2, #20]
 1878 0026 7A68     		ldr	r2, [r7, #4]
 1879 0028 D243     		mvns	r2, r2
 1880 002a 0A40     		ands	r2, r2, r1
 1881 002c 5A61     		str	r2, [r3, #20]
 1882              	.L120:
1318:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1319:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 1883              		.loc 1 1319 0
 1884 002e 0C37     		adds	r7, r7, #12
 1885 0030 BD46     		mov	sp, r7
 1886              		@ sp needed
 1887 0032 5DF8047B 		ldr	r7, [sp], #4
 1888 0036 7047     		bx	lr
 1889              	.L124:
 1890              		.align	2
 1891              	.L123:
 1892 0038 00380240 		.word	1073887232
 1893              		.cfi_endproc
 1894              	.LFE140:
 1896              		.section	.text.RCC_AHB3PeriphResetCmd,"ax",%progbits
 1897              		.align	2
 1898              		.global	RCC_AHB3PeriphResetCmd
 1899              		.thumb
 1900              		.thumb_func
 1902              	RCC_AHB3PeriphResetCmd:
 1903              	.LFB141:
1320:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1321:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1322:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Forces or releases AHB3 peripheral reset.
1323:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_AHB3Periph: specifies the AHB3 peripheral to reset.
1324:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter must be: RCC_AHB3Periph_FSMC
1325:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral reset.
1326:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1327:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1328:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1329:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_AHB3PeriphResetCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
1330:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 1904              		.loc 1 1330 0
 1905              		.cfi_startproc
 1906              		@ args = 0, pretend = 0, frame = 8
 1907              		@ frame_needed = 1, uses_anonymous_args = 0
 1908              		@ link register save eliminated.
 1909 0000 80B4     		push	{r7}
 1910              	.LCFI91:
 1911              		.cfi_def_cfa_offset 4
 1912              		.cfi_offset 7, -4
 1913 0002 83B0     		sub	sp, sp, #12
 1914              	.LCFI92:
 1915              		.cfi_def_cfa_offset 16
 1916 0004 00AF     		add	r7, sp, #0
 1917              	.LCFI93:
 1918              		.cfi_def_cfa_register 7
 1919 0006 7860     		str	r0, [r7, #4]
 1920 0008 0B46     		mov	r3, r1
 1921 000a FB70     		strb	r3, [r7, #3]
1331:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1332:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
1333:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1334:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1335:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1922              		.loc 1 1335 0
 1923 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1924 000e 002B     		cmp	r3, #0
 1925 0010 06D0     		beq	.L126
1336:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1337:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB3RSTR |= RCC_AHB3Periph;
 1926              		.loc 1 1337 0
 1927 0012 094B     		ldr	r3, .L128
 1928 0014 084A     		ldr	r2, .L128
 1929 0016 9169     		ldr	r1, [r2, #24]
 1930 0018 7A68     		ldr	r2, [r7, #4]
 1931 001a 0A43     		orrs	r2, r2, r1
 1932 001c 9A61     		str	r2, [r3, #24]
 1933 001e 06E0     		b	.L125
 1934              	.L126:
1338:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1339:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
1340:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1341:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB3RSTR &= ~RCC_AHB3Periph;
 1935              		.loc 1 1341 0
 1936 0020 054B     		ldr	r3, .L128
 1937 0022 054A     		ldr	r2, .L128
 1938 0024 9169     		ldr	r1, [r2, #24]
 1939 0026 7A68     		ldr	r2, [r7, #4]
 1940 0028 D243     		mvns	r2, r2
 1941 002a 0A40     		ands	r2, r2, r1
 1942 002c 9A61     		str	r2, [r3, #24]
 1943              	.L125:
1342:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1343:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 1944              		.loc 1 1343 0
 1945 002e 0C37     		adds	r7, r7, #12
 1946 0030 BD46     		mov	sp, r7
 1947              		@ sp needed
 1948 0032 5DF8047B 		ldr	r7, [sp], #4
 1949 0036 7047     		bx	lr
 1950              	.L129:
 1951              		.align	2
 1952              	.L128:
 1953 0038 00380240 		.word	1073887232
 1954              		.cfi_endproc
 1955              	.LFE141:
 1957              		.section	.text.RCC_APB1PeriphResetCmd,"ax",%progbits
 1958              		.align	2
 1959              		.global	RCC_APB1PeriphResetCmd
 1960              		.thumb
 1961              		.thumb_func
 1963              	RCC_APB1PeriphResetCmd:
 1964              	.LFB142:
1344:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1345:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1346:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Forces or releases Low Speed APB (APB1) peripheral reset.
1347:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_APB1Periph: specifies the APB1 peripheral to reset.
1348:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
1349:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM2:   TIM2 clock
1350:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM3:   TIM3 clock
1351:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM4:   TIM4 clock
1352:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM5:   TIM5 clock
1353:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM6:   TIM6 clock
1354:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM7:   TIM7 clock
1355:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM12:  TIM12 clock
1356:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM13:  TIM13 clock
1357:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM14:  TIM14 clock
1358:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_WWDG:   WWDG clock
1359:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_SPI2:   SPI2 clock
1360:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_SPI3:   SPI3 clock
1361:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_USART2: USART2 clock
1362:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_USART3: USART3 clock
1363:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART4:  UART4 clock
1364:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART5:  UART5 clock
1365:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C1:   I2C1 clock
1366:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C2:   I2C2 clock
1367:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C3:   I2C3 clock
1368:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_CAN1:   CAN1 clock
1369:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_CAN2:   CAN2 clock
1370:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_PWR:    PWR clock
1371:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_DAC:    DAC clock
1372:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral reset.
1373:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1374:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1375:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1376:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
1377:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 1965              		.loc 1 1377 0
 1966              		.cfi_startproc
 1967              		@ args = 0, pretend = 0, frame = 8
 1968              		@ frame_needed = 1, uses_anonymous_args = 0
 1969              		@ link register save eliminated.
 1970 0000 80B4     		push	{r7}
 1971              	.LCFI94:
 1972              		.cfi_def_cfa_offset 4
 1973              		.cfi_offset 7, -4
 1974 0002 83B0     		sub	sp, sp, #12
 1975              	.LCFI95:
 1976              		.cfi_def_cfa_offset 16
 1977 0004 00AF     		add	r7, sp, #0
 1978              	.LCFI96:
 1979              		.cfi_def_cfa_register 7
 1980 0006 7860     		str	r0, [r7, #4]
 1981 0008 0B46     		mov	r3, r1
 1982 000a FB70     		strb	r3, [r7, #3]
1378:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1379:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
1380:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1381:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1983              		.loc 1 1381 0
 1984 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1985 000e 002B     		cmp	r3, #0
 1986 0010 06D0     		beq	.L131
1382:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1383:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->APB1RSTR |= RCC_APB1Periph;
 1987              		.loc 1 1383 0
 1988 0012 094B     		ldr	r3, .L133
 1989 0014 084A     		ldr	r2, .L133
 1990 0016 116A     		ldr	r1, [r2, #32]
 1991 0018 7A68     		ldr	r2, [r7, #4]
 1992 001a 0A43     		orrs	r2, r2, r1
 1993 001c 1A62     		str	r2, [r3, #32]
 1994 001e 06E0     		b	.L130
 1995              	.L131:
1384:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1385:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
1386:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1387:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->APB1RSTR &= ~RCC_APB1Periph;
 1996              		.loc 1 1387 0
 1997 0020 054B     		ldr	r3, .L133
 1998 0022 054A     		ldr	r2, .L133
 1999 0024 116A     		ldr	r1, [r2, #32]
 2000 0026 7A68     		ldr	r2, [r7, #4]
 2001 0028 D243     		mvns	r2, r2
 2002 002a 0A40     		ands	r2, r2, r1
 2003 002c 1A62     		str	r2, [r3, #32]
 2004              	.L130:
1388:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1389:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 2005              		.loc 1 1389 0
 2006 002e 0C37     		adds	r7, r7, #12
 2007 0030 BD46     		mov	sp, r7
 2008              		@ sp needed
 2009 0032 5DF8047B 		ldr	r7, [sp], #4
 2010 0036 7047     		bx	lr
 2011              	.L134:
 2012              		.align	2
 2013              	.L133:
 2014 0038 00380240 		.word	1073887232
 2015              		.cfi_endproc
 2016              	.LFE142:
 2018              		.section	.text.RCC_APB2PeriphResetCmd,"ax",%progbits
 2019              		.align	2
 2020              		.global	RCC_APB2PeriphResetCmd
 2021              		.thumb
 2022              		.thumb_func
 2024              	RCC_APB2PeriphResetCmd:
 2025              	.LFB143:
1390:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1391:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1392:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Forces or releases High Speed APB (APB2) peripheral reset.
1393:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_APB2Periph: specifies the APB2 peripheral to reset.
1394:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
1395:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM1:   TIM1 clock
1396:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM8:   TIM8 clock
1397:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_USART1: USART1 clock
1398:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_USART6: USART6 clock
1399:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC1:   ADC1 clock
1400:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC2:   ADC2 clock
1401:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC3:   ADC3 clock
1402:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SDIO:   SDIO clock
1403:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SPI1:   SPI1 clock
1404:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SYSCFG: SYSCFG clock
1405:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM9:   TIM9 clock
1406:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM10:  TIM10 clock
1407:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM11:  TIM11 clock
1408:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral reset.
1409:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1410:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1411:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1412:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
1413:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 2026              		.loc 1 1413 0
 2027              		.cfi_startproc
 2028              		@ args = 0, pretend = 0, frame = 8
 2029              		@ frame_needed = 1, uses_anonymous_args = 0
 2030              		@ link register save eliminated.
 2031 0000 80B4     		push	{r7}
 2032              	.LCFI97:
 2033              		.cfi_def_cfa_offset 4
 2034              		.cfi_offset 7, -4
 2035 0002 83B0     		sub	sp, sp, #12
 2036              	.LCFI98:
 2037              		.cfi_def_cfa_offset 16
 2038 0004 00AF     		add	r7, sp, #0
 2039              	.LCFI99:
 2040              		.cfi_def_cfa_register 7
 2041 0006 7860     		str	r0, [r7, #4]
 2042 0008 0B46     		mov	r3, r1
 2043 000a FB70     		strb	r3, [r7, #3]
1414:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1415:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
1416:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1417:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 2044              		.loc 1 1417 0
 2045 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2046 000e 002B     		cmp	r3, #0
 2047 0010 06D0     		beq	.L136
1418:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1419:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->APB2RSTR |= RCC_APB2Periph;
 2048              		.loc 1 1419 0
 2049 0012 094B     		ldr	r3, .L138
 2050 0014 084A     		ldr	r2, .L138
 2051 0016 516A     		ldr	r1, [r2, #36]
 2052 0018 7A68     		ldr	r2, [r7, #4]
 2053 001a 0A43     		orrs	r2, r2, r1
 2054 001c 5A62     		str	r2, [r3, #36]
 2055 001e 06E0     		b	.L135
 2056              	.L136:
1420:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1421:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
1422:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1423:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->APB2RSTR &= ~RCC_APB2Periph;
 2057              		.loc 1 1423 0
 2058 0020 054B     		ldr	r3, .L138
 2059 0022 054A     		ldr	r2, .L138
 2060 0024 516A     		ldr	r1, [r2, #36]
 2061 0026 7A68     		ldr	r2, [r7, #4]
 2062 0028 D243     		mvns	r2, r2
 2063 002a 0A40     		ands	r2, r2, r1
 2064 002c 5A62     		str	r2, [r3, #36]
 2065              	.L135:
1424:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1425:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 2066              		.loc 1 1425 0
 2067 002e 0C37     		adds	r7, r7, #12
 2068 0030 BD46     		mov	sp, r7
 2069              		@ sp needed
 2070 0032 5DF8047B 		ldr	r7, [sp], #4
 2071 0036 7047     		bx	lr
 2072              	.L139:
 2073              		.align	2
 2074              	.L138:
 2075 0038 00380240 		.word	1073887232
 2076              		.cfi_endproc
 2077              	.LFE143:
 2079              		.section	.text.RCC_AHB1PeriphClockLPModeCmd,"ax",%progbits
 2080              		.align	2
 2081              		.global	RCC_AHB1PeriphClockLPModeCmd
 2082              		.thumb
 2083              		.thumb_func
 2085              	RCC_AHB1PeriphClockLPModeCmd:
 2086              	.LFB144:
1426:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1427:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1428:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the AHB1 peripheral clock during Low Power (Sleep) mode.
1429:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   Peripheral clock gating in SLEEP mode can be used to further reduce
1430:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         power consumption.
1431:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   After wakeup from SLEEP mode, the peripheral clock is enabled again.
1432:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   By default, all peripheral clocks are enabled during SLEEP mode.
1433:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_AHBPeriph: specifies the AHB1 peripheral to gates its clock.
1434:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
1435:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOA:       GPIOA clock
1436:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOB:       GPIOB clock 
1437:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOC:       GPIOC clock
1438:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOD:       GPIOD clock
1439:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOE:       GPIOE clock
1440:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOF:       GPIOF clock
1441:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOG:       GPIOG clock
1442:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOG:       GPIOG clock
1443:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOI:       GPIOI clock
1444:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_CRC:         CRC clock
1445:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_BKPSRAM:     BKPSRAM interface clock
1446:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_DMA1:        DMA1 clock
1447:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_DMA2:        DMA2 clock
1448:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC:     Ethernet MAC clock
1449:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC_Tx:  Ethernet Transmission clock
1450:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC_Rx:  Ethernet Reception clock
1451:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC_PTP: Ethernet PTP clock
1452:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_OTG_HS:      USB OTG HS clock
1453:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_OTG_HS_ULPI: USB OTG HS ULPI clock
1454:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1455:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1456:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1457:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1458:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_AHB1PeriphClockLPModeCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
1459:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 2087              		.loc 1 1459 0
 2088              		.cfi_startproc
 2089              		@ args = 0, pretend = 0, frame = 8
 2090              		@ frame_needed = 1, uses_anonymous_args = 0
 2091              		@ link register save eliminated.
 2092 0000 80B4     		push	{r7}
 2093              	.LCFI100:
 2094              		.cfi_def_cfa_offset 4
 2095              		.cfi_offset 7, -4
 2096 0002 83B0     		sub	sp, sp, #12
 2097              	.LCFI101:
 2098              		.cfi_def_cfa_offset 16
 2099 0004 00AF     		add	r7, sp, #0
 2100              	.LCFI102:
 2101              		.cfi_def_cfa_register 7
 2102 0006 7860     		str	r0, [r7, #4]
 2103 0008 0B46     		mov	r3, r1
 2104 000a FB70     		strb	r3, [r7, #3]
1460:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1461:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
1462:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1463:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 2105              		.loc 1 1463 0
 2106 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2107 000e 002B     		cmp	r3, #0
 2108 0010 06D0     		beq	.L141
1464:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1465:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB1LPENR |= RCC_AHB1Periph;
 2109              		.loc 1 1465 0
 2110 0012 094B     		ldr	r3, .L143
 2111 0014 084A     		ldr	r2, .L143
 2112 0016 116D     		ldr	r1, [r2, #80]
 2113 0018 7A68     		ldr	r2, [r7, #4]
 2114 001a 0A43     		orrs	r2, r2, r1
 2115 001c 1A65     		str	r2, [r3, #80]
 2116 001e 06E0     		b	.L140
 2117              	.L141:
1466:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1467:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
1468:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1469:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB1LPENR &= ~RCC_AHB1Periph;
 2118              		.loc 1 1469 0
 2119 0020 054B     		ldr	r3, .L143
 2120 0022 054A     		ldr	r2, .L143
 2121 0024 116D     		ldr	r1, [r2, #80]
 2122 0026 7A68     		ldr	r2, [r7, #4]
 2123 0028 D243     		mvns	r2, r2
 2124 002a 0A40     		ands	r2, r2, r1
 2125 002c 1A65     		str	r2, [r3, #80]
 2126              	.L140:
1470:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1471:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 2127              		.loc 1 1471 0
 2128 002e 0C37     		adds	r7, r7, #12
 2129 0030 BD46     		mov	sp, r7
 2130              		@ sp needed
 2131 0032 5DF8047B 		ldr	r7, [sp], #4
 2132 0036 7047     		bx	lr
 2133              	.L144:
 2134              		.align	2
 2135              	.L143:
 2136 0038 00380240 		.word	1073887232
 2137              		.cfi_endproc
 2138              	.LFE144:
 2140              		.section	.text.RCC_AHB2PeriphClockLPModeCmd,"ax",%progbits
 2141              		.align	2
 2142              		.global	RCC_AHB2PeriphClockLPModeCmd
 2143              		.thumb
 2144              		.thumb_func
 2146              	RCC_AHB2PeriphClockLPModeCmd:
 2147              	.LFB145:
1472:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1473:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1474:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the AHB2 peripheral clock during Low Power (Sleep) mode.
1475:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   Peripheral clock gating in SLEEP mode can be used to further reduce
1476:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *           power consumption.
1477:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   After wakeup from SLEEP mode, the peripheral clock is enabled again.
1478:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   By default, all peripheral clocks are enabled during SLEEP mode.
1479:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_AHBPeriph: specifies the AHB2 peripheral to gates its clock.
1480:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
1481:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_DCMI:   DCMI clock
1482:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_CRYP:   CRYP clock
1483:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_HASH:   HASH clock
1484:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_RNG:    RNG clock
1485:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_OTG_FS: USB OTG FS clock  
1486:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1487:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1488:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1489:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1490:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_AHB2PeriphClockLPModeCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
1491:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 2148              		.loc 1 1491 0
 2149              		.cfi_startproc
 2150              		@ args = 0, pretend = 0, frame = 8
 2151              		@ frame_needed = 1, uses_anonymous_args = 0
 2152              		@ link register save eliminated.
 2153 0000 80B4     		push	{r7}
 2154              	.LCFI103:
 2155              		.cfi_def_cfa_offset 4
 2156              		.cfi_offset 7, -4
 2157 0002 83B0     		sub	sp, sp, #12
 2158              	.LCFI104:
 2159              		.cfi_def_cfa_offset 16
 2160 0004 00AF     		add	r7, sp, #0
 2161              	.LCFI105:
 2162              		.cfi_def_cfa_register 7
 2163 0006 7860     		str	r0, [r7, #4]
 2164 0008 0B46     		mov	r3, r1
 2165 000a FB70     		strb	r3, [r7, #3]
1492:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1493:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
1494:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1495:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 2166              		.loc 1 1495 0
 2167 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2168 000e 002B     		cmp	r3, #0
 2169 0010 06D0     		beq	.L146
1496:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1497:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB2LPENR |= RCC_AHB2Periph;
 2170              		.loc 1 1497 0
 2171 0012 094B     		ldr	r3, .L148
 2172 0014 084A     		ldr	r2, .L148
 2173 0016 516D     		ldr	r1, [r2, #84]
 2174 0018 7A68     		ldr	r2, [r7, #4]
 2175 001a 0A43     		orrs	r2, r2, r1
 2176 001c 5A65     		str	r2, [r3, #84]
 2177 001e 06E0     		b	.L145
 2178              	.L146:
1498:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1499:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
1500:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1501:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB2LPENR &= ~RCC_AHB2Periph;
 2179              		.loc 1 1501 0
 2180 0020 054B     		ldr	r3, .L148
 2181 0022 054A     		ldr	r2, .L148
 2182 0024 516D     		ldr	r1, [r2, #84]
 2183 0026 7A68     		ldr	r2, [r7, #4]
 2184 0028 D243     		mvns	r2, r2
 2185 002a 0A40     		ands	r2, r2, r1
 2186 002c 5A65     		str	r2, [r3, #84]
 2187              	.L145:
1502:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1503:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 2188              		.loc 1 1503 0
 2189 002e 0C37     		adds	r7, r7, #12
 2190 0030 BD46     		mov	sp, r7
 2191              		@ sp needed
 2192 0032 5DF8047B 		ldr	r7, [sp], #4
 2193 0036 7047     		bx	lr
 2194              	.L149:
 2195              		.align	2
 2196              	.L148:
 2197 0038 00380240 		.word	1073887232
 2198              		.cfi_endproc
 2199              	.LFE145:
 2201              		.section	.text.RCC_AHB3PeriphClockLPModeCmd,"ax",%progbits
 2202              		.align	2
 2203              		.global	RCC_AHB3PeriphClockLPModeCmd
 2204              		.thumb
 2205              		.thumb_func
 2207              	RCC_AHB3PeriphClockLPModeCmd:
 2208              	.LFB146:
1504:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1505:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1506:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the AHB3 peripheral clock during Low Power (Sleep) mode.
1507:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   Peripheral clock gating in SLEEP mode can be used to further reduce
1508:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         power consumption.
1509:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   After wakeup from SLEEP mode, the peripheral clock is enabled again.
1510:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   By default, all peripheral clocks are enabled during SLEEP mode.
1511:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_AHBPeriph: specifies the AHB3 peripheral to gates its clock.
1512:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter must be: RCC_AHB3Periph_FSMC
1513:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1514:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1515:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1516:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1517:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_AHB3PeriphClockLPModeCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
1518:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 2209              		.loc 1 1518 0
 2210              		.cfi_startproc
 2211              		@ args = 0, pretend = 0, frame = 8
 2212              		@ frame_needed = 1, uses_anonymous_args = 0
 2213              		@ link register save eliminated.
 2214 0000 80B4     		push	{r7}
 2215              	.LCFI106:
 2216              		.cfi_def_cfa_offset 4
 2217              		.cfi_offset 7, -4
 2218 0002 83B0     		sub	sp, sp, #12
 2219              	.LCFI107:
 2220              		.cfi_def_cfa_offset 16
 2221 0004 00AF     		add	r7, sp, #0
 2222              	.LCFI108:
 2223              		.cfi_def_cfa_register 7
 2224 0006 7860     		str	r0, [r7, #4]
 2225 0008 0B46     		mov	r3, r1
 2226 000a FB70     		strb	r3, [r7, #3]
1519:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1520:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
1521:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1522:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 2227              		.loc 1 1522 0
 2228 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2229 000e 002B     		cmp	r3, #0
 2230 0010 06D0     		beq	.L151
1523:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1524:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB3LPENR |= RCC_AHB3Periph;
 2231              		.loc 1 1524 0
 2232 0012 094B     		ldr	r3, .L153
 2233 0014 084A     		ldr	r2, .L153
 2234 0016 916D     		ldr	r1, [r2, #88]
 2235 0018 7A68     		ldr	r2, [r7, #4]
 2236 001a 0A43     		orrs	r2, r2, r1
 2237 001c 9A65     		str	r2, [r3, #88]
 2238 001e 06E0     		b	.L150
 2239              	.L151:
1525:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1526:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
1527:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1528:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB3LPENR &= ~RCC_AHB3Periph;
 2240              		.loc 1 1528 0
 2241 0020 054B     		ldr	r3, .L153
 2242 0022 054A     		ldr	r2, .L153
 2243 0024 916D     		ldr	r1, [r2, #88]
 2244 0026 7A68     		ldr	r2, [r7, #4]
 2245 0028 D243     		mvns	r2, r2
 2246 002a 0A40     		ands	r2, r2, r1
 2247 002c 9A65     		str	r2, [r3, #88]
 2248              	.L150:
1529:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1530:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 2249              		.loc 1 1530 0
 2250 002e 0C37     		adds	r7, r7, #12
 2251 0030 BD46     		mov	sp, r7
 2252              		@ sp needed
 2253 0032 5DF8047B 		ldr	r7, [sp], #4
 2254 0036 7047     		bx	lr
 2255              	.L154:
 2256              		.align	2
 2257              	.L153:
 2258 0038 00380240 		.word	1073887232
 2259              		.cfi_endproc
 2260              	.LFE146:
 2262              		.section	.text.RCC_APB1PeriphClockLPModeCmd,"ax",%progbits
 2263              		.align	2
 2264              		.global	RCC_APB1PeriphClockLPModeCmd
 2265              		.thumb
 2266              		.thumb_func
 2268              	RCC_APB1PeriphClockLPModeCmd:
 2269              	.LFB147:
1531:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1532:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1533:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the APB1 peripheral clock during Low Power (Sleep) mode.
1534:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   Peripheral clock gating in SLEEP mode can be used to further reduce
1535:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         power consumption.
1536:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   After wakeup from SLEEP mode, the peripheral clock is enabled again.
1537:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   By default, all peripheral clocks are enabled during SLEEP mode.
1538:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_APB1Periph: specifies the APB1 peripheral to gates its clock.
1539:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
1540:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM2:   TIM2 clock
1541:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM3:   TIM3 clock
1542:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM4:   TIM4 clock
1543:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM5:   TIM5 clock
1544:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM6:   TIM6 clock
1545:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM7:   TIM7 clock
1546:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM12:  TIM12 clock
1547:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM13:  TIM13 clock
1548:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM14:  TIM14 clock
1549:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_WWDG:   WWDG clock
1550:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_SPI2:   SPI2 clock
1551:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_SPI3:   SPI3 clock
1552:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_USART2: USART2 clock
1553:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_USART3: USART3 clock
1554:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART4:  UART4 clock
1555:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART5:  UART5 clock
1556:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C1:   I2C1 clock
1557:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C2:   I2C2 clock
1558:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C3:   I2C3 clock
1559:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_CAN1:   CAN1 clock
1560:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_CAN2:   CAN2 clock
1561:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_PWR:    PWR clock
1562:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_DAC:    DAC clock
1563:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1564:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1565:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1566:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1567:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_APB1PeriphClockLPModeCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
1568:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 2270              		.loc 1 1568 0
 2271              		.cfi_startproc
 2272              		@ args = 0, pretend = 0, frame = 8
 2273              		@ frame_needed = 1, uses_anonymous_args = 0
 2274              		@ link register save eliminated.
 2275 0000 80B4     		push	{r7}
 2276              	.LCFI109:
 2277              		.cfi_def_cfa_offset 4
 2278              		.cfi_offset 7, -4
 2279 0002 83B0     		sub	sp, sp, #12
 2280              	.LCFI110:
 2281              		.cfi_def_cfa_offset 16
 2282 0004 00AF     		add	r7, sp, #0
 2283              	.LCFI111:
 2284              		.cfi_def_cfa_register 7
 2285 0006 7860     		str	r0, [r7, #4]
 2286 0008 0B46     		mov	r3, r1
 2287 000a FB70     		strb	r3, [r7, #3]
1569:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1570:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
1571:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1572:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 2288              		.loc 1 1572 0
 2289 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2290 000e 002B     		cmp	r3, #0
 2291 0010 06D0     		beq	.L156
1573:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1574:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->APB1LPENR |= RCC_APB1Periph;
 2292              		.loc 1 1574 0
 2293 0012 094B     		ldr	r3, .L158
 2294 0014 084A     		ldr	r2, .L158
 2295 0016 116E     		ldr	r1, [r2, #96]
 2296 0018 7A68     		ldr	r2, [r7, #4]
 2297 001a 0A43     		orrs	r2, r2, r1
 2298 001c 1A66     		str	r2, [r3, #96]
 2299 001e 06E0     		b	.L155
 2300              	.L156:
1575:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1576:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
1577:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1578:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->APB1LPENR &= ~RCC_APB1Periph;
 2301              		.loc 1 1578 0
 2302 0020 054B     		ldr	r3, .L158
 2303 0022 054A     		ldr	r2, .L158
 2304 0024 116E     		ldr	r1, [r2, #96]
 2305 0026 7A68     		ldr	r2, [r7, #4]
 2306 0028 D243     		mvns	r2, r2
 2307 002a 0A40     		ands	r2, r2, r1
 2308 002c 1A66     		str	r2, [r3, #96]
 2309              	.L155:
1579:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1580:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 2310              		.loc 1 1580 0
 2311 002e 0C37     		adds	r7, r7, #12
 2312 0030 BD46     		mov	sp, r7
 2313              		@ sp needed
 2314 0032 5DF8047B 		ldr	r7, [sp], #4
 2315 0036 7047     		bx	lr
 2316              	.L159:
 2317              		.align	2
 2318              	.L158:
 2319 0038 00380240 		.word	1073887232
 2320              		.cfi_endproc
 2321              	.LFE147:
 2323              		.section	.text.RCC_APB2PeriphClockLPModeCmd,"ax",%progbits
 2324              		.align	2
 2325              		.global	RCC_APB2PeriphClockLPModeCmd
 2326              		.thumb
 2327              		.thumb_func
 2329              	RCC_APB2PeriphClockLPModeCmd:
 2330              	.LFB148:
1581:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1582:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1583:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the APB2 peripheral clock during Low Power (Sleep) mode.
1584:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   Peripheral clock gating in SLEEP mode can be used to further reduce
1585:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         power consumption.
1586:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   After wakeup from SLEEP mode, the peripheral clock is enabled again.
1587:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   By default, all peripheral clocks are enabled during SLEEP mode.
1588:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_APB2Periph: specifies the APB2 peripheral to gates its clock.
1589:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
1590:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM1:   TIM1 clock
1591:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM8:   TIM8 clock
1592:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_USART1: USART1 clock
1593:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_USART6: USART6 clock
1594:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC1:   ADC1 clock
1595:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC2:   ADC2 clock
1596:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC3:   ADC3 clock
1597:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SDIO:   SDIO clock
1598:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SPI1:   SPI1 clock
1599:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SYSCFG: SYSCFG clock
1600:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM9:   TIM9 clock
1601:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM10:  TIM10 clock
1602:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM11:  TIM11 clock
1603:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1604:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1605:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1606:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1607:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_APB2PeriphClockLPModeCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
1608:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 2331              		.loc 1 1608 0
 2332              		.cfi_startproc
 2333              		@ args = 0, pretend = 0, frame = 8
 2334              		@ frame_needed = 1, uses_anonymous_args = 0
 2335              		@ link register save eliminated.
 2336 0000 80B4     		push	{r7}
 2337              	.LCFI112:
 2338              		.cfi_def_cfa_offset 4
 2339              		.cfi_offset 7, -4
 2340 0002 83B0     		sub	sp, sp, #12
 2341              	.LCFI113:
 2342              		.cfi_def_cfa_offset 16
 2343 0004 00AF     		add	r7, sp, #0
 2344              	.LCFI114:
 2345              		.cfi_def_cfa_register 7
 2346 0006 7860     		str	r0, [r7, #4]
 2347 0008 0B46     		mov	r3, r1
 2348 000a FB70     		strb	r3, [r7, #3]
1609:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1610:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
1611:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1612:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 2349              		.loc 1 1612 0
 2350 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2351 000e 002B     		cmp	r3, #0
 2352 0010 06D0     		beq	.L161
1613:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1614:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->APB2LPENR |= RCC_APB2Periph;
 2353              		.loc 1 1614 0
 2354 0012 094B     		ldr	r3, .L163
 2355 0014 084A     		ldr	r2, .L163
 2356 0016 516E     		ldr	r1, [r2, #100]
 2357 0018 7A68     		ldr	r2, [r7, #4]
 2358 001a 0A43     		orrs	r2, r2, r1
 2359 001c 5A66     		str	r2, [r3, #100]
 2360 001e 06E0     		b	.L160
 2361              	.L161:
1615:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1616:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
1617:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1618:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->APB2LPENR &= ~RCC_APB2Periph;
 2362              		.loc 1 1618 0
 2363 0020 054B     		ldr	r3, .L163
 2364 0022 054A     		ldr	r2, .L163
 2365 0024 516E     		ldr	r1, [r2, #100]
 2366 0026 7A68     		ldr	r2, [r7, #4]
 2367 0028 D243     		mvns	r2, r2
 2368 002a 0A40     		ands	r2, r2, r1
 2369 002c 5A66     		str	r2, [r3, #100]
 2370              	.L160:
1619:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1620:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 2371              		.loc 1 1620 0
 2372 002e 0C37     		adds	r7, r7, #12
 2373 0030 BD46     		mov	sp, r7
 2374              		@ sp needed
 2375 0032 5DF8047B 		ldr	r7, [sp], #4
 2376 0036 7047     		bx	lr
 2377              	.L164:
 2378              		.align	2
 2379              	.L163:
 2380 0038 00380240 		.word	1073887232
 2381              		.cfi_endproc
 2382              	.LFE148:
 2384              		.section	.text.RCC_ITConfig,"ax",%progbits
 2385              		.align	2
 2386              		.global	RCC_ITConfig
 2387              		.thumb
 2388              		.thumb_func
 2390              	RCC_ITConfig:
 2391              	.LFB149:
1621:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1622:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1623:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @}
1624:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1625:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1626:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /** @defgroup RCC_Group4 Interrupts and flags management functions
1627:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  *  @brief   Interrupts and flags management functions 
1628:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  *
1629:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** @verbatim   
1630:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  ===============================================================================
1631:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****                    Interrupts and flags management functions
1632:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  ===============================================================================  
1633:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1634:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** @endverbatim
1635:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @{
1636:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1637:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1638:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1639:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the specified RCC interrupts.
1640:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_IT: specifies the RCC interrupt sources to be enabled or disabled.
1641:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
1642:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_LSIRDY: LSI ready interrupt
1643:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_LSERDY: LSE ready interrupt
1644:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_HSIRDY: HSI ready interrupt
1645:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_HSERDY: HSE ready interrupt
1646:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_PLLRDY: main PLL ready interrupt
1647:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_PLLI2SRDY: PLLI2S ready interrupt  
1648:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified RCC interrupts.
1649:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1650:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1651:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1652:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
1653:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 2392              		.loc 1 1653 0
 2393              		.cfi_startproc
 2394              		@ args = 0, pretend = 0, frame = 8
 2395              		@ frame_needed = 1, uses_anonymous_args = 0
 2396              		@ link register save eliminated.
 2397 0000 80B4     		push	{r7}
 2398              	.LCFI115:
 2399              		.cfi_def_cfa_offset 4
 2400              		.cfi_offset 7, -4
 2401 0002 83B0     		sub	sp, sp, #12
 2402              	.LCFI116:
 2403              		.cfi_def_cfa_offset 16
 2404 0004 00AF     		add	r7, sp, #0
 2405              	.LCFI117:
 2406              		.cfi_def_cfa_register 7
 2407 0006 0246     		mov	r2, r0
 2408 0008 0B46     		mov	r3, r1
 2409 000a FA71     		strb	r2, [r7, #7]
 2410 000c BB71     		strb	r3, [r7, #6]
1654:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1655:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_IT(RCC_IT));
1656:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1657:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 2411              		.loc 1 1657 0
 2412 000e BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 2413 0010 002B     		cmp	r3, #0
 2414 0012 08D0     		beq	.L166
1658:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1659:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     /* Perform Byte access to RCC_CIR[14:8] bits to enable the selected interrupts */
1660:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 2415              		.loc 1 1660 0
 2416 0014 0B4B     		ldr	r3, .L168
 2417 0016 0B4A     		ldr	r2, .L168
 2418 0018 1278     		ldrb	r2, [r2]
 2419 001a D1B2     		uxtb	r1, r2
 2420 001c FA79     		ldrb	r2, [r7, #7]
 2421 001e 0A43     		orrs	r2, r2, r1
 2422 0020 D2B2     		uxtb	r2, r2
 2423 0022 1A70     		strb	r2, [r3]
 2424 0024 09E0     		b	.L165
 2425              	.L166:
1661:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1662:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
1663:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1664:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     /* Perform Byte access to RCC_CIR[14:8] bits to disable the selected interrupts */
1665:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
 2426              		.loc 1 1665 0
 2427 0026 074B     		ldr	r3, .L168
 2428 0028 064A     		ldr	r2, .L168
 2429 002a 1278     		ldrb	r2, [r2]
 2430 002c D1B2     		uxtb	r1, r2
 2431 002e FA79     		ldrb	r2, [r7, #7]
 2432 0030 D243     		mvns	r2, r2
 2433 0032 D2B2     		uxtb	r2, r2
 2434 0034 0A40     		ands	r2, r2, r1
 2435 0036 D2B2     		uxtb	r2, r2
 2436 0038 1A70     		strb	r2, [r3]
 2437              	.L165:
1666:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1667:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 2438              		.loc 1 1667 0
 2439 003a 0C37     		adds	r7, r7, #12
 2440 003c BD46     		mov	sp, r7
 2441              		@ sp needed
 2442 003e 5DF8047B 		ldr	r7, [sp], #4
 2443 0042 7047     		bx	lr
 2444              	.L169:
 2445              		.align	2
 2446              	.L168:
 2447 0044 0D380240 		.word	1073887245
 2448              		.cfi_endproc
 2449              	.LFE149:
 2451              		.section	.text.RCC_GetFlagStatus,"ax",%progbits
 2452              		.align	2
 2453              		.global	RCC_GetFlagStatus
 2454              		.thumb
 2455              		.thumb_func
 2457              	RCC_GetFlagStatus:
 2458              	.LFB150:
1668:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1669:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1670:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Checks whether the specified RCC flag is set or not.
1671:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_FLAG: specifies the flag to check.
1672:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
1673:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_HSIRDY: HSI oscillator clock ready
1674:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_HSERDY: HSE oscillator clock ready
1675:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_PLLRDY: main PLL clock ready
1676:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_PLLI2SRDY: PLLI2S clock ready
1677:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_LSERDY: LSE oscillator clock ready
1678:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_LSIRDY: LSI oscillator clock ready
1679:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_BORRST: POR/PDR or BOR reset
1680:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_PINRST: Pin reset
1681:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_PORRST: POR/PDR reset
1682:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_SFTRST: Software reset
1683:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_IWDGRST: Independent Watchdog reset
1684:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_WWDGRST: Window Watchdog reset
1685:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_LPWRRST: Low Power reset
1686:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval The new state of RCC_FLAG (SET or RESET).
1687:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1688:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
1689:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 2459              		.loc 1 1689 0
 2460              		.cfi_startproc
 2461              		@ args = 0, pretend = 0, frame = 24
 2462              		@ frame_needed = 1, uses_anonymous_args = 0
 2463              		@ link register save eliminated.
 2464 0000 80B4     		push	{r7}
 2465              	.LCFI118:
 2466              		.cfi_def_cfa_offset 4
 2467              		.cfi_offset 7, -4
 2468 0002 87B0     		sub	sp, sp, #28
 2469              	.LCFI119:
 2470              		.cfi_def_cfa_offset 32
 2471 0004 00AF     		add	r7, sp, #0
 2472              	.LCFI120:
 2473              		.cfi_def_cfa_register 7
 2474 0006 0346     		mov	r3, r0
 2475 0008 FB71     		strb	r3, [r7, #7]
1690:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   uint32_t tmp = 0;
 2476              		.loc 1 1690 0
 2477 000a 0023     		movs	r3, #0
 2478 000c FB60     		str	r3, [r7, #12]
1691:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   uint32_t statusreg = 0;
 2479              		.loc 1 1691 0
 2480 000e 0023     		movs	r3, #0
 2481 0010 7B61     		str	r3, [r7, #20]
1692:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   FlagStatus bitstatus = RESET;
 2482              		.loc 1 1692 0
 2483 0012 0023     		movs	r3, #0
 2484 0014 FB74     		strb	r3, [r7, #19]
1693:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1694:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1695:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_FLAG(RCC_FLAG));
1696:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1697:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Get the RCC register index */
1698:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmp = RCC_FLAG >> 5;
 2485              		.loc 1 1698 0
 2486 0016 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2487 0018 5B09     		lsrs	r3, r3, #5
 2488 001a DBB2     		uxtb	r3, r3
 2489 001c FB60     		str	r3, [r7, #12]
1699:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (tmp == 1)               /* The flag to check is in CR register */
 2490              		.loc 1 1699 0
 2491 001e FB68     		ldr	r3, [r7, #12]
 2492 0020 012B     		cmp	r3, #1
 2493 0022 03D1     		bne	.L171
1700:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1701:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     statusreg = RCC->CR;
 2494              		.loc 1 1701 0
 2495 0024 124B     		ldr	r3, .L177
 2496 0026 1B68     		ldr	r3, [r3]
 2497 0028 7B61     		str	r3, [r7, #20]
 2498 002a 09E0     		b	.L172
 2499              	.L171:
1702:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1703:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else if (tmp == 2)          /* The flag to check is in BDCR register */
 2500              		.loc 1 1703 0
 2501 002c FB68     		ldr	r3, [r7, #12]
 2502 002e 022B     		cmp	r3, #2
 2503 0030 03D1     		bne	.L173
1704:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1705:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     statusreg = RCC->BDCR;
 2504              		.loc 1 1705 0
 2505 0032 0F4B     		ldr	r3, .L177
 2506 0034 1B6F     		ldr	r3, [r3, #112]
 2507 0036 7B61     		str	r3, [r7, #20]
 2508 0038 02E0     		b	.L172
 2509              	.L173:
1706:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1707:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else                       /* The flag to check is in CSR register */
1708:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1709:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     statusreg = RCC->CSR;
 2510              		.loc 1 1709 0
 2511 003a 0D4B     		ldr	r3, .L177
 2512 003c 5B6F     		ldr	r3, [r3, #116]
 2513 003e 7B61     		str	r3, [r7, #20]
 2514              	.L172:
1710:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1711:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1712:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Get the flag position */
1713:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmp = RCC_FLAG & FLAG_MASK;
 2515              		.loc 1 1713 0
 2516 0040 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2517 0042 03F01F03 		and	r3, r3, #31
 2518 0046 FB60     		str	r3, [r7, #12]
1714:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 2519              		.loc 1 1714 0
 2520 0048 FB68     		ldr	r3, [r7, #12]
 2521 004a 7A69     		ldr	r2, [r7, #20]
 2522 004c 22FA03F3 		lsr	r3, r2, r3
 2523 0050 03F00103 		and	r3, r3, #1
 2524 0054 002B     		cmp	r3, #0
 2525 0056 02D0     		beq	.L174
1715:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1716:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     bitstatus = SET;
 2526              		.loc 1 1716 0
 2527 0058 0123     		movs	r3, #1
 2528 005a FB74     		strb	r3, [r7, #19]
 2529 005c 01E0     		b	.L175
 2530              	.L174:
1717:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1718:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
1719:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1720:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     bitstatus = RESET;
 2531              		.loc 1 1720 0
 2532 005e 0023     		movs	r3, #0
 2533 0060 FB74     		strb	r3, [r7, #19]
 2534              	.L175:
1721:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1722:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Return the flag status */
1723:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   return bitstatus;
 2535              		.loc 1 1723 0
 2536 0062 FB7C     		ldrb	r3, [r7, #19]	@ zero_extendqisi2
1724:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 2537              		.loc 1 1724 0
 2538 0064 1846     		mov	r0, r3
 2539 0066 1C37     		adds	r7, r7, #28
 2540 0068 BD46     		mov	sp, r7
 2541              		@ sp needed
 2542 006a 5DF8047B 		ldr	r7, [sp], #4
 2543 006e 7047     		bx	lr
 2544              	.L178:
 2545              		.align	2
 2546              	.L177:
 2547 0070 00380240 		.word	1073887232
 2548              		.cfi_endproc
 2549              	.LFE150:
 2551              		.section	.text.RCC_ClearFlag,"ax",%progbits
 2552              		.align	2
 2553              		.global	RCC_ClearFlag
 2554              		.thumb
 2555              		.thumb_func
 2557              	RCC_ClearFlag:
 2558              	.LFB151:
1725:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1726:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1727:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Clears the RCC reset flags.
1728:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         The reset flags are: RCC_FLAG_PINRST, RCC_FLAG_PORRST,  RCC_FLAG_SFTRST,
1729:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST, RCC_FLAG_LPWRRST
1730:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  None
1731:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1732:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1733:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_ClearFlag(void)
1734:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 2559              		.loc 1 1734 0
 2560              		.cfi_startproc
 2561              		@ args = 0, pretend = 0, frame = 0
 2562              		@ frame_needed = 1, uses_anonymous_args = 0
 2563              		@ link register save eliminated.
 2564 0000 80B4     		push	{r7}
 2565              	.LCFI121:
 2566              		.cfi_def_cfa_offset 4
 2567              		.cfi_offset 7, -4
 2568 0002 00AF     		add	r7, sp, #0
 2569              	.LCFI122:
 2570              		.cfi_def_cfa_register 7
1735:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Set RMVF bit to clear the reset flags */
1736:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->CSR |= RCC_CSR_RMVF;
 2571              		.loc 1 1736 0
 2572 0004 044B     		ldr	r3, .L180
 2573 0006 044A     		ldr	r2, .L180
 2574 0008 526F     		ldr	r2, [r2, #116]
 2575 000a 42F08072 		orr	r2, r2, #16777216
 2576 000e 5A67     		str	r2, [r3, #116]
1737:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 2577              		.loc 1 1737 0
 2578 0010 BD46     		mov	sp, r7
 2579              		@ sp needed
 2580 0012 5DF8047B 		ldr	r7, [sp], #4
 2581 0016 7047     		bx	lr
 2582              	.L181:
 2583              		.align	2
 2584              	.L180:
 2585 0018 00380240 		.word	1073887232
 2586              		.cfi_endproc
 2587              	.LFE151:
 2589              		.section	.text.RCC_GetITStatus,"ax",%progbits
 2590              		.align	2
 2591              		.global	RCC_GetITStatus
 2592              		.thumb
 2593              		.thumb_func
 2595              	RCC_GetITStatus:
 2596              	.LFB152:
1738:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1739:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1740:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Checks whether the specified RCC interrupt has occurred or not.
1741:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_IT: specifies the RCC interrupt source to check.
1742:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
1743:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_LSIRDY: LSI ready interrupt
1744:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_LSERDY: LSE ready interrupt
1745:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_HSIRDY: HSI ready interrupt
1746:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_HSERDY: HSE ready interrupt
1747:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_PLLRDY: main PLL ready interrupt
1748:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_PLLI2SRDY: PLLI2S ready interrupt  
1749:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_CSS: Clock Security System interrupt
1750:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval The new state of RCC_IT (SET or RESET).
1751:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1752:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** ITStatus RCC_GetITStatus(uint8_t RCC_IT)
1753:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 2597              		.loc 1 1753 0
 2598              		.cfi_startproc
 2599              		@ args = 0, pretend = 0, frame = 16
 2600              		@ frame_needed = 1, uses_anonymous_args = 0
 2601              		@ link register save eliminated.
 2602 0000 80B4     		push	{r7}
 2603              	.LCFI123:
 2604              		.cfi_def_cfa_offset 4
 2605              		.cfi_offset 7, -4
 2606 0002 85B0     		sub	sp, sp, #20
 2607              	.LCFI124:
 2608              		.cfi_def_cfa_offset 24
 2609 0004 00AF     		add	r7, sp, #0
 2610              	.LCFI125:
 2611              		.cfi_def_cfa_register 7
 2612 0006 0346     		mov	r3, r0
 2613 0008 FB71     		strb	r3, [r7, #7]
1754:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   ITStatus bitstatus = RESET;
 2614              		.loc 1 1754 0
 2615 000a 0023     		movs	r3, #0
 2616 000c FB73     		strb	r3, [r7, #15]
1755:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1756:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1757:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_GET_IT(RCC_IT));
1758:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1759:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the status of the specified RCC interrupt */
1760:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
 2617              		.loc 1 1760 0
 2618 000e 094B     		ldr	r3, .L186
 2619 0010 DA68     		ldr	r2, [r3, #12]
 2620 0012 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2621 0014 1340     		ands	r3, r3, r2
 2622 0016 002B     		cmp	r3, #0
 2623 0018 02D0     		beq	.L183
1761:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1762:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     bitstatus = SET;
 2624              		.loc 1 1762 0
 2625 001a 0123     		movs	r3, #1
 2626 001c FB73     		strb	r3, [r7, #15]
 2627 001e 01E0     		b	.L184
 2628              	.L183:
1763:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1764:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
1765:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1766:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     bitstatus = RESET;
 2629              		.loc 1 1766 0
 2630 0020 0023     		movs	r3, #0
 2631 0022 FB73     		strb	r3, [r7, #15]
 2632              	.L184:
1767:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1768:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Return the RCC_IT status */
1769:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   return  bitstatus;
 2633              		.loc 1 1769 0
 2634 0024 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
1770:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 2635              		.loc 1 1770 0
 2636 0026 1846     		mov	r0, r3
 2637 0028 1437     		adds	r7, r7, #20
 2638 002a BD46     		mov	sp, r7
 2639              		@ sp needed
 2640 002c 5DF8047B 		ldr	r7, [sp], #4
 2641 0030 7047     		bx	lr
 2642              	.L187:
 2643 0032 00BF     		.align	2
 2644              	.L186:
 2645 0034 00380240 		.word	1073887232
 2646              		.cfi_endproc
 2647              	.LFE152:
 2649              		.section	.text.RCC_ClearITPendingBit,"ax",%progbits
 2650              		.align	2
 2651              		.global	RCC_ClearITPendingBit
 2652              		.thumb
 2653              		.thumb_func
 2655              	RCC_ClearITPendingBit:
 2656              	.LFB153:
1771:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1772:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1773:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Clears the RCC's interrupt pending bits.
1774:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_IT: specifies the interrupt pending bit to clear.
1775:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
1776:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_LSIRDY: LSI ready interrupt
1777:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_LSERDY: LSE ready interrupt
1778:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_HSIRDY: HSI ready interrupt
1779:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_HSERDY: HSE ready interrupt
1780:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_PLLRDY: main PLL ready interrupt
1781:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_PLLI2SRDY: PLLI2S ready interrupt  
1782:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_CSS: Clock Security System interrupt
1783:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1784:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1785:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_ClearITPendingBit(uint8_t RCC_IT)
1786:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 2657              		.loc 1 1786 0
 2658              		.cfi_startproc
 2659              		@ args = 0, pretend = 0, frame = 8
 2660              		@ frame_needed = 1, uses_anonymous_args = 0
 2661              		@ link register save eliminated.
 2662 0000 80B4     		push	{r7}
 2663              	.LCFI126:
 2664              		.cfi_def_cfa_offset 4
 2665              		.cfi_offset 7, -4
 2666 0002 83B0     		sub	sp, sp, #12
 2667              	.LCFI127:
 2668              		.cfi_def_cfa_offset 16
 2669 0004 00AF     		add	r7, sp, #0
 2670              	.LCFI128:
 2671              		.cfi_def_cfa_register 7
 2672 0006 0346     		mov	r3, r0
 2673 0008 FB71     		strb	r3, [r7, #7]
1787:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1788:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_CLEAR_IT(RCC_IT));
1789:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1790:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
1791:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      pending bits */
1792:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
 2674              		.loc 1 1792 0
 2675 000a 044B     		ldr	r3, .L189
 2676 000c FA79     		ldrb	r2, [r7, #7]
 2677 000e 1A70     		strb	r2, [r3]
1793:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 2678              		.loc 1 1793 0
 2679 0010 0C37     		adds	r7, r7, #12
 2680 0012 BD46     		mov	sp, r7
 2681              		@ sp needed
 2682 0014 5DF8047B 		ldr	r7, [sp], #4
 2683 0018 7047     		bx	lr
 2684              	.L190:
 2685 001a 00BF     		.align	2
 2686              	.L189:
 2687 001c 0E380240 		.word	1073887246
 2688              		.cfi_endproc
 2689              	.LFE153:
 2691              		.text
 2692              	.Letext0:
 2693              		.file 2 "/home/shihyu/data/STM32F4/gcc-arm-none-eabi-4_8-2013q4/arm-none-eabi/include/stdint.h"
 2694              		.file 3 "libs/Device/STM32F4xx/Include/stm32f4xx.h"
 2695              		.file 4 "libs/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_rcc.h"
 2696              		.file 5 "libs/CMSIS/Include/core_cm4.h"
DEFINED SYMBOLS
                            *ABS*:00000000 stm32f4xx_rcc.c
     /tmp/ccqiPihB.s:20     .data.APBAHBPrescTable:00000000 $d
     /tmp/ccqiPihB.s:23     .data.APBAHBPrescTable:00000000 APBAHBPrescTable
     /tmp/ccqiPihB.s:41     .text.RCC_DeInit:00000000 $t
     /tmp/ccqiPihB.s:46     .text.RCC_DeInit:00000000 RCC_DeInit
     /tmp/ccqiPihB.s:100    .text.RCC_DeInit:00000048 $d
     /tmp/ccqiPihB.s:106    .text.RCC_HSEConfig:00000000 $t
     /tmp/ccqiPihB.s:111    .text.RCC_HSEConfig:00000000 RCC_HSEConfig
     /tmp/ccqiPihB.s:147    .text.RCC_HSEConfig:00000020 $d
     /tmp/ccqiPihB.s:152    .text.RCC_WaitForHSEStartUp:00000000 $t
     /tmp/ccqiPihB.s:157    .text.RCC_WaitForHSEStartUp:00000000 RCC_WaitForHSEStartUp
     /tmp/ccqiPihB.s:2457   .text.RCC_GetFlagStatus:00000000 RCC_GetFlagStatus
     /tmp/ccqiPihB.s:228    .text.RCC_AdjustHSICalibrationValue:00000000 $t
     /tmp/ccqiPihB.s:233    .text.RCC_AdjustHSICalibrationValue:00000000 RCC_AdjustHSICalibrationValue
     /tmp/ccqiPihB.s:282    .text.RCC_AdjustHSICalibrationValue:00000038 $d
     /tmp/ccqiPihB.s:287    .text.RCC_HSICmd:00000000 $t
     /tmp/ccqiPihB.s:292    .text.RCC_HSICmd:00000000 RCC_HSICmd
     /tmp/ccqiPihB.s:324    .text.RCC_HSICmd:0000001c $d
     /tmp/ccqiPihB.s:329    .text.RCC_LSEConfig:00000000 $t
     /tmp/ccqiPihB.s:334    .text.RCC_LSEConfig:00000000 RCC_LSEConfig
     /tmp/ccqiPihB.s:393    .text.RCC_LSEConfig:0000003c $d
     /tmp/ccqiPihB.s:398    .text.RCC_LSICmd:00000000 $t
     /tmp/ccqiPihB.s:403    .text.RCC_LSICmd:00000000 RCC_LSICmd
     /tmp/ccqiPihB.s:435    .text.RCC_LSICmd:0000001c $d
     /tmp/ccqiPihB.s:440    .text.RCC_PLLConfig:00000000 $t
     /tmp/ccqiPihB.s:445    .text.RCC_PLLConfig:00000000 RCC_PLLConfig
     /tmp/ccqiPihB.s:494    .text.RCC_PLLConfig:00000038 $d
     /tmp/ccqiPihB.s:499    .text.RCC_PLLCmd:00000000 $t
     /tmp/ccqiPihB.s:504    .text.RCC_PLLCmd:00000000 RCC_PLLCmd
     /tmp/ccqiPihB.s:536    .text.RCC_PLLCmd:0000001c $d
     /tmp/ccqiPihB.s:541    .text.RCC_PLLI2SConfig:00000000 $t
     /tmp/ccqiPihB.s:546    .text.RCC_PLLI2SConfig:00000000 RCC_PLLI2SConfig
     /tmp/ccqiPihB.s:582    .text.RCC_PLLI2SConfig:00000024 $d
     /tmp/ccqiPihB.s:587    .text.RCC_PLLI2SCmd:00000000 $t
     /tmp/ccqiPihB.s:592    .text.RCC_PLLI2SCmd:00000000 RCC_PLLI2SCmd
     /tmp/ccqiPihB.s:624    .text.RCC_PLLI2SCmd:0000001c $d
     /tmp/ccqiPihB.s:629    .text.RCC_ClockSecuritySystemCmd:00000000 $t
     /tmp/ccqiPihB.s:634    .text.RCC_ClockSecuritySystemCmd:00000000 RCC_ClockSecuritySystemCmd
     /tmp/ccqiPihB.s:666    .text.RCC_ClockSecuritySystemCmd:0000001c $d
     /tmp/ccqiPihB.s:671    .text.RCC_MCO1Config:00000000 $t
     /tmp/ccqiPihB.s:676    .text.RCC_MCO1Config:00000000 RCC_MCO1Config
     /tmp/ccqiPihB.s:726    .text.RCC_MCO1Config:00000038 $d
     /tmp/ccqiPihB.s:731    .text.RCC_MCO2Config:00000000 $t
     /tmp/ccqiPihB.s:736    .text.RCC_MCO2Config:00000000 RCC_MCO2Config
     /tmp/ccqiPihB.s:786    .text.RCC_MCO2Config:00000038 $d
     /tmp/ccqiPihB.s:791    .text.RCC_SYSCLKConfig:00000000 $t
     /tmp/ccqiPihB.s:796    .text.RCC_SYSCLKConfig:00000000 RCC_SYSCLKConfig
     /tmp/ccqiPihB.s:843    .text.RCC_SYSCLKConfig:00000034 $d
     /tmp/ccqiPihB.s:848    .text.RCC_GetSYSCLKSource:00000000 $t
     /tmp/ccqiPihB.s:853    .text.RCC_GetSYSCLKSource:00000000 RCC_GetSYSCLKSource
     /tmp/ccqiPihB.s:882    .text.RCC_GetSYSCLKSource:0000001c $d
     /tmp/ccqiPihB.s:887    .text.RCC_HCLKConfig:00000000 $t
     /tmp/ccqiPihB.s:892    .text.RCC_HCLKConfig:00000000 RCC_HCLKConfig
     /tmp/ccqiPihB.s:939    .text.RCC_HCLKConfig:00000034 $d
     /tmp/ccqiPihB.s:944    .text.RCC_PCLK1Config:00000000 $t
     /tmp/ccqiPihB.s:949    .text.RCC_PCLK1Config:00000000 RCC_PCLK1Config
     /tmp/ccqiPihB.s:996    .text.RCC_PCLK1Config:00000034 $d
     /tmp/ccqiPihB.s:1001   .text.RCC_PCLK2Config:00000000 $t
     /tmp/ccqiPihB.s:1006   .text.RCC_PCLK2Config:00000000 RCC_PCLK2Config
     /tmp/ccqiPihB.s:1054   .text.RCC_PCLK2Config:00000034 $d
     /tmp/ccqiPihB.s:1059   .text.RCC_GetClocksFreq:00000000 $t
     /tmp/ccqiPihB.s:1064   .text.RCC_GetClocksFreq:00000000 RCC_GetClocksFreq
     /tmp/ccqiPihB.s:1264   .text.RCC_GetClocksFreq:00000144 $d
     /tmp/ccqiPihB.s:1272   .text.RCC_RTCCLKConfig:00000000 $t
     /tmp/ccqiPihB.s:1277   .text.RCC_RTCCLKConfig:00000000 RCC_RTCCLKConfig
     /tmp/ccqiPihB.s:1340   .text.RCC_RTCCLKConfig:00000058 $d
     /tmp/ccqiPihB.s:1345   .text.RCC_RTCCLKCmd:00000000 $t
     /tmp/ccqiPihB.s:1350   .text.RCC_RTCCLKCmd:00000000 RCC_RTCCLKCmd
     /tmp/ccqiPihB.s:1382   .text.RCC_RTCCLKCmd:0000001c $d
     /tmp/ccqiPihB.s:1387   .text.RCC_BackupResetCmd:00000000 $t
     /tmp/ccqiPihB.s:1392   .text.RCC_BackupResetCmd:00000000 RCC_BackupResetCmd
     /tmp/ccqiPihB.s:1424   .text.RCC_BackupResetCmd:0000001c $d
     /tmp/ccqiPihB.s:1429   .text.RCC_I2SCLKConfig:00000000 $t
     /tmp/ccqiPihB.s:1434   .text.RCC_I2SCLKConfig:00000000 RCC_I2SCLKConfig
     /tmp/ccqiPihB.s:1465   .text.RCC_I2SCLKConfig:00000018 $d
     /tmp/ccqiPihB.s:1470   .text.RCC_AHB1PeriphClockCmd:00000000 $t
     /tmp/ccqiPihB.s:1475   .text.RCC_AHB1PeriphClockCmd:00000000 RCC_AHB1PeriphClockCmd
     /tmp/ccqiPihB.s:1526   .text.RCC_AHB1PeriphClockCmd:00000038 $d
     /tmp/ccqiPihB.s:1531   .text.RCC_AHB2PeriphClockCmd:00000000 $t
     /tmp/ccqiPihB.s:1536   .text.RCC_AHB2PeriphClockCmd:00000000 RCC_AHB2PeriphClockCmd
     /tmp/ccqiPihB.s:1587   .text.RCC_AHB2PeriphClockCmd:00000038 $d
     /tmp/ccqiPihB.s:1592   .text.RCC_AHB3PeriphClockCmd:00000000 $t
     /tmp/ccqiPihB.s:1597   .text.RCC_AHB3PeriphClockCmd:00000000 RCC_AHB3PeriphClockCmd
     /tmp/ccqiPihB.s:1648   .text.RCC_AHB3PeriphClockCmd:00000038 $d
     /tmp/ccqiPihB.s:1653   .text.RCC_APB1PeriphClockCmd:00000000 $t
     /tmp/ccqiPihB.s:1658   .text.RCC_APB1PeriphClockCmd:00000000 RCC_APB1PeriphClockCmd
     /tmp/ccqiPihB.s:1709   .text.RCC_APB1PeriphClockCmd:00000038 $d
     /tmp/ccqiPihB.s:1714   .text.RCC_APB2PeriphClockCmd:00000000 $t
     /tmp/ccqiPihB.s:1719   .text.RCC_APB2PeriphClockCmd:00000000 RCC_APB2PeriphClockCmd
     /tmp/ccqiPihB.s:1770   .text.RCC_APB2PeriphClockCmd:00000038 $d
     /tmp/ccqiPihB.s:1775   .text.RCC_AHB1PeriphResetCmd:00000000 $t
     /tmp/ccqiPihB.s:1780   .text.RCC_AHB1PeriphResetCmd:00000000 RCC_AHB1PeriphResetCmd
     /tmp/ccqiPihB.s:1831   .text.RCC_AHB1PeriphResetCmd:00000038 $d
     /tmp/ccqiPihB.s:1836   .text.RCC_AHB2PeriphResetCmd:00000000 $t
     /tmp/ccqiPihB.s:1841   .text.RCC_AHB2PeriphResetCmd:00000000 RCC_AHB2PeriphResetCmd
     /tmp/ccqiPihB.s:1892   .text.RCC_AHB2PeriphResetCmd:00000038 $d
     /tmp/ccqiPihB.s:1897   .text.RCC_AHB3PeriphResetCmd:00000000 $t
     /tmp/ccqiPihB.s:1902   .text.RCC_AHB3PeriphResetCmd:00000000 RCC_AHB3PeriphResetCmd
     /tmp/ccqiPihB.s:1953   .text.RCC_AHB3PeriphResetCmd:00000038 $d
     /tmp/ccqiPihB.s:1958   .text.RCC_APB1PeriphResetCmd:00000000 $t
     /tmp/ccqiPihB.s:1963   .text.RCC_APB1PeriphResetCmd:00000000 RCC_APB1PeriphResetCmd
     /tmp/ccqiPihB.s:2014   .text.RCC_APB1PeriphResetCmd:00000038 $d
     /tmp/ccqiPihB.s:2019   .text.RCC_APB2PeriphResetCmd:00000000 $t
     /tmp/ccqiPihB.s:2024   .text.RCC_APB2PeriphResetCmd:00000000 RCC_APB2PeriphResetCmd
     /tmp/ccqiPihB.s:2075   .text.RCC_APB2PeriphResetCmd:00000038 $d
     /tmp/ccqiPihB.s:2080   .text.RCC_AHB1PeriphClockLPModeCmd:00000000 $t
     /tmp/ccqiPihB.s:2085   .text.RCC_AHB1PeriphClockLPModeCmd:00000000 RCC_AHB1PeriphClockLPModeCmd
     /tmp/ccqiPihB.s:2136   .text.RCC_AHB1PeriphClockLPModeCmd:00000038 $d
     /tmp/ccqiPihB.s:2141   .text.RCC_AHB2PeriphClockLPModeCmd:00000000 $t
     /tmp/ccqiPihB.s:2146   .text.RCC_AHB2PeriphClockLPModeCmd:00000000 RCC_AHB2PeriphClockLPModeCmd
     /tmp/ccqiPihB.s:2197   .text.RCC_AHB2PeriphClockLPModeCmd:00000038 $d
     /tmp/ccqiPihB.s:2202   .text.RCC_AHB3PeriphClockLPModeCmd:00000000 $t
     /tmp/ccqiPihB.s:2207   .text.RCC_AHB3PeriphClockLPModeCmd:00000000 RCC_AHB3PeriphClockLPModeCmd
     /tmp/ccqiPihB.s:2258   .text.RCC_AHB3PeriphClockLPModeCmd:00000038 $d
     /tmp/ccqiPihB.s:2263   .text.RCC_APB1PeriphClockLPModeCmd:00000000 $t
     /tmp/ccqiPihB.s:2268   .text.RCC_APB1PeriphClockLPModeCmd:00000000 RCC_APB1PeriphClockLPModeCmd
     /tmp/ccqiPihB.s:2319   .text.RCC_APB1PeriphClockLPModeCmd:00000038 $d
     /tmp/ccqiPihB.s:2324   .text.RCC_APB2PeriphClockLPModeCmd:00000000 $t
     /tmp/ccqiPihB.s:2329   .text.RCC_APB2PeriphClockLPModeCmd:00000000 RCC_APB2PeriphClockLPModeCmd
     /tmp/ccqiPihB.s:2380   .text.RCC_APB2PeriphClockLPModeCmd:00000038 $d
     /tmp/ccqiPihB.s:2385   .text.RCC_ITConfig:00000000 $t
     /tmp/ccqiPihB.s:2390   .text.RCC_ITConfig:00000000 RCC_ITConfig
     /tmp/ccqiPihB.s:2447   .text.RCC_ITConfig:00000044 $d
     /tmp/ccqiPihB.s:2452   .text.RCC_GetFlagStatus:00000000 $t
     /tmp/ccqiPihB.s:2547   .text.RCC_GetFlagStatus:00000070 $d
     /tmp/ccqiPihB.s:2552   .text.RCC_ClearFlag:00000000 $t
     /tmp/ccqiPihB.s:2557   .text.RCC_ClearFlag:00000000 RCC_ClearFlag
     /tmp/ccqiPihB.s:2585   .text.RCC_ClearFlag:00000018 $d
     /tmp/ccqiPihB.s:2590   .text.RCC_GetITStatus:00000000 $t
     /tmp/ccqiPihB.s:2595   .text.RCC_GetITStatus:00000000 RCC_GetITStatus
     /tmp/ccqiPihB.s:2645   .text.RCC_GetITStatus:00000034 $d
     /tmp/ccqiPihB.s:2650   .text.RCC_ClearITPendingBit:00000000 $t
     /tmp/ccqiPihB.s:2655   .text.RCC_ClearITPendingBit:00000000 RCC_ClearITPendingBit
     /tmp/ccqiPihB.s:2687   .text.RCC_ClearITPendingBit:0000001c $d
                     .debug_frame:00000010 $d

NO UNDEFINED SYMBOLS
