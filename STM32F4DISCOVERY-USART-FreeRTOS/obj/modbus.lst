   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"modbus.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.rodata.crcHi,"a",%progbits
  20              		.align	2
  23              	crcHi:
  24 0000 00000000 		.word	0
  25 0004 C1000000 		.word	193
  26 0008 81000000 		.word	129
  27 000c 40000000 		.word	64
  28 0010 01000000 		.word	1
  29 0014 C0000000 		.word	192
  30 0018 80000000 		.word	128
  31 001c 41000000 		.word	65
  32 0020 01000000 		.word	1
  33 0024 C0000000 		.word	192
  34 0028 80000000 		.word	128
  35 002c 41000000 		.word	65
  36 0030 00000000 		.word	0
  37 0034 C1000000 		.word	193
  38 0038 81000000 		.word	129
  39 003c 40000000 		.word	64
  40 0040 01000000 		.word	1
  41 0044 C0000000 		.word	192
  42 0048 80000000 		.word	128
  43 004c 41000000 		.word	65
  44 0050 00000000 		.word	0
  45 0054 C1000000 		.word	193
  46 0058 81000000 		.word	129
  47 005c 40000000 		.word	64
  48 0060 00000000 		.word	0
  49 0064 C1000000 		.word	193
  50 0068 81000000 		.word	129
  51 006c 40000000 		.word	64
  52 0070 01000000 		.word	1
  53 0074 C0000000 		.word	192
  54 0078 80000000 		.word	128
  55 007c 41000000 		.word	65
  56 0080 01000000 		.word	1
  57 0084 C0000000 		.word	192
  58 0088 80000000 		.word	128
  59 008c 41000000 		.word	65
  60 0090 00000000 		.word	0
  61 0094 C1000000 		.word	193
  62 0098 81000000 		.word	129
  63 009c 40000000 		.word	64
  64 00a0 00000000 		.word	0
  65 00a4 C1000000 		.word	193
  66 00a8 81000000 		.word	129
  67 00ac 40000000 		.word	64
  68 00b0 01000000 		.word	1
  69 00b4 C0000000 		.word	192
  70 00b8 80000000 		.word	128
  71 00bc 41000000 		.word	65
  72 00c0 00000000 		.word	0
  73 00c4 C1000000 		.word	193
  74 00c8 81000000 		.word	129
  75 00cc 40000000 		.word	64
  76 00d0 01000000 		.word	1
  77 00d4 C0000000 		.word	192
  78 00d8 80000000 		.word	128
  79 00dc 41000000 		.word	65
  80 00e0 01000000 		.word	1
  81 00e4 C0000000 		.word	192
  82 00e8 80000000 		.word	128
  83 00ec 41000000 		.word	65
  84 00f0 00000000 		.word	0
  85 00f4 C1000000 		.word	193
  86 00f8 81000000 		.word	129
  87 00fc 40000000 		.word	64
  88 0100 01000000 		.word	1
  89 0104 C0000000 		.word	192
  90 0108 80000000 		.word	128
  91 010c 41000000 		.word	65
  92 0110 00000000 		.word	0
  93 0114 C1000000 		.word	193
  94 0118 81000000 		.word	129
  95 011c 40000000 		.word	64
  96 0120 00000000 		.word	0
  97 0124 C1000000 		.word	193
  98 0128 81000000 		.word	129
  99 012c 40000000 		.word	64
 100 0130 01000000 		.word	1
 101 0134 C0000000 		.word	192
 102 0138 80000000 		.word	128
 103 013c 41000000 		.word	65
 104 0140 00000000 		.word	0
 105 0144 C1000000 		.word	193
 106 0148 81000000 		.word	129
 107 014c 40000000 		.word	64
 108 0150 01000000 		.word	1
 109 0154 C0000000 		.word	192
 110 0158 80000000 		.word	128
 111 015c 41000000 		.word	65
 112 0160 01000000 		.word	1
 113 0164 C0000000 		.word	192
 114 0168 80000000 		.word	128
 115 016c 41000000 		.word	65
 116 0170 00000000 		.word	0
 117 0174 C1000000 		.word	193
 118 0178 81000000 		.word	129
 119 017c 40000000 		.word	64
 120 0180 00000000 		.word	0
 121 0184 C1000000 		.word	193
 122 0188 81000000 		.word	129
 123 018c 40000000 		.word	64
 124 0190 01000000 		.word	1
 125 0194 C0000000 		.word	192
 126 0198 80000000 		.word	128
 127 019c 41000000 		.word	65
 128 01a0 01000000 		.word	1
 129 01a4 C0000000 		.word	192
 130 01a8 80000000 		.word	128
 131 01ac 41000000 		.word	65
 132 01b0 00000000 		.word	0
 133 01b4 C1000000 		.word	193
 134 01b8 81000000 		.word	129
 135 01bc 40000000 		.word	64
 136 01c0 01000000 		.word	1
 137 01c4 C0000000 		.word	192
 138 01c8 80000000 		.word	128
 139 01cc 41000000 		.word	65
 140 01d0 00000000 		.word	0
 141 01d4 C1000000 		.word	193
 142 01d8 81000000 		.word	129
 143 01dc 40000000 		.word	64
 144 01e0 00000000 		.word	0
 145 01e4 C1000000 		.word	193
 146 01e8 81000000 		.word	129
 147 01ec 40000000 		.word	64
 148 01f0 01000000 		.word	1
 149 01f4 C0000000 		.word	192
 150 01f8 80000000 		.word	128
 151 01fc 41000000 		.word	65
 152 0200 01000000 		.word	1
 153 0204 C0000000 		.word	192
 154 0208 80000000 		.word	128
 155 020c 41000000 		.word	65
 156 0210 00000000 		.word	0
 157 0214 C1000000 		.word	193
 158 0218 81000000 		.word	129
 159 021c 40000000 		.word	64
 160 0220 00000000 		.word	0
 161 0224 C1000000 		.word	193
 162 0228 81000000 		.word	129
 163 022c 40000000 		.word	64
 164 0230 01000000 		.word	1
 165 0234 C0000000 		.word	192
 166 0238 80000000 		.word	128
 167 023c 41000000 		.word	65
 168 0240 00000000 		.word	0
 169 0244 C1000000 		.word	193
 170 0248 81000000 		.word	129
 171 024c 40000000 		.word	64
 172 0250 01000000 		.word	1
 173 0254 C0000000 		.word	192
 174 0258 80000000 		.word	128
 175 025c 41000000 		.word	65
 176 0260 01000000 		.word	1
 177 0264 C0000000 		.word	192
 178 0268 80000000 		.word	128
 179 026c 41000000 		.word	65
 180 0270 00000000 		.word	0
 181 0274 C1000000 		.word	193
 182 0278 81000000 		.word	129
 183 027c 40000000 		.word	64
 184 0280 00000000 		.word	0
 185 0284 C1000000 		.word	193
 186 0288 81000000 		.word	129
 187 028c 40000000 		.word	64
 188 0290 01000000 		.word	1
 189 0294 C0000000 		.word	192
 190 0298 80000000 		.word	128
 191 029c 41000000 		.word	65
 192 02a0 01000000 		.word	1
 193 02a4 C0000000 		.word	192
 194 02a8 80000000 		.word	128
 195 02ac 41000000 		.word	65
 196 02b0 00000000 		.word	0
 197 02b4 C1000000 		.word	193
 198 02b8 81000000 		.word	129
 199 02bc 40000000 		.word	64
 200 02c0 01000000 		.word	1
 201 02c4 C0000000 		.word	192
 202 02c8 80000000 		.word	128
 203 02cc 41000000 		.word	65
 204 02d0 00000000 		.word	0
 205 02d4 C1000000 		.word	193
 206 02d8 81000000 		.word	129
 207 02dc 40000000 		.word	64
 208 02e0 00000000 		.word	0
 209 02e4 C1000000 		.word	193
 210 02e8 81000000 		.word	129
 211 02ec 40000000 		.word	64
 212 02f0 01000000 		.word	1
 213 02f4 C0000000 		.word	192
 214 02f8 80000000 		.word	128
 215 02fc 41000000 		.word	65
 216 0300 00000000 		.word	0
 217 0304 C1000000 		.word	193
 218 0308 81000000 		.word	129
 219 030c 40000000 		.word	64
 220 0310 01000000 		.word	1
 221 0314 C0000000 		.word	192
 222 0318 80000000 		.word	128
 223 031c 41000000 		.word	65
 224 0320 01000000 		.word	1
 225 0324 C0000000 		.word	192
 226 0328 80000000 		.word	128
 227 032c 41000000 		.word	65
 228 0330 00000000 		.word	0
 229 0334 C1000000 		.word	193
 230 0338 81000000 		.word	129
 231 033c 40000000 		.word	64
 232 0340 01000000 		.word	1
 233 0344 C0000000 		.word	192
 234 0348 80000000 		.word	128
 235 034c 41000000 		.word	65
 236 0350 00000000 		.word	0
 237 0354 C1000000 		.word	193
 238 0358 81000000 		.word	129
 239 035c 40000000 		.word	64
 240 0360 00000000 		.word	0
 241 0364 C1000000 		.word	193
 242 0368 81000000 		.word	129
 243 036c 40000000 		.word	64
 244 0370 01000000 		.word	1
 245 0374 C0000000 		.word	192
 246 0378 80000000 		.word	128
 247 037c 41000000 		.word	65
 248 0380 01000000 		.word	1
 249 0384 C0000000 		.word	192
 250 0388 80000000 		.word	128
 251 038c 41000000 		.word	65
 252 0390 00000000 		.word	0
 253 0394 C1000000 		.word	193
 254 0398 81000000 		.word	129
 255 039c 40000000 		.word	64
 256 03a0 00000000 		.word	0
 257 03a4 C1000000 		.word	193
 258 03a8 81000000 		.word	129
 259 03ac 40000000 		.word	64
 260 03b0 01000000 		.word	1
 261 03b4 C0000000 		.word	192
 262 03b8 80000000 		.word	128
 263 03bc 41000000 		.word	65
 264 03c0 00000000 		.word	0
 265 03c4 C1000000 		.word	193
 266 03c8 81000000 		.word	129
 267 03cc 40000000 		.word	64
 268 03d0 01000000 		.word	1
 269 03d4 C0000000 		.word	192
 270 03d8 80000000 		.word	128
 271 03dc 41000000 		.word	65
 272 03e0 01000000 		.word	1
 273 03e4 C0000000 		.word	192
 274 03e8 80000000 		.word	128
 275 03ec 41000000 		.word	65
 276 03f0 00000000 		.word	0
 277 03f4 C1000000 		.word	193
 278 03f8 81000000 		.word	129
 279 03fc 40000000 		.word	64
 280              		.section	.rodata.crcLo,"a",%progbits
 281              		.align	2
 284              	crcLo:
 285 0000 00000000 		.word	0
 286 0004 C0000000 		.word	192
 287 0008 C1000000 		.word	193
 288 000c 01000000 		.word	1
 289 0010 C3000000 		.word	195
 290 0014 03000000 		.word	3
 291 0018 02000000 		.word	2
 292 001c C2000000 		.word	194
 293 0020 C6000000 		.word	198
 294 0024 06000000 		.word	6
 295 0028 07000000 		.word	7
 296 002c C7000000 		.word	199
 297 0030 05000000 		.word	5
 298 0034 C5000000 		.word	197
 299 0038 C4000000 		.word	196
 300 003c 04000000 		.word	4
 301 0040 CC000000 		.word	204
 302 0044 0C000000 		.word	12
 303 0048 0D000000 		.word	13
 304 004c CD000000 		.word	205
 305 0050 0F000000 		.word	15
 306 0054 CF000000 		.word	207
 307 0058 CE000000 		.word	206
 308 005c 0E000000 		.word	14
 309 0060 0A000000 		.word	10
 310 0064 CA000000 		.word	202
 311 0068 CB000000 		.word	203
 312 006c 0B000000 		.word	11
 313 0070 C9000000 		.word	201
 314 0074 09000000 		.word	9
 315 0078 08000000 		.word	8
 316 007c C8000000 		.word	200
 317 0080 D8000000 		.word	216
 318 0084 18000000 		.word	24
 319 0088 19000000 		.word	25
 320 008c D9000000 		.word	217
 321 0090 1B000000 		.word	27
 322 0094 DB000000 		.word	219
 323 0098 DA000000 		.word	218
 324 009c 1A000000 		.word	26
 325 00a0 1E000000 		.word	30
 326 00a4 DE000000 		.word	222
 327 00a8 DF000000 		.word	223
 328 00ac 1F000000 		.word	31
 329 00b0 DD000000 		.word	221
 330 00b4 1D000000 		.word	29
 331 00b8 1C000000 		.word	28
 332 00bc DC000000 		.word	220
 333 00c0 14000000 		.word	20
 334 00c4 D4000000 		.word	212
 335 00c8 D5000000 		.word	213
 336 00cc 15000000 		.word	21
 337 00d0 D7000000 		.word	215
 338 00d4 17000000 		.word	23
 339 00d8 16000000 		.word	22
 340 00dc D6000000 		.word	214
 341 00e0 D2000000 		.word	210
 342 00e4 12000000 		.word	18
 343 00e8 13000000 		.word	19
 344 00ec D3000000 		.word	211
 345 00f0 11000000 		.word	17
 346 00f4 D1000000 		.word	209
 347 00f8 D0000000 		.word	208
 348 00fc 10000000 		.word	16
 349 0100 F0000000 		.word	240
 350 0104 30000000 		.word	48
 351 0108 31000000 		.word	49
 352 010c F1000000 		.word	241
 353 0110 33000000 		.word	51
 354 0114 F3000000 		.word	243
 355 0118 F2000000 		.word	242
 356 011c 32000000 		.word	50
 357 0120 36000000 		.word	54
 358 0124 F6000000 		.word	246
 359 0128 F7000000 		.word	247
 360 012c 37000000 		.word	55
 361 0130 F5000000 		.word	245
 362 0134 35000000 		.word	53
 363 0138 34000000 		.word	52
 364 013c F4000000 		.word	244
 365 0140 3C000000 		.word	60
 366 0144 FC000000 		.word	252
 367 0148 FD000000 		.word	253
 368 014c 3D000000 		.word	61
 369 0150 FF000000 		.word	255
 370 0154 3F000000 		.word	63
 371 0158 3E000000 		.word	62
 372 015c FE000000 		.word	254
 373 0160 FA000000 		.word	250
 374 0164 3A000000 		.word	58
 375 0168 3B000000 		.word	59
 376 016c FB000000 		.word	251
 377 0170 39000000 		.word	57
 378 0174 F9000000 		.word	249
 379 0178 F8000000 		.word	248
 380 017c 38000000 		.word	56
 381 0180 28000000 		.word	40
 382 0184 E8000000 		.word	232
 383 0188 E9000000 		.word	233
 384 018c 29000000 		.word	41
 385 0190 EB000000 		.word	235
 386 0194 2B000000 		.word	43
 387 0198 2A000000 		.word	42
 388 019c EA000000 		.word	234
 389 01a0 EE000000 		.word	238
 390 01a4 2E000000 		.word	46
 391 01a8 2F000000 		.word	47
 392 01ac EF000000 		.word	239
 393 01b0 2D000000 		.word	45
 394 01b4 ED000000 		.word	237
 395 01b8 EC000000 		.word	236
 396 01bc 2C000000 		.word	44
 397 01c0 E4000000 		.word	228
 398 01c4 24000000 		.word	36
 399 01c8 25000000 		.word	37
 400 01cc E5000000 		.word	229
 401 01d0 27000000 		.word	39
 402 01d4 E7000000 		.word	231
 403 01d8 E6000000 		.word	230
 404 01dc 26000000 		.word	38
 405 01e0 22000000 		.word	34
 406 01e4 E2000000 		.word	226
 407 01e8 E3000000 		.word	227
 408 01ec 23000000 		.word	35
 409 01f0 E1000000 		.word	225
 410 01f4 21000000 		.word	33
 411 01f8 20000000 		.word	32
 412 01fc E0000000 		.word	224
 413 0200 A0000000 		.word	160
 414 0204 60000000 		.word	96
 415 0208 61000000 		.word	97
 416 020c A1000000 		.word	161
 417 0210 63000000 		.word	99
 418 0214 A3000000 		.word	163
 419 0218 A2000000 		.word	162
 420 021c 62000000 		.word	98
 421 0220 66000000 		.word	102
 422 0224 A6000000 		.word	166
 423 0228 A7000000 		.word	167
 424 022c 67000000 		.word	103
 425 0230 A5000000 		.word	165
 426 0234 65000000 		.word	101
 427 0238 64000000 		.word	100
 428 023c A4000000 		.word	164
 429 0240 6C000000 		.word	108
 430 0244 AC000000 		.word	172
 431 0248 AD000000 		.word	173
 432 024c 6D000000 		.word	109
 433 0250 AF000000 		.word	175
 434 0254 6F000000 		.word	111
 435 0258 6E000000 		.word	110
 436 025c AE000000 		.word	174
 437 0260 AA000000 		.word	170
 438 0264 6A000000 		.word	106
 439 0268 6B000000 		.word	107
 440 026c AB000000 		.word	171
 441 0270 69000000 		.word	105
 442 0274 A9000000 		.word	169
 443 0278 A8000000 		.word	168
 444 027c 68000000 		.word	104
 445 0280 78000000 		.word	120
 446 0284 B8000000 		.word	184
 447 0288 B9000000 		.word	185
 448 028c 79000000 		.word	121
 449 0290 BB000000 		.word	187
 450 0294 7B000000 		.word	123
 451 0298 7A000000 		.word	122
 452 029c BA000000 		.word	186
 453 02a0 BE000000 		.word	190
 454 02a4 7E000000 		.word	126
 455 02a8 7F000000 		.word	127
 456 02ac BF000000 		.word	191
 457 02b0 7D000000 		.word	125
 458 02b4 BD000000 		.word	189
 459 02b8 BC000000 		.word	188
 460 02bc 7C000000 		.word	124
 461 02c0 B4000000 		.word	180
 462 02c4 74000000 		.word	116
 463 02c8 75000000 		.word	117
 464 02cc B5000000 		.word	181
 465 02d0 77000000 		.word	119
 466 02d4 B7000000 		.word	183
 467 02d8 B6000000 		.word	182
 468 02dc 76000000 		.word	118
 469 02e0 72000000 		.word	114
 470 02e4 B2000000 		.word	178
 471 02e8 B3000000 		.word	179
 472 02ec 73000000 		.word	115
 473 02f0 B1000000 		.word	177
 474 02f4 71000000 		.word	113
 475 02f8 70000000 		.word	112
 476 02fc B0000000 		.word	176
 477 0300 50000000 		.word	80
 478 0304 90000000 		.word	144
 479 0308 91000000 		.word	145
 480 030c 51000000 		.word	81
 481 0310 93000000 		.word	147
 482 0314 53000000 		.word	83
 483 0318 52000000 		.word	82
 484 031c 92000000 		.word	146
 485 0320 96000000 		.word	150
 486 0324 56000000 		.word	86
 487 0328 57000000 		.word	87
 488 032c 97000000 		.word	151
 489 0330 55000000 		.word	85
 490 0334 95000000 		.word	149
 491 0338 94000000 		.word	148
 492 033c 54000000 		.word	84
 493 0340 9C000000 		.word	156
 494 0344 5C000000 		.word	92
 495 0348 5D000000 		.word	93
 496 034c 9D000000 		.word	157
 497 0350 5F000000 		.word	95
 498 0354 9F000000 		.word	159
 499 0358 9E000000 		.word	158
 500 035c 5E000000 		.word	94
 501 0360 5A000000 		.word	90
 502 0364 9A000000 		.word	154
 503 0368 9B000000 		.word	155
 504 036c 5B000000 		.word	91
 505 0370 99000000 		.word	153
 506 0374 59000000 		.word	89
 507 0378 58000000 		.word	88
 508 037c 98000000 		.word	152
 509 0380 88000000 		.word	136
 510 0384 48000000 		.word	72
 511 0388 49000000 		.word	73
 512 038c 89000000 		.word	137
 513 0390 4B000000 		.word	75
 514 0394 8B000000 		.word	139
 515 0398 8A000000 		.word	138
 516 039c 4A000000 		.word	74
 517 03a0 4E000000 		.word	78
 518 03a4 8E000000 		.word	142
 519 03a8 8F000000 		.word	143
 520 03ac 4F000000 		.word	79
 521 03b0 8D000000 		.word	141
 522 03b4 4D000000 		.word	77
 523 03b8 4C000000 		.word	76
 524 03bc 8C000000 		.word	140
 525 03c0 44000000 		.word	68
 526 03c4 84000000 		.word	132
 527 03c8 85000000 		.word	133
 528 03cc 45000000 		.word	69
 529 03d0 87000000 		.word	135
 530 03d4 47000000 		.word	71
 531 03d8 46000000 		.word	70
 532 03dc 86000000 		.word	134
 533 03e0 82000000 		.word	130
 534 03e4 42000000 		.word	66
 535 03e8 43000000 		.word	67
 536 03ec 83000000 		.word	131
 537 03f0 41000000 		.word	65
 538 03f4 81000000 		.word	129
 539 03f8 80000000 		.word	128
 540 03fc 40000000 		.word	64
 541              		.global	firstRequest
 542              		.section	.bss.firstRequest,"aw",%nobits
 543              		.align	2
 546              	firstRequest:
 547 0000 00000000 		.space	4
 548              		.global	totalRequest
 549              		.section	.bss.totalRequest,"aw",%nobits
 550              		.align	2
 553              	totalRequest:
 554 0000 00000000 		.space	4
 555              		.global	writeRequest
 556              		.section	.bss.writeRequest,"aw",%nobits
 557              		.align	2
 560              	writeRequest:
 561 0000 00000000 		.space	4
 562              		.global	arrayResponsePacket
 563              		.section	.bss.arrayResponsePacket,"aw",%nobits
 564              		.align	2
 567              	arrayResponsePacket:
 568 0000 00000000 		.space	200
 568      00000000 
 568      00000000 
 568      00000000 
 568      00000000 
 569              		.global	rPacket
 570              		.section	.data.rPacket,"aw",%progbits
 571              		.align	2
 574              	rPacket:
 575 0000 00000000 		.word	arrayResponsePacket
 576              		.global	users
 577              		.section	.bss.users,"aw",%nobits
 578              		.align	2
 581              	users:
 582 0000 00000000 		.space	4
 583              		.comm	s,4,4
 584              		.section	.text.addData,"ax",%progbits
 585              		.align	2
 586              		.global	addData
 587              		.thumb
 588              		.thumb_func
 590              	addData:
 591              	.LFB0:
 592              		.file 1 "src/modbus.c"
   1:src/modbus.c  **** /*
   2:src/modbus.c  ****  * modbus.h
   3:src/modbus.c  ****  *
   4:src/modbus.c  ****  *  Created on: 29-Nov-2012
   5:src/modbus.c  ****  *  Author: chetanpatil
   6:src/modbus.c  ****  */
   7:src/modbus.c  **** 
   8:src/modbus.c  **** #include "modbus.h"
   9:src/modbus.c  **** 
  10:src/modbus.c  **** uint32_t firstRequest = 0;
  11:src/modbus.c  **** uint32_t totalRequest = 0;
  12:src/modbus.c  **** uint32_t writeRequest = 0;
  13:src/modbus.c  **** 
  14:src/modbus.c  **** // Creating packet to send the data back to Master as requested
  15:src/modbus.c  **** uint32_t arrayResponsePacket[50] = { 0 };
  16:src/modbus.c  **** uint32_t *rPacket = arrayResponsePacket;
  17:src/modbus.c  **** 
  18:src/modbus.c  **** // HASHMAP : Using uthash.h
  19:src/modbus.c  **** struct heapStruct *users = NULL;
  20:src/modbus.c  **** struct heapStruct *s;
  21:src/modbus.c  **** 
  22:src/modbus.c  **** //Add the data in HASH MAP
  23:src/modbus.c  **** void addData(uint32_t keyID, uint32_t *keyValue) {
 593              		.loc 1 23 0
 594              		.cfi_startproc
 595              		@ args = 0, pretend = 0, frame = 80
 596              		@ frame_needed = 1, uses_anonymous_args = 0
 597 0000 90B5     		push	{r4, r7, lr}
 598              	.LCFI0:
 599              		.cfi_def_cfa_offset 12
 600              		.cfi_offset 4, -12
 601              		.cfi_offset 7, -8
 602              		.cfi_offset 14, -4
 603 0002 95B0     		sub	sp, sp, #84
 604              	.LCFI1:
 605              		.cfi_def_cfa_offset 96
 606 0004 00AF     		add	r7, sp, #0
 607              	.LCFI2:
 608              		.cfi_def_cfa_register 7
 609 0006 7860     		str	r0, [r7, #4]
 610 0008 3960     		str	r1, [r7]
 611              	.LBB2:
  24:src/modbus.c  **** 	struct heapStruct *s;
  25:src/modbus.c  **** 
  26:src/modbus.c  **** 	HASH_FIND_INT(users, &keyID, s);
 612              		.loc 1 26 0
 613 000a 0023     		movs	r3, #0
 614 000c FB64     		str	r3, [r7, #76]
 615 000e 784B     		ldr	r3, .L56
 616 0010 1B68     		ldr	r3, [r3]
 617 0012 002B     		cmp	r3, #0
 618 0014 00F0FF81 		beq	.L2
 619              	.LBB3:
 620              		.loc 1 26 0 is_stmt 0 discriminator 1
 621 0018 3B1D     		adds	r3, r7, #4
 622 001a BB63     		str	r3, [r7, #56]
 623 001c 754B     		ldr	r3, .L56+4
 624 001e BB64     		str	r3, [r7, #72]
 625 0020 754B     		ldr	r3, .L56+8
 626 0022 3B64     		str	r3, [r7, #64]
 627 0024 3B6C     		ldr	r3, [r7, #64]
 628 0026 7B64     		str	r3, [r7, #68]
 629 0028 0423     		movs	r3, #4
 630 002a FB63     		str	r3, [r7, #60]
 631 002c BBE0     		b	.L3
 632              	.L4:
 633              		.loc 1 26 0 discriminator 2
 634 002e BB6B     		ldr	r3, [r7, #56]
 635 0030 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 636 0032 1A46     		mov	r2, r3
 637 0034 BB6B     		ldr	r3, [r7, #56]
 638 0036 0133     		adds	r3, r3, #1
 639 0038 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 640 003a 1B02     		lsls	r3, r3, #8
 641 003c 1A44     		add	r2, r2, r3
 642 003e BB6B     		ldr	r3, [r7, #56]
 643 0040 0233     		adds	r3, r3, #2
 644 0042 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 645 0044 1B04     		lsls	r3, r3, #16
 646 0046 1A44     		add	r2, r2, r3
 647 0048 BB6B     		ldr	r3, [r7, #56]
 648 004a 0333     		adds	r3, r3, #3
 649 004c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 650 004e 1B06     		lsls	r3, r3, #24
 651 0050 1344     		add	r3, r3, r2
 652 0052 7A6C     		ldr	r2, [r7, #68]
 653 0054 1344     		add	r3, r3, r2
 654 0056 7B64     		str	r3, [r7, #68]
 655 0058 BB6B     		ldr	r3, [r7, #56]
 656 005a 0433     		adds	r3, r3, #4
 657 005c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 658 005e 1A46     		mov	r2, r3
 659 0060 BB6B     		ldr	r3, [r7, #56]
 660 0062 0533     		adds	r3, r3, #5
 661 0064 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 662 0066 1B02     		lsls	r3, r3, #8
 663 0068 1A44     		add	r2, r2, r3
 664 006a BB6B     		ldr	r3, [r7, #56]
 665 006c 0633     		adds	r3, r3, #6
 666 006e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 667 0070 1B04     		lsls	r3, r3, #16
 668 0072 1A44     		add	r2, r2, r3
 669 0074 BB6B     		ldr	r3, [r7, #56]
 670 0076 0733     		adds	r3, r3, #7
 671 0078 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 672 007a 1B06     		lsls	r3, r3, #24
 673 007c 1344     		add	r3, r3, r2
 674 007e 3A6C     		ldr	r2, [r7, #64]
 675 0080 1344     		add	r3, r3, r2
 676 0082 3B64     		str	r3, [r7, #64]
 677 0084 BB6B     		ldr	r3, [r7, #56]
 678 0086 0833     		adds	r3, r3, #8
 679 0088 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 680 008a 1A46     		mov	r2, r3
 681 008c BB6B     		ldr	r3, [r7, #56]
 682 008e 0933     		adds	r3, r3, #9
 683 0090 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 684 0092 1B02     		lsls	r3, r3, #8
 685 0094 1A44     		add	r2, r2, r3
 686 0096 BB6B     		ldr	r3, [r7, #56]
 687 0098 0A33     		adds	r3, r3, #10
 688 009a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 689 009c 1B04     		lsls	r3, r3, #16
 690 009e 1A44     		add	r2, r2, r3
 691 00a0 BB6B     		ldr	r3, [r7, #56]
 692 00a2 0B33     		adds	r3, r3, #11
 693 00a4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 694 00a6 1B06     		lsls	r3, r3, #24
 695 00a8 1344     		add	r3, r3, r2
 696 00aa BA6C     		ldr	r2, [r7, #72]
 697 00ac 1344     		add	r3, r3, r2
 698 00ae BB64     		str	r3, [r7, #72]
 699 00b0 7A6C     		ldr	r2, [r7, #68]
 700 00b2 3B6C     		ldr	r3, [r7, #64]
 701 00b4 D31A     		subs	r3, r2, r3
 702 00b6 7B64     		str	r3, [r7, #68]
 703 00b8 7A6C     		ldr	r2, [r7, #68]
 704 00ba BB6C     		ldr	r3, [r7, #72]
 705 00bc D31A     		subs	r3, r2, r3
 706 00be 7B64     		str	r3, [r7, #68]
 707 00c0 BB6C     		ldr	r3, [r7, #72]
 708 00c2 5B0B     		lsrs	r3, r3, #13
 709 00c4 7A6C     		ldr	r2, [r7, #68]
 710 00c6 5340     		eors	r3, r3, r2
 711 00c8 7B64     		str	r3, [r7, #68]
 712 00ca 3A6C     		ldr	r2, [r7, #64]
 713 00cc BB6C     		ldr	r3, [r7, #72]
 714 00ce D31A     		subs	r3, r2, r3
 715 00d0 3B64     		str	r3, [r7, #64]
 716 00d2 3A6C     		ldr	r2, [r7, #64]
 717 00d4 7B6C     		ldr	r3, [r7, #68]
 718 00d6 D31A     		subs	r3, r2, r3
 719 00d8 3B64     		str	r3, [r7, #64]
 720 00da 7B6C     		ldr	r3, [r7, #68]
 721 00dc 1B02     		lsls	r3, r3, #8
 722 00de 3A6C     		ldr	r2, [r7, #64]
 723 00e0 5340     		eors	r3, r3, r2
 724 00e2 3B64     		str	r3, [r7, #64]
 725 00e4 BA6C     		ldr	r2, [r7, #72]
 726 00e6 7B6C     		ldr	r3, [r7, #68]
 727 00e8 D31A     		subs	r3, r2, r3
 728 00ea BB64     		str	r3, [r7, #72]
 729 00ec BA6C     		ldr	r2, [r7, #72]
 730 00ee 3B6C     		ldr	r3, [r7, #64]
 731 00f0 D31A     		subs	r3, r2, r3
 732 00f2 BB64     		str	r3, [r7, #72]
 733 00f4 3B6C     		ldr	r3, [r7, #64]
 734 00f6 5B0B     		lsrs	r3, r3, #13
 735 00f8 BA6C     		ldr	r2, [r7, #72]
 736 00fa 5340     		eors	r3, r3, r2
 737 00fc BB64     		str	r3, [r7, #72]
 738 00fe 7A6C     		ldr	r2, [r7, #68]
 739 0100 3B6C     		ldr	r3, [r7, #64]
 740 0102 D31A     		subs	r3, r2, r3
 741 0104 7B64     		str	r3, [r7, #68]
 742 0106 7A6C     		ldr	r2, [r7, #68]
 743 0108 BB6C     		ldr	r3, [r7, #72]
 744 010a D31A     		subs	r3, r2, r3
 745 010c 7B64     		str	r3, [r7, #68]
 746 010e BB6C     		ldr	r3, [r7, #72]
 747 0110 1B0B     		lsrs	r3, r3, #12
 748 0112 7A6C     		ldr	r2, [r7, #68]
 749 0114 5340     		eors	r3, r3, r2
 750 0116 7B64     		str	r3, [r7, #68]
 751 0118 3A6C     		ldr	r2, [r7, #64]
 752 011a BB6C     		ldr	r3, [r7, #72]
 753 011c D31A     		subs	r3, r2, r3
 754 011e 3B64     		str	r3, [r7, #64]
 755 0120 3A6C     		ldr	r2, [r7, #64]
 756 0122 7B6C     		ldr	r3, [r7, #68]
 757 0124 D31A     		subs	r3, r2, r3
 758 0126 3B64     		str	r3, [r7, #64]
 759 0128 7B6C     		ldr	r3, [r7, #68]
 760 012a 1B04     		lsls	r3, r3, #16
 761 012c 3A6C     		ldr	r2, [r7, #64]
 762 012e 5340     		eors	r3, r3, r2
 763 0130 3B64     		str	r3, [r7, #64]
 764 0132 BA6C     		ldr	r2, [r7, #72]
 765 0134 7B6C     		ldr	r3, [r7, #68]
 766 0136 D31A     		subs	r3, r2, r3
 767 0138 BB64     		str	r3, [r7, #72]
 768 013a BA6C     		ldr	r2, [r7, #72]
 769 013c 3B6C     		ldr	r3, [r7, #64]
 770 013e D31A     		subs	r3, r2, r3
 771 0140 BB64     		str	r3, [r7, #72]
 772 0142 3B6C     		ldr	r3, [r7, #64]
 773 0144 5B09     		lsrs	r3, r3, #5
 774 0146 BA6C     		ldr	r2, [r7, #72]
 775 0148 5340     		eors	r3, r3, r2
 776 014a BB64     		str	r3, [r7, #72]
 777 014c 7A6C     		ldr	r2, [r7, #68]
 778 014e 3B6C     		ldr	r3, [r7, #64]
 779 0150 D31A     		subs	r3, r2, r3
 780 0152 7B64     		str	r3, [r7, #68]
 781 0154 7A6C     		ldr	r2, [r7, #68]
 782 0156 BB6C     		ldr	r3, [r7, #72]
 783 0158 D31A     		subs	r3, r2, r3
 784 015a 7B64     		str	r3, [r7, #68]
 785 015c BB6C     		ldr	r3, [r7, #72]
 786 015e DB08     		lsrs	r3, r3, #3
 787 0160 7A6C     		ldr	r2, [r7, #68]
 788 0162 5340     		eors	r3, r3, r2
 789 0164 7B64     		str	r3, [r7, #68]
 790 0166 3A6C     		ldr	r2, [r7, #64]
 791 0168 BB6C     		ldr	r3, [r7, #72]
 792 016a D31A     		subs	r3, r2, r3
 793 016c 3B64     		str	r3, [r7, #64]
 794 016e 3A6C     		ldr	r2, [r7, #64]
 795 0170 7B6C     		ldr	r3, [r7, #68]
 796 0172 D31A     		subs	r3, r2, r3
 797 0174 3B64     		str	r3, [r7, #64]
 798 0176 7B6C     		ldr	r3, [r7, #68]
 799 0178 9B02     		lsls	r3, r3, #10
 800 017a 3A6C     		ldr	r2, [r7, #64]
 801 017c 5340     		eors	r3, r3, r2
 802 017e 3B64     		str	r3, [r7, #64]
 803 0180 BA6C     		ldr	r2, [r7, #72]
 804 0182 7B6C     		ldr	r3, [r7, #68]
 805 0184 D31A     		subs	r3, r2, r3
 806 0186 BB64     		str	r3, [r7, #72]
 807 0188 BA6C     		ldr	r2, [r7, #72]
 808 018a 3B6C     		ldr	r3, [r7, #64]
 809 018c D31A     		subs	r3, r2, r3
 810 018e BB64     		str	r3, [r7, #72]
 811 0190 3B6C     		ldr	r3, [r7, #64]
 812 0192 DB0B     		lsrs	r3, r3, #15
 813 0194 BA6C     		ldr	r2, [r7, #72]
 814 0196 5340     		eors	r3, r3, r2
 815 0198 BB64     		str	r3, [r7, #72]
 816 019a BB6B     		ldr	r3, [r7, #56]
 817 019c 0C33     		adds	r3, r3, #12
 818 019e BB63     		str	r3, [r7, #56]
 819 01a0 FB6B     		ldr	r3, [r7, #60]
 820 01a2 0C3B     		subs	r3, r3, #12
 821 01a4 FB63     		str	r3, [r7, #60]
 822              	.L3:
 823              		.loc 1 26 0 discriminator 1
 824 01a6 FB6B     		ldr	r3, [r7, #60]
 825 01a8 0B2B     		cmp	r3, #11
 826 01aa 3FF640AF 		bhi	.L4
 827              		.loc 1 26 0 discriminator 3
 828 01ae BB6C     		ldr	r3, [r7, #72]
 829 01b0 0433     		adds	r3, r3, #4
 830 01b2 BB64     		str	r3, [r7, #72]
 831 01b4 FB6B     		ldr	r3, [r7, #60]
 832 01b6 013B     		subs	r3, r3, #1
 833 01b8 0A2B     		cmp	r3, #10
 834 01ba 69D8     		bhi	.L5
 835 01bc 01A2     		adr	r2, .L7
 836 01be 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 837 01c2 00BF     		.p2align 2
 838              	.L7:
 839 01c4 87020000 		.word	.L6+1
 840 01c8 79020000 		.word	.L8+1
 841 01cc 6B020000 		.word	.L9+1
 842 01d0 5D020000 		.word	.L10+1
 843 01d4 51020000 		.word	.L11+1
 844 01d8 43020000 		.word	.L12+1
 845 01dc 35020000 		.word	.L13+1
 846 01e0 27020000 		.word	.L14+1
 847 01e4 19020000 		.word	.L15+1
 848 01e8 0B020000 		.word	.L16+1
 849 01ec FD010000 		.word	.L17+1
 850              	.L57:
 851              		.align	2
 852              	.L56:
 853 01f0 00000000 		.word	users
 854 01f4 EFBEEDFE 		.word	-17973521
 855 01f8 B979379E 		.word	-1640531527
 856              	.L17:
 857              		.loc 1 26 0 discriminator 12
 858 01fc BB6B     		ldr	r3, [r7, #56]
 859 01fe 0A33     		adds	r3, r3, #10
 860 0200 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 861 0202 1B06     		lsls	r3, r3, #24
 862 0204 BA6C     		ldr	r2, [r7, #72]
 863 0206 1344     		add	r3, r3, r2
 864 0208 BB64     		str	r3, [r7, #72]
 865              	.L16:
 866              		.loc 1 26 0 discriminator 11
 867 020a BB6B     		ldr	r3, [r7, #56]
 868 020c 0933     		adds	r3, r3, #9
 869 020e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 870 0210 1B04     		lsls	r3, r3, #16
 871 0212 BA6C     		ldr	r2, [r7, #72]
 872 0214 1344     		add	r3, r3, r2
 873 0216 BB64     		str	r3, [r7, #72]
 874              	.L15:
 875              		.loc 1 26 0 discriminator 10
 876 0218 BB6B     		ldr	r3, [r7, #56]
 877 021a 0833     		adds	r3, r3, #8
 878 021c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 879 021e 1B02     		lsls	r3, r3, #8
 880 0220 BA6C     		ldr	r2, [r7, #72]
 881 0222 1344     		add	r3, r3, r2
 882 0224 BB64     		str	r3, [r7, #72]
 883              	.L14:
 884              		.loc 1 26 0 discriminator 9
 885 0226 BB6B     		ldr	r3, [r7, #56]
 886 0228 0733     		adds	r3, r3, #7
 887 022a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 888 022c 1B06     		lsls	r3, r3, #24
 889 022e 3A6C     		ldr	r2, [r7, #64]
 890 0230 1344     		add	r3, r3, r2
 891 0232 3B64     		str	r3, [r7, #64]
 892              	.L13:
 893              		.loc 1 26 0 discriminator 8
 894 0234 BB6B     		ldr	r3, [r7, #56]
 895 0236 0633     		adds	r3, r3, #6
 896 0238 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 897 023a 1B04     		lsls	r3, r3, #16
 898 023c 3A6C     		ldr	r2, [r7, #64]
 899 023e 1344     		add	r3, r3, r2
 900 0240 3B64     		str	r3, [r7, #64]
 901              	.L12:
 902              		.loc 1 26 0 discriminator 7
 903 0242 BB6B     		ldr	r3, [r7, #56]
 904 0244 0533     		adds	r3, r3, #5
 905 0246 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 906 0248 1B02     		lsls	r3, r3, #8
 907 024a 3A6C     		ldr	r2, [r7, #64]
 908 024c 1344     		add	r3, r3, r2
 909 024e 3B64     		str	r3, [r7, #64]
 910              	.L11:
 911              		.loc 1 26 0 discriminator 6
 912 0250 BB6B     		ldr	r3, [r7, #56]
 913 0252 0433     		adds	r3, r3, #4
 914 0254 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 915 0256 3A6C     		ldr	r2, [r7, #64]
 916 0258 1344     		add	r3, r3, r2
 917 025a 3B64     		str	r3, [r7, #64]
 918              	.L10:
 919              		.loc 1 26 0 discriminator 5
 920 025c BB6B     		ldr	r3, [r7, #56]
 921 025e 0333     		adds	r3, r3, #3
 922 0260 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 923 0262 1B06     		lsls	r3, r3, #24
 924 0264 7A6C     		ldr	r2, [r7, #68]
 925 0266 1344     		add	r3, r3, r2
 926 0268 7B64     		str	r3, [r7, #68]
 927              	.L9:
 928              		.loc 1 26 0 discriminator 4
 929 026a BB6B     		ldr	r3, [r7, #56]
 930 026c 0233     		adds	r3, r3, #2
 931 026e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 932 0270 1B04     		lsls	r3, r3, #16
 933 0272 7A6C     		ldr	r2, [r7, #68]
 934 0274 1344     		add	r3, r3, r2
 935 0276 7B64     		str	r3, [r7, #68]
 936              	.L8:
 937              		.loc 1 26 0 discriminator 3
 938 0278 BB6B     		ldr	r3, [r7, #56]
 939 027a 0133     		adds	r3, r3, #1
 940 027c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 941 027e 1B02     		lsls	r3, r3, #8
 942 0280 7A6C     		ldr	r2, [r7, #68]
 943 0282 1344     		add	r3, r3, r2
 944 0284 7B64     		str	r3, [r7, #68]
 945              	.L6:
 946              		.loc 1 26 0 discriminator 2
 947 0286 BB6B     		ldr	r3, [r7, #56]
 948 0288 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 949 028a 7A6C     		ldr	r2, [r7, #68]
 950 028c 1344     		add	r3, r3, r2
 951 028e 7B64     		str	r3, [r7, #68]
 952              	.L5:
 953              		.loc 1 26 0 discriminator 1
 954 0290 7A6C     		ldr	r2, [r7, #68]
 955 0292 3B6C     		ldr	r3, [r7, #64]
 956 0294 D31A     		subs	r3, r2, r3
 957 0296 7B64     		str	r3, [r7, #68]
 958 0298 7A6C     		ldr	r2, [r7, #68]
 959 029a BB6C     		ldr	r3, [r7, #72]
 960 029c D31A     		subs	r3, r2, r3
 961 029e 7B64     		str	r3, [r7, #68]
 962 02a0 BB6C     		ldr	r3, [r7, #72]
 963 02a2 5B0B     		lsrs	r3, r3, #13
 964 02a4 7A6C     		ldr	r2, [r7, #68]
 965 02a6 5340     		eors	r3, r3, r2
 966 02a8 7B64     		str	r3, [r7, #68]
 967 02aa 3A6C     		ldr	r2, [r7, #64]
 968 02ac BB6C     		ldr	r3, [r7, #72]
 969 02ae D31A     		subs	r3, r2, r3
 970 02b0 3B64     		str	r3, [r7, #64]
 971 02b2 3A6C     		ldr	r2, [r7, #64]
 972 02b4 7B6C     		ldr	r3, [r7, #68]
 973 02b6 D31A     		subs	r3, r2, r3
 974 02b8 3B64     		str	r3, [r7, #64]
 975 02ba 7B6C     		ldr	r3, [r7, #68]
 976 02bc 1B02     		lsls	r3, r3, #8
 977 02be 3A6C     		ldr	r2, [r7, #64]
 978 02c0 5340     		eors	r3, r3, r2
 979 02c2 3B64     		str	r3, [r7, #64]
 980 02c4 BA6C     		ldr	r2, [r7, #72]
 981 02c6 7B6C     		ldr	r3, [r7, #68]
 982 02c8 D31A     		subs	r3, r2, r3
 983 02ca BB64     		str	r3, [r7, #72]
 984 02cc BA6C     		ldr	r2, [r7, #72]
 985 02ce 3B6C     		ldr	r3, [r7, #64]
 986 02d0 D31A     		subs	r3, r2, r3
 987 02d2 BB64     		str	r3, [r7, #72]
 988 02d4 3B6C     		ldr	r3, [r7, #64]
 989 02d6 5B0B     		lsrs	r3, r3, #13
 990 02d8 BA6C     		ldr	r2, [r7, #72]
 991 02da 5340     		eors	r3, r3, r2
 992 02dc BB64     		str	r3, [r7, #72]
 993 02de 7A6C     		ldr	r2, [r7, #68]
 994 02e0 3B6C     		ldr	r3, [r7, #64]
 995 02e2 D31A     		subs	r3, r2, r3
 996 02e4 7B64     		str	r3, [r7, #68]
 997 02e6 7A6C     		ldr	r2, [r7, #68]
 998 02e8 BB6C     		ldr	r3, [r7, #72]
 999 02ea D31A     		subs	r3, r2, r3
 1000 02ec 7B64     		str	r3, [r7, #68]
 1001 02ee BB6C     		ldr	r3, [r7, #72]
 1002 02f0 1B0B     		lsrs	r3, r3, #12
 1003 02f2 7A6C     		ldr	r2, [r7, #68]
 1004 02f4 5340     		eors	r3, r3, r2
 1005 02f6 7B64     		str	r3, [r7, #68]
 1006 02f8 3A6C     		ldr	r2, [r7, #64]
 1007 02fa BB6C     		ldr	r3, [r7, #72]
 1008 02fc D31A     		subs	r3, r2, r3
 1009 02fe 3B64     		str	r3, [r7, #64]
 1010 0300 3A6C     		ldr	r2, [r7, #64]
 1011 0302 7B6C     		ldr	r3, [r7, #68]
 1012 0304 D31A     		subs	r3, r2, r3
 1013 0306 3B64     		str	r3, [r7, #64]
 1014 0308 7B6C     		ldr	r3, [r7, #68]
 1015 030a 1B04     		lsls	r3, r3, #16
 1016 030c 3A6C     		ldr	r2, [r7, #64]
 1017 030e 5340     		eors	r3, r3, r2
 1018 0310 3B64     		str	r3, [r7, #64]
 1019 0312 BA6C     		ldr	r2, [r7, #72]
 1020 0314 7B6C     		ldr	r3, [r7, #68]
 1021 0316 D31A     		subs	r3, r2, r3
 1022 0318 BB64     		str	r3, [r7, #72]
 1023 031a BA6C     		ldr	r2, [r7, #72]
 1024 031c 3B6C     		ldr	r3, [r7, #64]
 1025 031e D31A     		subs	r3, r2, r3
 1026 0320 BB64     		str	r3, [r7, #72]
 1027 0322 3B6C     		ldr	r3, [r7, #64]
 1028 0324 5B09     		lsrs	r3, r3, #5
 1029 0326 BA6C     		ldr	r2, [r7, #72]
 1030 0328 5340     		eors	r3, r3, r2
 1031 032a BB64     		str	r3, [r7, #72]
 1032 032c 7A6C     		ldr	r2, [r7, #68]
 1033 032e 3B6C     		ldr	r3, [r7, #64]
 1034 0330 D31A     		subs	r3, r2, r3
 1035 0332 7B64     		str	r3, [r7, #68]
 1036 0334 7A6C     		ldr	r2, [r7, #68]
 1037 0336 BB6C     		ldr	r3, [r7, #72]
 1038 0338 D31A     		subs	r3, r2, r3
 1039 033a 7B64     		str	r3, [r7, #68]
 1040 033c BB6C     		ldr	r3, [r7, #72]
 1041 033e DB08     		lsrs	r3, r3, #3
 1042 0340 7A6C     		ldr	r2, [r7, #68]
 1043 0342 5340     		eors	r3, r3, r2
 1044 0344 7B64     		str	r3, [r7, #68]
 1045 0346 3A6C     		ldr	r2, [r7, #64]
 1046 0348 BB6C     		ldr	r3, [r7, #72]
 1047 034a D31A     		subs	r3, r2, r3
 1048 034c 3B64     		str	r3, [r7, #64]
 1049 034e 3A6C     		ldr	r2, [r7, #64]
 1050 0350 7B6C     		ldr	r3, [r7, #68]
 1051 0352 D31A     		subs	r3, r2, r3
 1052 0354 3B64     		str	r3, [r7, #64]
 1053 0356 7B6C     		ldr	r3, [r7, #68]
 1054 0358 9B02     		lsls	r3, r3, #10
 1055 035a 3A6C     		ldr	r2, [r7, #64]
 1056 035c 5340     		eors	r3, r3, r2
 1057 035e 3B64     		str	r3, [r7, #64]
 1058 0360 BA6C     		ldr	r2, [r7, #72]
 1059 0362 7B6C     		ldr	r3, [r7, #68]
 1060 0364 D31A     		subs	r3, r2, r3
 1061 0366 BB64     		str	r3, [r7, #72]
 1062 0368 BA6C     		ldr	r2, [r7, #72]
 1063 036a 3B6C     		ldr	r3, [r7, #64]
 1064 036c D31A     		subs	r3, r2, r3
 1065 036e BB64     		str	r3, [r7, #72]
 1066 0370 3B6C     		ldr	r3, [r7, #64]
 1067 0372 DB0B     		lsrs	r3, r3, #15
 1068 0374 BA6C     		ldr	r2, [r7, #72]
 1069 0376 5340     		eors	r3, r3, r2
 1070 0378 BB64     		str	r3, [r7, #72]
 1071 037a 774B     		ldr	r3, .L58
 1072 037c 1B68     		ldr	r3, [r3]
 1073 037e 9B68     		ldr	r3, [r3, #8]
 1074 0380 5B68     		ldr	r3, [r3, #4]
 1075 0382 5A1E     		subs	r2, r3, #1
 1076 0384 BB6C     		ldr	r3, [r7, #72]
 1077 0386 1340     		ands	r3, r3, r2
 1078 0388 FB61     		str	r3, [r7, #28]
 1079              	.LBE3:
 1080 038a 734B     		ldr	r3, .L58
 1081 038c 1B68     		ldr	r3, [r3]
 1082 038e 9B68     		ldr	r3, [r3, #8]
 1083 0390 1968     		ldr	r1, [r3]
 1084 0392 FA69     		ldr	r2, [r7, #28]
 1085 0394 1346     		mov	r3, r2
 1086 0396 5B00     		lsls	r3, r3, #1
 1087 0398 1344     		add	r3, r3, r2
 1088 039a 9B00     		lsls	r3, r3, #2
 1089 039c 0B44     		add	r3, r3, r1
 1090 039e 1B68     		ldr	r3, [r3]
 1091 03a0 002B     		cmp	r3, #0
 1092 03a2 12D0     		beq	.L18
 1093 03a4 6C4B     		ldr	r3, .L58
 1094 03a6 1B68     		ldr	r3, [r3]
 1095 03a8 9B68     		ldr	r3, [r3, #8]
 1096 03aa 1968     		ldr	r1, [r3]
 1097 03ac FA69     		ldr	r2, [r7, #28]
 1098 03ae 1346     		mov	r3, r2
 1099 03b0 5B00     		lsls	r3, r3, #1
 1100 03b2 1344     		add	r3, r3, r2
 1101 03b4 9B00     		lsls	r3, r3, #2
 1102 03b6 0B44     		add	r3, r3, r1
 1103 03b8 1A68     		ldr	r2, [r3]
 1104 03ba 674B     		ldr	r3, .L58
 1105 03bc 1B68     		ldr	r3, [r3]
 1106 03be 9B68     		ldr	r3, [r3, #8]
 1107 03c0 5B69     		ldr	r3, [r3, #20]
 1108 03c2 5B42     		negs	r3, r3
 1109 03c4 1344     		add	r3, r3, r2
 1110 03c6 FB64     		str	r3, [r7, #76]
 1111 03c8 22E0     		b	.L20
 1112              	.L18:
 1113              		.loc 1 26 0 discriminator 2
 1114 03ca 0023     		movs	r3, #0
 1115 03cc FB64     		str	r3, [r7, #76]
 1116 03ce 1FE0     		b	.L20
 1117              	.L23:
 1118 03d0 FB6C     		ldr	r3, [r7, #76]
 1119 03d2 1B6A     		ldr	r3, [r3, #32]
 1120 03d4 042B     		cmp	r3, #4
 1121 03d6 0BD1     		bne	.L21
 1122              		.loc 1 26 0 discriminator 1
 1123 03d8 FB6C     		ldr	r3, [r7, #76]
 1124 03da DA69     		ldr	r2, [r3, #28]
 1125 03dc 3B1D     		adds	r3, r7, #4
 1126 03de 1046     		mov	r0, r2
 1127 03e0 1946     		mov	r1, r3
 1128 03e2 0422     		movs	r2, #4
 1129 03e4 FFF7FEFF 		bl	memcmp
 1130 03e8 0346     		mov	r3, r0
 1131 03ea 002B     		cmp	r3, #0
 1132 03ec 00D1     		bne	.L21
 1133 03ee 12E0     		b	.L2
 1134              	.L21:
 1135              		.loc 1 26 0 discriminator 2
 1136 03f0 FB6C     		ldr	r3, [r7, #76]
 1137 03f2 9B69     		ldr	r3, [r3, #24]
 1138 03f4 002B     		cmp	r3, #0
 1139 03f6 09D0     		beq	.L22
 1140              		.loc 1 26 0 discriminator 1
 1141 03f8 FB6C     		ldr	r3, [r7, #76]
 1142 03fa 9A69     		ldr	r2, [r3, #24]
 1143 03fc 564B     		ldr	r3, .L58
 1144 03fe 1B68     		ldr	r3, [r3]
 1145 0400 9B68     		ldr	r3, [r3, #8]
 1146 0402 5B69     		ldr	r3, [r3, #20]
 1147 0404 5B42     		negs	r3, r3
 1148 0406 1344     		add	r3, r3, r2
 1149 0408 FB64     		str	r3, [r7, #76]
 1150 040a 01E0     		b	.L20
 1151              	.L22:
 1152              		.loc 1 26 0 discriminator 2
 1153 040c 0023     		movs	r3, #0
 1154 040e FB64     		str	r3, [r7, #76]
 1155              	.L20:
 1156              		.loc 1 26 0 discriminator 1
 1157 0410 FB6C     		ldr	r3, [r7, #76]
 1158 0412 002B     		cmp	r3, #0
 1159 0414 DCD1     		bne	.L23
 1160              	.L2:
 1161              	.LBE2:
  27:src/modbus.c  **** 	// id already in the hash?
  28:src/modbus.c  **** 	if (s == NULL) {
 1162              		.loc 1 28 0 is_stmt 1
 1163 0416 FB6C     		ldr	r3, [r7, #76]
 1164 0418 002B     		cmp	r3, #0
 1165 041a 40F0C483 		bne	.L24
  29:src/modbus.c  **** 		s = (struct heapStruct*) malloc(sizeof(struct heapStruct));
 1166              		.loc 1 29 0
 1167 041e 2820     		movs	r0, #40
 1168 0420 FFF7FEFF 		bl	malloc
 1169 0424 0346     		mov	r3, r0
 1170 0426 FB64     		str	r3, [r7, #76]
  30:src/modbus.c  **** 		s->key = keyID;
 1171              		.loc 1 30 0
 1172 0428 7B68     		ldr	r3, [r7, #4]
 1173 042a 1A46     		mov	r2, r3
 1174 042c FB6C     		ldr	r3, [r7, #76]
 1175 042e 1A60     		str	r2, [r3]
 1176              	.LBB4:
  31:src/modbus.c  **** 		HASH_ADD_INT( users, key, s);
 1177              		.loc 1 31 0
 1178 0430 FB6C     		ldr	r3, [r7, #76]
 1179 0432 0022     		movs	r2, #0
 1180 0434 1A61     		str	r2, [r3, #16]
 1181 0436 FA6C     		ldr	r2, [r7, #76]
 1182 0438 FB6C     		ldr	r3, [r7, #76]
 1183 043a DA61     		str	r2, [r3, #28]
 1184 043c FB6C     		ldr	r3, [r7, #76]
 1185 043e 0422     		movs	r2, #4
 1186 0440 1A62     		str	r2, [r3, #32]
 1187 0442 454B     		ldr	r3, .L58
 1188 0444 1B68     		ldr	r3, [r3]
 1189 0446 002B     		cmp	r3, #0
 1190 0448 57D1     		bne	.L25
 1191              		.loc 1 31 0 is_stmt 0 discriminator 1
 1192 044a 434B     		ldr	r3, .L58
 1193 044c FA6C     		ldr	r2, [r7, #76]
 1194 044e 1A60     		str	r2, [r3]
 1195 0450 414B     		ldr	r3, .L58
 1196 0452 1B68     		ldr	r3, [r3]
 1197 0454 0022     		movs	r2, #0
 1198 0456 DA60     		str	r2, [r3, #12]
 1199 0458 3F4B     		ldr	r3, .L58
 1200 045a 1C68     		ldr	r4, [r3]
 1201 045c 2C20     		movs	r0, #44
 1202 045e FFF7FEFF 		bl	malloc
 1203 0462 0346     		mov	r3, r0
 1204 0464 A360     		str	r3, [r4, #8]
 1205 0466 3C4B     		ldr	r3, .L58
 1206 0468 1B68     		ldr	r3, [r3]
 1207 046a 9B68     		ldr	r3, [r3, #8]
 1208 046c 002B     		cmp	r3, #0
 1209 046e 03D1     		bne	.L26
 1210 0470 4FF0FF30 		mov	r0, #-1
 1211 0474 FFF7FEFF 		bl	exit
 1212              	.L26:
 1213              		.loc 1 31 0 discriminator 2
 1214 0478 374B     		ldr	r3, .L58
 1215 047a 1B68     		ldr	r3, [r3]
 1216 047c 9B68     		ldr	r3, [r3, #8]
 1217 047e 1846     		mov	r0, r3
 1218 0480 0021     		movs	r1, #0
 1219 0482 2C22     		movs	r2, #44
 1220 0484 FFF7FEFF 		bl	memset
 1221 0488 334B     		ldr	r3, .L58
 1222 048a 1B68     		ldr	r3, [r3]
 1223 048c 9B68     		ldr	r3, [r3, #8]
 1224 048e 324A     		ldr	r2, .L58
 1225 0490 1268     		ldr	r2, [r2]
 1226 0492 0832     		adds	r2, r2, #8
 1227 0494 1A61     		str	r2, [r3, #16]
 1228 0496 304B     		ldr	r3, .L58
 1229 0498 1B68     		ldr	r3, [r3]
 1230 049a 9B68     		ldr	r3, [r3, #8]
 1231 049c 2022     		movs	r2, #32
 1232 049e 5A60     		str	r2, [r3, #4]
 1233 04a0 2D4B     		ldr	r3, .L58
 1234 04a2 1B68     		ldr	r3, [r3]
 1235 04a4 9B68     		ldr	r3, [r3, #8]
 1236 04a6 0522     		movs	r2, #5
 1237 04a8 9A60     		str	r2, [r3, #8]
 1238 04aa 2B4B     		ldr	r3, .L58
 1239 04ac 1B68     		ldr	r3, [r3]
 1240 04ae 9B68     		ldr	r3, [r3, #8]
 1241 04b0 0822     		movs	r2, #8
 1242 04b2 5A61     		str	r2, [r3, #20]
 1243 04b4 284B     		ldr	r3, .L58
 1244 04b6 1B68     		ldr	r3, [r3]
 1245 04b8 9C68     		ldr	r4, [r3, #8]
 1246 04ba 4FF4C070 		mov	r0, #384
 1247 04be FFF7FEFF 		bl	malloc
 1248 04c2 0346     		mov	r3, r0
 1249 04c4 2360     		str	r3, [r4]
 1250 04c6 244B     		ldr	r3, .L58
 1251 04c8 1B68     		ldr	r3, [r3]
 1252 04ca 9B68     		ldr	r3, [r3, #8]
 1253 04cc 1B68     		ldr	r3, [r3]
 1254 04ce 002B     		cmp	r3, #0
 1255 04d0 03D1     		bne	.L27
 1256              		.loc 1 31 0 discriminator 1
 1257 04d2 4FF0FF30 		mov	r0, #-1
 1258 04d6 FFF7FEFF 		bl	exit
 1259              	.L27:
 1260              		.loc 1 31 0 discriminator 2
 1261 04da 1F4B     		ldr	r3, .L58
 1262 04dc 1B68     		ldr	r3, [r3]
 1263 04de 9B68     		ldr	r3, [r3, #8]
 1264 04e0 1B68     		ldr	r3, [r3]
 1265 04e2 1846     		mov	r0, r3
 1266 04e4 0021     		movs	r1, #0
 1267 04e6 4FF4C072 		mov	r2, #384
 1268 04ea FFF7FEFF 		bl	memset
 1269 04ee 1A4B     		ldr	r3, .L58
 1270 04f0 1B68     		ldr	r3, [r3]
 1271 04f2 9B68     		ldr	r3, [r3, #8]
 1272 04f4 194A     		ldr	r2, .L58+4
 1273 04f6 9A62     		str	r2, [r3, #40]
 1274 04f8 17E0     		b	.L28
 1275              	.L25:
 1276 04fa 174B     		ldr	r3, .L58
 1277 04fc 1B68     		ldr	r3, [r3]
 1278 04fe 9B68     		ldr	r3, [r3, #8]
 1279 0500 1B69     		ldr	r3, [r3, #16]
 1280 0502 FA6C     		ldr	r2, [r7, #76]
 1281 0504 9A60     		str	r2, [r3, #8]
 1282 0506 144B     		ldr	r3, .L58
 1283 0508 1B68     		ldr	r3, [r3]
 1284 050a 9B68     		ldr	r3, [r3, #8]
 1285 050c 1A69     		ldr	r2, [r3, #16]
 1286 050e 124B     		ldr	r3, .L58
 1287 0510 1B68     		ldr	r3, [r3]
 1288 0512 9B68     		ldr	r3, [r3, #8]
 1289 0514 5B69     		ldr	r3, [r3, #20]
 1290 0516 5B42     		negs	r3, r3
 1291 0518 1A44     		add	r2, r2, r3
 1292 051a FB6C     		ldr	r3, [r7, #76]
 1293 051c DA60     		str	r2, [r3, #12]
 1294 051e 0E4B     		ldr	r3, .L58
 1295 0520 1B68     		ldr	r3, [r3]
 1296 0522 9B68     		ldr	r3, [r3, #8]
 1297 0524 FA6C     		ldr	r2, [r7, #76]
 1298 0526 0832     		adds	r2, r2, #8
 1299 0528 1A61     		str	r2, [r3, #16]
 1300              	.L28:
 1301              		.loc 1 31 0 discriminator 1
 1302 052a 0B4B     		ldr	r3, .L58
 1303 052c 1B68     		ldr	r3, [r3]
 1304 052e 9B68     		ldr	r3, [r3, #8]
 1305 0530 DA68     		ldr	r2, [r3, #12]
 1306 0532 0132     		adds	r2, r2, #1
 1307 0534 DA60     		str	r2, [r3, #12]
 1308 0536 084B     		ldr	r3, .L58
 1309 0538 1B68     		ldr	r3, [r3]
 1310 053a 9A68     		ldr	r2, [r3, #8]
 1311 053c FB6C     		ldr	r3, [r7, #76]
 1312 053e 9A60     		str	r2, [r3, #8]
 1313              	.LBB5:
 1314 0540 FB6C     		ldr	r3, [r7, #76]
 1315 0542 BB62     		str	r3, [r7, #40]
 1316 0544 FB6C     		ldr	r3, [r7, #76]
 1317 0546 064A     		ldr	r2, .L58+8
 1318 0548 5A62     		str	r2, [r3, #36]
 1319 054a 064B     		ldr	r3, .L58+12
 1320 054c 3B63     		str	r3, [r7, #48]
 1321 054e 3B6B     		ldr	r3, [r7, #48]
 1322 0550 7B63     		str	r3, [r7, #52]
 1323 0552 0423     		movs	r3, #4
 1324 0554 FB62     		str	r3, [r7, #44]
 1325 0556 E0E0     		b	.L29
 1326              	.L59:
 1327              		.align	2
 1328              	.L58:
 1329 0558 00000000 		.word	users
 1330 055c E11F11A0 		.word	-1609490463
 1331 0560 EFBEEDFE 		.word	-17973521
 1332 0564 B979379E 		.word	-1640531527
 1333              	.L30:
 1334              		.loc 1 31 0 discriminator 2
 1335 0568 BB6A     		ldr	r3, [r7, #40]
 1336 056a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1337 056c 1A46     		mov	r2, r3
 1338 056e BB6A     		ldr	r3, [r7, #40]
 1339 0570 0133     		adds	r3, r3, #1
 1340 0572 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1341 0574 1B02     		lsls	r3, r3, #8
 1342 0576 1A44     		add	r2, r2, r3
 1343 0578 BB6A     		ldr	r3, [r7, #40]
 1344 057a 0233     		adds	r3, r3, #2
 1345 057c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1346 057e 1B04     		lsls	r3, r3, #16
 1347 0580 1A44     		add	r2, r2, r3
 1348 0582 BB6A     		ldr	r3, [r7, #40]
 1349 0584 0333     		adds	r3, r3, #3
 1350 0586 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1351 0588 1B06     		lsls	r3, r3, #24
 1352 058a 1344     		add	r3, r3, r2
 1353 058c 7A6B     		ldr	r2, [r7, #52]
 1354 058e 1344     		add	r3, r3, r2
 1355 0590 7B63     		str	r3, [r7, #52]
 1356 0592 BB6A     		ldr	r3, [r7, #40]
 1357 0594 0433     		adds	r3, r3, #4
 1358 0596 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1359 0598 1A46     		mov	r2, r3
 1360 059a BB6A     		ldr	r3, [r7, #40]
 1361 059c 0533     		adds	r3, r3, #5
 1362 059e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1363 05a0 1B02     		lsls	r3, r3, #8
 1364 05a2 1A44     		add	r2, r2, r3
 1365 05a4 BB6A     		ldr	r3, [r7, #40]
 1366 05a6 0633     		adds	r3, r3, #6
 1367 05a8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1368 05aa 1B04     		lsls	r3, r3, #16
 1369 05ac 1A44     		add	r2, r2, r3
 1370 05ae BB6A     		ldr	r3, [r7, #40]
 1371 05b0 0733     		adds	r3, r3, #7
 1372 05b2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1373 05b4 1B06     		lsls	r3, r3, #24
 1374 05b6 1344     		add	r3, r3, r2
 1375 05b8 3A6B     		ldr	r2, [r7, #48]
 1376 05ba 1344     		add	r3, r3, r2
 1377 05bc 3B63     		str	r3, [r7, #48]
 1378 05be FB6C     		ldr	r3, [r7, #76]
 1379 05c0 5A6A     		ldr	r2, [r3, #36]
 1380 05c2 BB6A     		ldr	r3, [r7, #40]
 1381 05c4 0833     		adds	r3, r3, #8
 1382 05c6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1383 05c8 1946     		mov	r1, r3
 1384 05ca BB6A     		ldr	r3, [r7, #40]
 1385 05cc 0933     		adds	r3, r3, #9
 1386 05ce 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1387 05d0 1B02     		lsls	r3, r3, #8
 1388 05d2 1944     		add	r1, r1, r3
 1389 05d4 BB6A     		ldr	r3, [r7, #40]
 1390 05d6 0A33     		adds	r3, r3, #10
 1391 05d8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1392 05da 1B04     		lsls	r3, r3, #16
 1393 05dc 1944     		add	r1, r1, r3
 1394 05de BB6A     		ldr	r3, [r7, #40]
 1395 05e0 0B33     		adds	r3, r3, #11
 1396 05e2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1397 05e4 1B06     		lsls	r3, r3, #24
 1398 05e6 0B44     		add	r3, r3, r1
 1399 05e8 1A44     		add	r2, r2, r3
 1400 05ea FB6C     		ldr	r3, [r7, #76]
 1401 05ec 5A62     		str	r2, [r3, #36]
 1402 05ee 7A6B     		ldr	r2, [r7, #52]
 1403 05f0 3B6B     		ldr	r3, [r7, #48]
 1404 05f2 D31A     		subs	r3, r2, r3
 1405 05f4 7B63     		str	r3, [r7, #52]
 1406 05f6 FB6C     		ldr	r3, [r7, #76]
 1407 05f8 5B6A     		ldr	r3, [r3, #36]
 1408 05fa 7A6B     		ldr	r2, [r7, #52]
 1409 05fc D31A     		subs	r3, r2, r3
 1410 05fe 7B63     		str	r3, [r7, #52]
 1411 0600 FB6C     		ldr	r3, [r7, #76]
 1412 0602 5B6A     		ldr	r3, [r3, #36]
 1413 0604 5B0B     		lsrs	r3, r3, #13
 1414 0606 7A6B     		ldr	r2, [r7, #52]
 1415 0608 5340     		eors	r3, r3, r2
 1416 060a 7B63     		str	r3, [r7, #52]
 1417 060c FB6C     		ldr	r3, [r7, #76]
 1418 060e 5B6A     		ldr	r3, [r3, #36]
 1419 0610 3A6B     		ldr	r2, [r7, #48]
 1420 0612 D31A     		subs	r3, r2, r3
 1421 0614 3B63     		str	r3, [r7, #48]
 1422 0616 3A6B     		ldr	r2, [r7, #48]
 1423 0618 7B6B     		ldr	r3, [r7, #52]
 1424 061a D31A     		subs	r3, r2, r3
 1425 061c 3B63     		str	r3, [r7, #48]
 1426 061e 7B6B     		ldr	r3, [r7, #52]
 1427 0620 1B02     		lsls	r3, r3, #8
 1428 0622 3A6B     		ldr	r2, [r7, #48]
 1429 0624 5340     		eors	r3, r3, r2
 1430 0626 3B63     		str	r3, [r7, #48]
 1431 0628 FB6C     		ldr	r3, [r7, #76]
 1432 062a 5A6A     		ldr	r2, [r3, #36]
 1433 062c 7B6B     		ldr	r3, [r7, #52]
 1434 062e D21A     		subs	r2, r2, r3
 1435 0630 FB6C     		ldr	r3, [r7, #76]
 1436 0632 5A62     		str	r2, [r3, #36]
 1437 0634 FB6C     		ldr	r3, [r7, #76]
 1438 0636 5A6A     		ldr	r2, [r3, #36]
 1439 0638 3B6B     		ldr	r3, [r7, #48]
 1440 063a D21A     		subs	r2, r2, r3
 1441 063c FB6C     		ldr	r3, [r7, #76]
 1442 063e 5A62     		str	r2, [r3, #36]
 1443 0640 FB6C     		ldr	r3, [r7, #76]
 1444 0642 5A6A     		ldr	r2, [r3, #36]
 1445 0644 3B6B     		ldr	r3, [r7, #48]
 1446 0646 5B0B     		lsrs	r3, r3, #13
 1447 0648 5A40     		eors	r2, r2, r3
 1448 064a FB6C     		ldr	r3, [r7, #76]
 1449 064c 5A62     		str	r2, [r3, #36]
 1450 064e 7A6B     		ldr	r2, [r7, #52]
 1451 0650 3B6B     		ldr	r3, [r7, #48]
 1452 0652 D31A     		subs	r3, r2, r3
 1453 0654 7B63     		str	r3, [r7, #52]
 1454 0656 FB6C     		ldr	r3, [r7, #76]
 1455 0658 5B6A     		ldr	r3, [r3, #36]
 1456 065a 7A6B     		ldr	r2, [r7, #52]
 1457 065c D31A     		subs	r3, r2, r3
 1458 065e 7B63     		str	r3, [r7, #52]
 1459 0660 FB6C     		ldr	r3, [r7, #76]
 1460 0662 5B6A     		ldr	r3, [r3, #36]
 1461 0664 1B0B     		lsrs	r3, r3, #12
 1462 0666 7A6B     		ldr	r2, [r7, #52]
 1463 0668 5340     		eors	r3, r3, r2
 1464 066a 7B63     		str	r3, [r7, #52]
 1465 066c FB6C     		ldr	r3, [r7, #76]
 1466 066e 5B6A     		ldr	r3, [r3, #36]
 1467 0670 3A6B     		ldr	r2, [r7, #48]
 1468 0672 D31A     		subs	r3, r2, r3
 1469 0674 3B63     		str	r3, [r7, #48]
 1470 0676 3A6B     		ldr	r2, [r7, #48]
 1471 0678 7B6B     		ldr	r3, [r7, #52]
 1472 067a D31A     		subs	r3, r2, r3
 1473 067c 3B63     		str	r3, [r7, #48]
 1474 067e 7B6B     		ldr	r3, [r7, #52]
 1475 0680 1B04     		lsls	r3, r3, #16
 1476 0682 3A6B     		ldr	r2, [r7, #48]
 1477 0684 5340     		eors	r3, r3, r2
 1478 0686 3B63     		str	r3, [r7, #48]
 1479 0688 FB6C     		ldr	r3, [r7, #76]
 1480 068a 5A6A     		ldr	r2, [r3, #36]
 1481 068c 7B6B     		ldr	r3, [r7, #52]
 1482 068e D21A     		subs	r2, r2, r3
 1483 0690 FB6C     		ldr	r3, [r7, #76]
 1484 0692 5A62     		str	r2, [r3, #36]
 1485 0694 FB6C     		ldr	r3, [r7, #76]
 1486 0696 5A6A     		ldr	r2, [r3, #36]
 1487 0698 3B6B     		ldr	r3, [r7, #48]
 1488 069a D21A     		subs	r2, r2, r3
 1489 069c FB6C     		ldr	r3, [r7, #76]
 1490 069e 5A62     		str	r2, [r3, #36]
 1491 06a0 FB6C     		ldr	r3, [r7, #76]
 1492 06a2 5A6A     		ldr	r2, [r3, #36]
 1493 06a4 3B6B     		ldr	r3, [r7, #48]
 1494 06a6 5B09     		lsrs	r3, r3, #5
 1495 06a8 5A40     		eors	r2, r2, r3
 1496 06aa FB6C     		ldr	r3, [r7, #76]
 1497 06ac 5A62     		str	r2, [r3, #36]
 1498 06ae 7A6B     		ldr	r2, [r7, #52]
 1499 06b0 3B6B     		ldr	r3, [r7, #48]
 1500 06b2 D31A     		subs	r3, r2, r3
 1501 06b4 7B63     		str	r3, [r7, #52]
 1502 06b6 FB6C     		ldr	r3, [r7, #76]
 1503 06b8 5B6A     		ldr	r3, [r3, #36]
 1504 06ba 7A6B     		ldr	r2, [r7, #52]
 1505 06bc D31A     		subs	r3, r2, r3
 1506 06be 7B63     		str	r3, [r7, #52]
 1507 06c0 FB6C     		ldr	r3, [r7, #76]
 1508 06c2 5B6A     		ldr	r3, [r3, #36]
 1509 06c4 DB08     		lsrs	r3, r3, #3
 1510 06c6 7A6B     		ldr	r2, [r7, #52]
 1511 06c8 5340     		eors	r3, r3, r2
 1512 06ca 7B63     		str	r3, [r7, #52]
 1513 06cc FB6C     		ldr	r3, [r7, #76]
 1514 06ce 5B6A     		ldr	r3, [r3, #36]
 1515 06d0 3A6B     		ldr	r2, [r7, #48]
 1516 06d2 D31A     		subs	r3, r2, r3
 1517 06d4 3B63     		str	r3, [r7, #48]
 1518 06d6 3A6B     		ldr	r2, [r7, #48]
 1519 06d8 7B6B     		ldr	r3, [r7, #52]
 1520 06da D31A     		subs	r3, r2, r3
 1521 06dc 3B63     		str	r3, [r7, #48]
 1522 06de 7B6B     		ldr	r3, [r7, #52]
 1523 06e0 9B02     		lsls	r3, r3, #10
 1524 06e2 3A6B     		ldr	r2, [r7, #48]
 1525 06e4 5340     		eors	r3, r3, r2
 1526 06e6 3B63     		str	r3, [r7, #48]
 1527 06e8 FB6C     		ldr	r3, [r7, #76]
 1528 06ea 5A6A     		ldr	r2, [r3, #36]
 1529 06ec 7B6B     		ldr	r3, [r7, #52]
 1530 06ee D21A     		subs	r2, r2, r3
 1531 06f0 FB6C     		ldr	r3, [r7, #76]
 1532 06f2 5A62     		str	r2, [r3, #36]
 1533 06f4 FB6C     		ldr	r3, [r7, #76]
 1534 06f6 5A6A     		ldr	r2, [r3, #36]
 1535 06f8 3B6B     		ldr	r3, [r7, #48]
 1536 06fa D21A     		subs	r2, r2, r3
 1537 06fc FB6C     		ldr	r3, [r7, #76]
 1538 06fe 5A62     		str	r2, [r3, #36]
 1539 0700 FB6C     		ldr	r3, [r7, #76]
 1540 0702 5A6A     		ldr	r2, [r3, #36]
 1541 0704 3B6B     		ldr	r3, [r7, #48]
 1542 0706 DB0B     		lsrs	r3, r3, #15
 1543 0708 5A40     		eors	r2, r2, r3
 1544 070a FB6C     		ldr	r3, [r7, #76]
 1545 070c 5A62     		str	r2, [r3, #36]
 1546 070e BB6A     		ldr	r3, [r7, #40]
 1547 0710 0C33     		adds	r3, r3, #12
 1548 0712 BB62     		str	r3, [r7, #40]
 1549 0714 FB6A     		ldr	r3, [r7, #44]
 1550 0716 0C3B     		subs	r3, r3, #12
 1551 0718 FB62     		str	r3, [r7, #44]
 1552              	.L29:
 1553              		.loc 1 31 0 discriminator 1
 1554 071a FB6A     		ldr	r3, [r7, #44]
 1555 071c 0B2B     		cmp	r3, #11
 1556 071e 3FF623AF 		bhi	.L30
 1557              		.loc 1 31 0 discriminator 3
 1558 0722 FB6C     		ldr	r3, [r7, #76]
 1559 0724 5B6A     		ldr	r3, [r3, #36]
 1560 0726 1A1D     		adds	r2, r3, #4
 1561 0728 FB6C     		ldr	r3, [r7, #76]
 1562 072a 5A62     		str	r2, [r3, #36]
 1563 072c FB6A     		ldr	r3, [r7, #44]
 1564 072e 013B     		subs	r3, r3, #1
 1565 0730 0A2B     		cmp	r3, #10
 1566 0732 69D8     		bhi	.L31
 1567 0734 01A2     		adr	r2, .L33
 1568 0736 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 1569 073a 00BF     		.p2align 2
 1570              	.L33:
 1571 073c FF070000 		.word	.L32+1
 1572 0740 F1070000 		.word	.L34+1
 1573 0744 E3070000 		.word	.L35+1
 1574 0748 D5070000 		.word	.L36+1
 1575 074c C9070000 		.word	.L37+1
 1576 0750 BB070000 		.word	.L38+1
 1577 0754 AD070000 		.word	.L39+1
 1578 0758 9F070000 		.word	.L40+1
 1579 075c 8D070000 		.word	.L41+1
 1580 0760 7B070000 		.word	.L42+1
 1581 0764 69070000 		.word	.L43+1
 1582              	.L43:
 1583              		.loc 1 31 0 discriminator 12
 1584 0768 FB6C     		ldr	r3, [r7, #76]
 1585 076a 5A6A     		ldr	r2, [r3, #36]
 1586 076c BB6A     		ldr	r3, [r7, #40]
 1587 076e 0A33     		adds	r3, r3, #10
 1588 0770 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1589 0772 1B06     		lsls	r3, r3, #24
 1590 0774 1A44     		add	r2, r2, r3
 1591 0776 FB6C     		ldr	r3, [r7, #76]
 1592 0778 5A62     		str	r2, [r3, #36]
 1593              	.L42:
 1594              		.loc 1 31 0 discriminator 11
 1595 077a FB6C     		ldr	r3, [r7, #76]
 1596 077c 5A6A     		ldr	r2, [r3, #36]
 1597 077e BB6A     		ldr	r3, [r7, #40]
 1598 0780 0933     		adds	r3, r3, #9
 1599 0782 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1600 0784 1B04     		lsls	r3, r3, #16
 1601 0786 1A44     		add	r2, r2, r3
 1602 0788 FB6C     		ldr	r3, [r7, #76]
 1603 078a 5A62     		str	r2, [r3, #36]
 1604              	.L41:
 1605              		.loc 1 31 0 discriminator 10
 1606 078c FB6C     		ldr	r3, [r7, #76]
 1607 078e 5A6A     		ldr	r2, [r3, #36]
 1608 0790 BB6A     		ldr	r3, [r7, #40]
 1609 0792 0833     		adds	r3, r3, #8
 1610 0794 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1611 0796 1B02     		lsls	r3, r3, #8
 1612 0798 1A44     		add	r2, r2, r3
 1613 079a FB6C     		ldr	r3, [r7, #76]
 1614 079c 5A62     		str	r2, [r3, #36]
 1615              	.L40:
 1616              		.loc 1 31 0 discriminator 9
 1617 079e BB6A     		ldr	r3, [r7, #40]
 1618 07a0 0733     		adds	r3, r3, #7
 1619 07a2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1620 07a4 1B06     		lsls	r3, r3, #24
 1621 07a6 3A6B     		ldr	r2, [r7, #48]
 1622 07a8 1344     		add	r3, r3, r2
 1623 07aa 3B63     		str	r3, [r7, #48]
 1624              	.L39:
 1625              		.loc 1 31 0 discriminator 8
 1626 07ac BB6A     		ldr	r3, [r7, #40]
 1627 07ae 0633     		adds	r3, r3, #6
 1628 07b0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1629 07b2 1B04     		lsls	r3, r3, #16
 1630 07b4 3A6B     		ldr	r2, [r7, #48]
 1631 07b6 1344     		add	r3, r3, r2
 1632 07b8 3B63     		str	r3, [r7, #48]
 1633              	.L38:
 1634              		.loc 1 31 0 discriminator 7
 1635 07ba BB6A     		ldr	r3, [r7, #40]
 1636 07bc 0533     		adds	r3, r3, #5
 1637 07be 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1638 07c0 1B02     		lsls	r3, r3, #8
 1639 07c2 3A6B     		ldr	r2, [r7, #48]
 1640 07c4 1344     		add	r3, r3, r2
 1641 07c6 3B63     		str	r3, [r7, #48]
 1642              	.L37:
 1643              		.loc 1 31 0 discriminator 6
 1644 07c8 BB6A     		ldr	r3, [r7, #40]
 1645 07ca 0433     		adds	r3, r3, #4
 1646 07cc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1647 07ce 3A6B     		ldr	r2, [r7, #48]
 1648 07d0 1344     		add	r3, r3, r2
 1649 07d2 3B63     		str	r3, [r7, #48]
 1650              	.L36:
 1651              		.loc 1 31 0 discriminator 5
 1652 07d4 BB6A     		ldr	r3, [r7, #40]
 1653 07d6 0333     		adds	r3, r3, #3
 1654 07d8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1655 07da 1B06     		lsls	r3, r3, #24
 1656 07dc 7A6B     		ldr	r2, [r7, #52]
 1657 07de 1344     		add	r3, r3, r2
 1658 07e0 7B63     		str	r3, [r7, #52]
 1659              	.L35:
 1660              		.loc 1 31 0 discriminator 4
 1661 07e2 BB6A     		ldr	r3, [r7, #40]
 1662 07e4 0233     		adds	r3, r3, #2
 1663 07e6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1664 07e8 1B04     		lsls	r3, r3, #16
 1665 07ea 7A6B     		ldr	r2, [r7, #52]
 1666 07ec 1344     		add	r3, r3, r2
 1667 07ee 7B63     		str	r3, [r7, #52]
 1668              	.L34:
 1669              		.loc 1 31 0 discriminator 3
 1670 07f0 BB6A     		ldr	r3, [r7, #40]
 1671 07f2 0133     		adds	r3, r3, #1
 1672 07f4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1673 07f6 1B02     		lsls	r3, r3, #8
 1674 07f8 7A6B     		ldr	r2, [r7, #52]
 1675 07fa 1344     		add	r3, r3, r2
 1676 07fc 7B63     		str	r3, [r7, #52]
 1677              	.L32:
 1678              		.loc 1 31 0 discriminator 2
 1679 07fe BB6A     		ldr	r3, [r7, #40]
 1680 0800 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1681 0802 7A6B     		ldr	r2, [r7, #52]
 1682 0804 1344     		add	r3, r3, r2
 1683 0806 7B63     		str	r3, [r7, #52]
 1684              	.L31:
 1685              		.loc 1 31 0 discriminator 1
 1686 0808 7A6B     		ldr	r2, [r7, #52]
 1687 080a 3B6B     		ldr	r3, [r7, #48]
 1688 080c D31A     		subs	r3, r2, r3
 1689 080e 7B63     		str	r3, [r7, #52]
 1690 0810 FB6C     		ldr	r3, [r7, #76]
 1691 0812 5B6A     		ldr	r3, [r3, #36]
 1692 0814 7A6B     		ldr	r2, [r7, #52]
 1693 0816 D31A     		subs	r3, r2, r3
 1694 0818 7B63     		str	r3, [r7, #52]
 1695 081a FB6C     		ldr	r3, [r7, #76]
 1696 081c 5B6A     		ldr	r3, [r3, #36]
 1697 081e 5B0B     		lsrs	r3, r3, #13
 1698 0820 7A6B     		ldr	r2, [r7, #52]
 1699 0822 5340     		eors	r3, r3, r2
 1700 0824 7B63     		str	r3, [r7, #52]
 1701 0826 FB6C     		ldr	r3, [r7, #76]
 1702 0828 5B6A     		ldr	r3, [r3, #36]
 1703 082a 3A6B     		ldr	r2, [r7, #48]
 1704 082c D31A     		subs	r3, r2, r3
 1705 082e 3B63     		str	r3, [r7, #48]
 1706 0830 3A6B     		ldr	r2, [r7, #48]
 1707 0832 7B6B     		ldr	r3, [r7, #52]
 1708 0834 D31A     		subs	r3, r2, r3
 1709 0836 3B63     		str	r3, [r7, #48]
 1710 0838 7B6B     		ldr	r3, [r7, #52]
 1711 083a 1B02     		lsls	r3, r3, #8
 1712 083c 3A6B     		ldr	r2, [r7, #48]
 1713 083e 5340     		eors	r3, r3, r2
 1714 0840 3B63     		str	r3, [r7, #48]
 1715 0842 FB6C     		ldr	r3, [r7, #76]
 1716 0844 5A6A     		ldr	r2, [r3, #36]
 1717 0846 7B6B     		ldr	r3, [r7, #52]
 1718 0848 D21A     		subs	r2, r2, r3
 1719 084a FB6C     		ldr	r3, [r7, #76]
 1720 084c 5A62     		str	r2, [r3, #36]
 1721 084e FB6C     		ldr	r3, [r7, #76]
 1722 0850 5A6A     		ldr	r2, [r3, #36]
 1723 0852 3B6B     		ldr	r3, [r7, #48]
 1724 0854 D21A     		subs	r2, r2, r3
 1725 0856 FB6C     		ldr	r3, [r7, #76]
 1726 0858 5A62     		str	r2, [r3, #36]
 1727 085a FB6C     		ldr	r3, [r7, #76]
 1728 085c 5A6A     		ldr	r2, [r3, #36]
 1729 085e 3B6B     		ldr	r3, [r7, #48]
 1730 0860 5B0B     		lsrs	r3, r3, #13
 1731 0862 5A40     		eors	r2, r2, r3
 1732 0864 FB6C     		ldr	r3, [r7, #76]
 1733 0866 5A62     		str	r2, [r3, #36]
 1734 0868 7A6B     		ldr	r2, [r7, #52]
 1735 086a 3B6B     		ldr	r3, [r7, #48]
 1736 086c D31A     		subs	r3, r2, r3
 1737 086e 7B63     		str	r3, [r7, #52]
 1738 0870 FB6C     		ldr	r3, [r7, #76]
 1739 0872 5B6A     		ldr	r3, [r3, #36]
 1740 0874 7A6B     		ldr	r2, [r7, #52]
 1741 0876 D31A     		subs	r3, r2, r3
 1742 0878 7B63     		str	r3, [r7, #52]
 1743 087a FB6C     		ldr	r3, [r7, #76]
 1744 087c 5B6A     		ldr	r3, [r3, #36]
 1745 087e 1B0B     		lsrs	r3, r3, #12
 1746 0880 7A6B     		ldr	r2, [r7, #52]
 1747 0882 5340     		eors	r3, r3, r2
 1748 0884 7B63     		str	r3, [r7, #52]
 1749 0886 FB6C     		ldr	r3, [r7, #76]
 1750 0888 5B6A     		ldr	r3, [r3, #36]
 1751 088a 3A6B     		ldr	r2, [r7, #48]
 1752 088c D31A     		subs	r3, r2, r3
 1753 088e 3B63     		str	r3, [r7, #48]
 1754 0890 3A6B     		ldr	r2, [r7, #48]
 1755 0892 7B6B     		ldr	r3, [r7, #52]
 1756 0894 D31A     		subs	r3, r2, r3
 1757 0896 3B63     		str	r3, [r7, #48]
 1758 0898 7B6B     		ldr	r3, [r7, #52]
 1759 089a 1B04     		lsls	r3, r3, #16
 1760 089c 3A6B     		ldr	r2, [r7, #48]
 1761 089e 5340     		eors	r3, r3, r2
 1762 08a0 3B63     		str	r3, [r7, #48]
 1763 08a2 FB6C     		ldr	r3, [r7, #76]
 1764 08a4 5A6A     		ldr	r2, [r3, #36]
 1765 08a6 7B6B     		ldr	r3, [r7, #52]
 1766 08a8 D21A     		subs	r2, r2, r3
 1767 08aa FB6C     		ldr	r3, [r7, #76]
 1768 08ac 5A62     		str	r2, [r3, #36]
 1769 08ae FB6C     		ldr	r3, [r7, #76]
 1770 08b0 5A6A     		ldr	r2, [r3, #36]
 1771 08b2 3B6B     		ldr	r3, [r7, #48]
 1772 08b4 D21A     		subs	r2, r2, r3
 1773 08b6 FB6C     		ldr	r3, [r7, #76]
 1774 08b8 5A62     		str	r2, [r3, #36]
 1775 08ba FB6C     		ldr	r3, [r7, #76]
 1776 08bc 5A6A     		ldr	r2, [r3, #36]
 1777 08be 3B6B     		ldr	r3, [r7, #48]
 1778 08c0 5B09     		lsrs	r3, r3, #5
 1779 08c2 5A40     		eors	r2, r2, r3
 1780 08c4 FB6C     		ldr	r3, [r7, #76]
 1781 08c6 5A62     		str	r2, [r3, #36]
 1782 08c8 7A6B     		ldr	r2, [r7, #52]
 1783 08ca 3B6B     		ldr	r3, [r7, #48]
 1784 08cc D31A     		subs	r3, r2, r3
 1785 08ce 7B63     		str	r3, [r7, #52]
 1786 08d0 FB6C     		ldr	r3, [r7, #76]
 1787 08d2 5B6A     		ldr	r3, [r3, #36]
 1788 08d4 7A6B     		ldr	r2, [r7, #52]
 1789 08d6 D31A     		subs	r3, r2, r3
 1790 08d8 7B63     		str	r3, [r7, #52]
 1791 08da FB6C     		ldr	r3, [r7, #76]
 1792 08dc 5B6A     		ldr	r3, [r3, #36]
 1793 08de DB08     		lsrs	r3, r3, #3
 1794 08e0 7A6B     		ldr	r2, [r7, #52]
 1795 08e2 5340     		eors	r3, r3, r2
 1796 08e4 7B63     		str	r3, [r7, #52]
 1797 08e6 FB6C     		ldr	r3, [r7, #76]
 1798 08e8 5B6A     		ldr	r3, [r3, #36]
 1799 08ea 3A6B     		ldr	r2, [r7, #48]
 1800 08ec D31A     		subs	r3, r2, r3
 1801 08ee 3B63     		str	r3, [r7, #48]
 1802 08f0 3A6B     		ldr	r2, [r7, #48]
 1803 08f2 7B6B     		ldr	r3, [r7, #52]
 1804 08f4 D31A     		subs	r3, r2, r3
 1805 08f6 3B63     		str	r3, [r7, #48]
 1806 08f8 7B6B     		ldr	r3, [r7, #52]
 1807 08fa 9B02     		lsls	r3, r3, #10
 1808 08fc 3A6B     		ldr	r2, [r7, #48]
 1809 08fe 5340     		eors	r3, r3, r2
 1810 0900 3B63     		str	r3, [r7, #48]
 1811 0902 FB6C     		ldr	r3, [r7, #76]
 1812 0904 5A6A     		ldr	r2, [r3, #36]
 1813 0906 7B6B     		ldr	r3, [r7, #52]
 1814 0908 D21A     		subs	r2, r2, r3
 1815 090a FB6C     		ldr	r3, [r7, #76]
 1816 090c 5A62     		str	r2, [r3, #36]
 1817 090e FB6C     		ldr	r3, [r7, #76]
 1818 0910 5A6A     		ldr	r2, [r3, #36]
 1819 0912 3B6B     		ldr	r3, [r7, #48]
 1820 0914 D21A     		subs	r2, r2, r3
 1821 0916 FB6C     		ldr	r3, [r7, #76]
 1822 0918 5A62     		str	r2, [r3, #36]
 1823 091a FB6C     		ldr	r3, [r7, #76]
 1824 091c 5A6A     		ldr	r2, [r3, #36]
 1825 091e 3B6B     		ldr	r3, [r7, #48]
 1826 0920 DB0B     		lsrs	r3, r3, #15
 1827 0922 5A40     		eors	r2, r2, r3
 1828 0924 FB6C     		ldr	r3, [r7, #76]
 1829 0926 5A62     		str	r2, [r3, #36]
 1830 0928 FB6C     		ldr	r3, [r7, #76]
 1831 092a 5A6A     		ldr	r2, [r3, #36]
 1832 092c 974B     		ldr	r3, .L60
 1833 092e 1B68     		ldr	r3, [r3]
 1834 0930 9B68     		ldr	r3, [r3, #8]
 1835 0932 5B68     		ldr	r3, [r3, #4]
 1836 0934 013B     		subs	r3, r3, #1
 1837 0936 1340     		ands	r3, r3, r2
 1838 0938 BB61     		str	r3, [r7, #24]
 1839              	.LBE5:
 1840 093a 944B     		ldr	r3, .L60
 1841 093c 1B68     		ldr	r3, [r3]
 1842 093e 9B68     		ldr	r3, [r3, #8]
 1843 0940 1968     		ldr	r1, [r3]
 1844 0942 BA69     		ldr	r2, [r7, #24]
 1845 0944 1346     		mov	r3, r2
 1846 0946 5B00     		lsls	r3, r3, #1
 1847 0948 1344     		add	r3, r3, r2
 1848 094a 9B00     		lsls	r3, r3, #2
 1849 094c 0B44     		add	r3, r3, r1
 1850 094e 5A68     		ldr	r2, [r3, #4]
 1851 0950 0132     		adds	r2, r2, #1
 1852 0952 5A60     		str	r2, [r3, #4]
 1853 0954 8D4B     		ldr	r3, .L60
 1854 0956 1B68     		ldr	r3, [r3]
 1855 0958 9B68     		ldr	r3, [r3, #8]
 1856 095a 1968     		ldr	r1, [r3]
 1857 095c BA69     		ldr	r2, [r7, #24]
 1858 095e 1346     		mov	r3, r2
 1859 0960 5B00     		lsls	r3, r3, #1
 1860 0962 1344     		add	r3, r3, r2
 1861 0964 9B00     		lsls	r3, r3, #2
 1862 0966 0B44     		add	r3, r3, r1
 1863 0968 1A68     		ldr	r2, [r3]
 1864 096a FB6C     		ldr	r3, [r7, #76]
 1865 096c 9A61     		str	r2, [r3, #24]
 1866 096e FB6C     		ldr	r3, [r7, #76]
 1867 0970 0022     		movs	r2, #0
 1868 0972 5A61     		str	r2, [r3, #20]
 1869 0974 854B     		ldr	r3, .L60
 1870 0976 1B68     		ldr	r3, [r3]
 1871 0978 9B68     		ldr	r3, [r3, #8]
 1872 097a 1968     		ldr	r1, [r3]
 1873 097c BA69     		ldr	r2, [r7, #24]
 1874 097e 1346     		mov	r3, r2
 1875 0980 5B00     		lsls	r3, r3, #1
 1876 0982 1344     		add	r3, r3, r2
 1877 0984 9B00     		lsls	r3, r3, #2
 1878 0986 0B44     		add	r3, r3, r1
 1879 0988 1B68     		ldr	r3, [r3]
 1880 098a 002B     		cmp	r3, #0
 1881 098c 0DD0     		beq	.L44
 1882 098e 7F4B     		ldr	r3, .L60
 1883 0990 1B68     		ldr	r3, [r3]
 1884 0992 9B68     		ldr	r3, [r3, #8]
 1885 0994 1968     		ldr	r1, [r3]
 1886 0996 BA69     		ldr	r2, [r7, #24]
 1887 0998 1346     		mov	r3, r2
 1888 099a 5B00     		lsls	r3, r3, #1
 1889 099c 1344     		add	r3, r3, r2
 1890 099e 9B00     		lsls	r3, r3, #2
 1891 09a0 0B44     		add	r3, r3, r1
 1892 09a2 1B68     		ldr	r3, [r3]
 1893 09a4 FA6C     		ldr	r2, [r7, #76]
 1894 09a6 0832     		adds	r2, r2, #8
 1895 09a8 DA60     		str	r2, [r3, #12]
 1896              	.L44:
 1897              		.loc 1 31 0 discriminator 2
 1898 09aa 784B     		ldr	r3, .L60
 1899 09ac 1B68     		ldr	r3, [r3]
 1900 09ae 9B68     		ldr	r3, [r3, #8]
 1901 09b0 1968     		ldr	r1, [r3]
 1902 09b2 BA69     		ldr	r2, [r7, #24]
 1903 09b4 1346     		mov	r3, r2
 1904 09b6 5B00     		lsls	r3, r3, #1
 1905 09b8 1344     		add	r3, r3, r2
 1906 09ba 9B00     		lsls	r3, r3, #2
 1907 09bc 0B44     		add	r3, r3, r1
 1908 09be FA6C     		ldr	r2, [r7, #76]
 1909 09c0 0832     		adds	r2, r2, #8
 1910 09c2 1A60     		str	r2, [r3]
 1911 09c4 714B     		ldr	r3, .L60
 1912 09c6 1B68     		ldr	r3, [r3]
 1913 09c8 9B68     		ldr	r3, [r3, #8]
 1914 09ca 1968     		ldr	r1, [r3]
 1915 09cc BA69     		ldr	r2, [r7, #24]
 1916 09ce 1346     		mov	r3, r2
 1917 09d0 5B00     		lsls	r3, r3, #1
 1918 09d2 1344     		add	r3, r3, r2
 1919 09d4 9B00     		lsls	r3, r3, #2
 1920 09d6 0B44     		add	r3, r3, r1
 1921 09d8 5968     		ldr	r1, [r3, #4]
 1922 09da 6C4B     		ldr	r3, .L60
 1923 09dc 1B68     		ldr	r3, [r3]
 1924 09de 9B68     		ldr	r3, [r3, #8]
 1925 09e0 1868     		ldr	r0, [r3]
 1926 09e2 BA69     		ldr	r2, [r7, #24]
 1927 09e4 1346     		mov	r3, r2
 1928 09e6 5B00     		lsls	r3, r3, #1
 1929 09e8 1344     		add	r3, r3, r2
 1930 09ea 9B00     		lsls	r3, r3, #2
 1931 09ec 0344     		add	r3, r3, r0
 1932 09ee 9B68     		ldr	r3, [r3, #8]
 1933 09f0 5A1C     		adds	r2, r3, #1
 1934 09f2 1346     		mov	r3, r2
 1935 09f4 9B00     		lsls	r3, r3, #2
 1936 09f6 1344     		add	r3, r3, r2
 1937 09f8 5B00     		lsls	r3, r3, #1
 1938 09fa 9942     		cmp	r1, r3
 1939 09fc C0F0D380 		bcc	.L24
 1940              		.loc 1 31 0 discriminator 1
 1941 0a00 FB6C     		ldr	r3, [r7, #76]
 1942 0a02 9B68     		ldr	r3, [r3, #8]
 1943 0a04 5B6A     		ldr	r3, [r3, #36]
 1944 0a06 012B     		cmp	r3, #1
 1945 0a08 00F0CD80 		beq	.L24
 1946              	.LBB6:
 1947 0a0c FB6C     		ldr	r3, [r7, #76]
 1948 0a0e 9B68     		ldr	r3, [r3, #8]
 1949 0a10 5A68     		ldr	r2, [r3, #4]
 1950 0a12 1346     		mov	r3, r2
 1951 0a14 5B00     		lsls	r3, r3, #1
 1952 0a16 1344     		add	r3, r3, r2
 1953 0a18 DB00     		lsls	r3, r3, #3
 1954 0a1a 1846     		mov	r0, r3
 1955 0a1c FFF7FEFF 		bl	malloc
 1956 0a20 0346     		mov	r3, r0
 1957 0a22 7B61     		str	r3, [r7, #20]
 1958 0a24 7B69     		ldr	r3, [r7, #20]
 1959 0a26 002B     		cmp	r3, #0
 1960 0a28 03D1     		bne	.L45
 1961 0a2a 4FF0FF30 		mov	r0, #-1
 1962 0a2e FFF7FEFF 		bl	exit
 1963              	.L45:
 1964              		.loc 1 31 0 discriminator 2
 1965 0a32 FB6C     		ldr	r3, [r7, #76]
 1966 0a34 9B68     		ldr	r3, [r3, #8]
 1967 0a36 5A68     		ldr	r2, [r3, #4]
 1968 0a38 1346     		mov	r3, r2
 1969 0a3a 5B00     		lsls	r3, r3, #1
 1970 0a3c 1344     		add	r3, r3, r2
 1971 0a3e DB00     		lsls	r3, r3, #3
 1972 0a40 7869     		ldr	r0, [r7, #20]
 1973 0a42 0021     		movs	r1, #0
 1974 0a44 1A46     		mov	r2, r3
 1975 0a46 FFF7FEFF 		bl	memset
 1976 0a4a FB6C     		ldr	r3, [r7, #76]
 1977 0a4c 9A68     		ldr	r2, [r3, #8]
 1978 0a4e FB6C     		ldr	r3, [r7, #76]
 1979 0a50 9B68     		ldr	r3, [r3, #8]
 1980 0a52 D968     		ldr	r1, [r3, #12]
 1981 0a54 FB6C     		ldr	r3, [r7, #76]
 1982 0a56 9B68     		ldr	r3, [r3, #8]
 1983 0a58 9B68     		ldr	r3, [r3, #8]
 1984 0a5a 0133     		adds	r3, r3, #1
 1985 0a5c D940     		lsrs	r1, r1, r3
 1986 0a5e FB6C     		ldr	r3, [r7, #76]
 1987 0a60 9B68     		ldr	r3, [r3, #8]
 1988 0a62 D868     		ldr	r0, [r3, #12]
 1989 0a64 FB6C     		ldr	r3, [r7, #76]
 1990 0a66 9B68     		ldr	r3, [r3, #8]
 1991 0a68 5B68     		ldr	r3, [r3, #4]
 1992 0a6a 5B00     		lsls	r3, r3, #1
 1993 0a6c 013B     		subs	r3, r3, #1
 1994 0a6e 0340     		ands	r3, r3, r0
 1995 0a70 002B     		cmp	r3, #0
 1996 0a72 01D0     		beq	.L46
 1997              		.loc 1 31 0 discriminator 1
 1998 0a74 0123     		movs	r3, #1
 1999 0a76 00E0     		b	.L47
 2000              	.L46:
 2001              		.loc 1 31 0 discriminator 2
 2002 0a78 0023     		movs	r3, #0
 2003              	.L47:
 2004              		.loc 1 31 0 discriminator 3
 2005 0a7a 0B44     		add	r3, r3, r1
 2006 0a7c 9361     		str	r3, [r2, #24]
 2007 0a7e FB6C     		ldr	r3, [r7, #76]
 2008 0a80 9B68     		ldr	r3, [r3, #8]
 2009 0a82 0022     		movs	r2, #0
 2010 0a84 DA61     		str	r2, [r3, #28]
 2011 0a86 0023     		movs	r3, #0
 2012 0a88 7B62     		str	r3, [r7, #36]
 2013 0a8a 53E0     		b	.L48
 2014              	.L53:
 2015              		.loc 1 31 0 discriminator 2
 2016 0a8c FB6C     		ldr	r3, [r7, #76]
 2017 0a8e 9B68     		ldr	r3, [r3, #8]
 2018 0a90 1968     		ldr	r1, [r3]
 2019 0a92 7A6A     		ldr	r2, [r7, #36]
 2020 0a94 1346     		mov	r3, r2
 2021 0a96 5B00     		lsls	r3, r3, #1
 2022 0a98 1344     		add	r3, r3, r2
 2023 0a9a 9B00     		lsls	r3, r3, #2
 2024 0a9c 0B44     		add	r3, r3, r1
 2025 0a9e 1B68     		ldr	r3, [r3]
 2026 0aa0 3B62     		str	r3, [r7, #32]
 2027 0aa2 41E0     		b	.L49
 2028              	.L52:
 2029 0aa4 3B6A     		ldr	r3, [r7, #32]
 2030 0aa6 1B69     		ldr	r3, [r3, #16]
 2031 0aa8 3B61     		str	r3, [r7, #16]
 2032 0aaa 3B6A     		ldr	r3, [r7, #32]
 2033 0aac DA69     		ldr	r2, [r3, #28]
 2034 0aae FB6C     		ldr	r3, [r7, #76]
 2035 0ab0 9B68     		ldr	r3, [r3, #8]
 2036 0ab2 5B68     		ldr	r3, [r3, #4]
 2037 0ab4 5B00     		lsls	r3, r3, #1
 2038 0ab6 013B     		subs	r3, r3, #1
 2039 0ab8 1340     		ands	r3, r3, r2
 2040 0aba FB60     		str	r3, [r7, #12]
 2041 0abc FA68     		ldr	r2, [r7, #12]
 2042 0abe 1346     		mov	r3, r2
 2043 0ac0 5B00     		lsls	r3, r3, #1
 2044 0ac2 1344     		add	r3, r3, r2
 2045 0ac4 9B00     		lsls	r3, r3, #2
 2046 0ac6 7A69     		ldr	r2, [r7, #20]
 2047 0ac8 1344     		add	r3, r3, r2
 2048 0aca BB60     		str	r3, [r7, #8]
 2049 0acc BB68     		ldr	r3, [r7, #8]
 2050 0ace 5B68     		ldr	r3, [r3, #4]
 2051 0ad0 5A1C     		adds	r2, r3, #1
 2052 0ad2 BB68     		ldr	r3, [r7, #8]
 2053 0ad4 5A60     		str	r2, [r3, #4]
 2054 0ad6 BB68     		ldr	r3, [r7, #8]
 2055 0ad8 5A68     		ldr	r2, [r3, #4]
 2056 0ada FB6C     		ldr	r3, [r7, #76]
 2057 0adc 9B68     		ldr	r3, [r3, #8]
 2058 0ade 9B69     		ldr	r3, [r3, #24]
 2059 0ae0 9A42     		cmp	r2, r3
 2060 0ae2 0DD9     		bls	.L50
 2061              		.loc 1 31 0 discriminator 1
 2062 0ae4 FB6C     		ldr	r3, [r7, #76]
 2063 0ae6 9B68     		ldr	r3, [r3, #8]
 2064 0ae8 DA69     		ldr	r2, [r3, #28]
 2065 0aea 0132     		adds	r2, r2, #1
 2066 0aec DA61     		str	r2, [r3, #28]
 2067 0aee BB68     		ldr	r3, [r7, #8]
 2068 0af0 5A68     		ldr	r2, [r3, #4]
 2069 0af2 FB6C     		ldr	r3, [r7, #76]
 2070 0af4 9B68     		ldr	r3, [r3, #8]
 2071 0af6 9B69     		ldr	r3, [r3, #24]
 2072 0af8 B2FBF3F2 		udiv	r2, r2, r3
 2073 0afc BB68     		ldr	r3, [r7, #8]
 2074 0afe 9A60     		str	r2, [r3, #8]
 2075              	.L50:
 2076              		.loc 1 31 0 discriminator 2
 2077 0b00 3B6A     		ldr	r3, [r7, #32]
 2078 0b02 0022     		movs	r2, #0
 2079 0b04 DA60     		str	r2, [r3, #12]
 2080 0b06 BB68     		ldr	r3, [r7, #8]
 2081 0b08 1A68     		ldr	r2, [r3]
 2082 0b0a 3B6A     		ldr	r3, [r7, #32]
 2083 0b0c 1A61     		str	r2, [r3, #16]
 2084 0b0e BB68     		ldr	r3, [r7, #8]
 2085 0b10 1B68     		ldr	r3, [r3]
 2086 0b12 002B     		cmp	r3, #0
 2087 0b14 03D0     		beq	.L51
 2088              		.loc 1 31 0 discriminator 1
 2089 0b16 BB68     		ldr	r3, [r7, #8]
 2090 0b18 1B68     		ldr	r3, [r3]
 2091 0b1a 3A6A     		ldr	r2, [r7, #32]
 2092 0b1c DA60     		str	r2, [r3, #12]
 2093              	.L51:
 2094              		.loc 1 31 0 discriminator 2
 2095 0b1e BB68     		ldr	r3, [r7, #8]
 2096 0b20 3A6A     		ldr	r2, [r7, #32]
 2097 0b22 1A60     		str	r2, [r3]
 2098 0b24 3B69     		ldr	r3, [r7, #16]
 2099 0b26 3B62     		str	r3, [r7, #32]
 2100              	.L49:
 2101              		.loc 1 31 0 discriminator 1
 2102 0b28 3B6A     		ldr	r3, [r7, #32]
 2103 0b2a 002B     		cmp	r3, #0
 2104 0b2c BAD1     		bne	.L52
 2105              		.loc 1 31 0 discriminator 3
 2106 0b2e 7B6A     		ldr	r3, [r7, #36]
 2107 0b30 0133     		adds	r3, r3, #1
 2108 0b32 7B62     		str	r3, [r7, #36]
 2109              	.L48:
 2110              		.loc 1 31 0 discriminator 1
 2111 0b34 FB6C     		ldr	r3, [r7, #76]
 2112 0b36 9B68     		ldr	r3, [r3, #8]
 2113 0b38 5A68     		ldr	r2, [r3, #4]
 2114 0b3a 7B6A     		ldr	r3, [r7, #36]
 2115 0b3c 9A42     		cmp	r2, r3
 2116 0b3e A5D8     		bhi	.L53
 2117              		.loc 1 31 0 discriminator 3
 2118 0b40 FB6C     		ldr	r3, [r7, #76]
 2119 0b42 9B68     		ldr	r3, [r3, #8]
 2120 0b44 1B68     		ldr	r3, [r3]
 2121 0b46 1846     		mov	r0, r3
 2122 0b48 FFF7FEFF 		bl	free
 2123 0b4c FB6C     		ldr	r3, [r7, #76]
 2124 0b4e 9B68     		ldr	r3, [r3, #8]
 2125 0b50 FA6C     		ldr	r2, [r7, #76]
 2126 0b52 9268     		ldr	r2, [r2, #8]
 2127 0b54 5268     		ldr	r2, [r2, #4]
 2128 0b56 5200     		lsls	r2, r2, #1
 2129 0b58 5A60     		str	r2, [r3, #4]
 2130 0b5a FB6C     		ldr	r3, [r7, #76]
 2131 0b5c 9B68     		ldr	r3, [r3, #8]
 2132 0b5e 9A68     		ldr	r2, [r3, #8]
 2133 0b60 0132     		adds	r2, r2, #1
 2134 0b62 9A60     		str	r2, [r3, #8]
 2135 0b64 FB6C     		ldr	r3, [r7, #76]
 2136 0b66 9B68     		ldr	r3, [r3, #8]
 2137 0b68 7A69     		ldr	r2, [r7, #20]
 2138 0b6a 1A60     		str	r2, [r3]
 2139 0b6c FB6C     		ldr	r3, [r7, #76]
 2140 0b6e 9A68     		ldr	r2, [r3, #8]
 2141 0b70 FB6C     		ldr	r3, [r7, #76]
 2142 0b72 9B68     		ldr	r3, [r3, #8]
 2143 0b74 D969     		ldr	r1, [r3, #28]
 2144 0b76 FB6C     		ldr	r3, [r7, #76]
 2145 0b78 9B68     		ldr	r3, [r3, #8]
 2146 0b7a DB68     		ldr	r3, [r3, #12]
 2147 0b7c 5B08     		lsrs	r3, r3, #1
 2148 0b7e 9942     		cmp	r1, r3
 2149 0b80 06D9     		bls	.L54
 2150              		.loc 1 31 0 discriminator 1
 2151 0b82 FB6C     		ldr	r3, [r7, #76]
 2152 0b84 9B68     		ldr	r3, [r3, #8]
 2153 0b86 1B6A     		ldr	r3, [r3, #32]
 2154 0b88 0133     		adds	r3, r3, #1
 2155 0b8a 02E0     		b	.L55
 2156              	.L61:
 2157              		.align	2
 2158              	.L60:
 2159 0b8c 00000000 		.word	users
 2160              	.L54:
 2161              		.loc 1 31 0 discriminator 2
 2162 0b90 0023     		movs	r3, #0
 2163              	.L55:
 2164              		.loc 1 31 0 discriminator 3
 2165 0b92 1362     		str	r3, [r2, #32]
 2166 0b94 FB6C     		ldr	r3, [r7, #76]
 2167 0b96 9B68     		ldr	r3, [r3, #8]
 2168 0b98 1B6A     		ldr	r3, [r3, #32]
 2169 0b9a 012B     		cmp	r3, #1
 2170 0b9c 03D9     		bls	.L24
 2171              		.loc 1 31 0 discriminator 1
 2172 0b9e FB6C     		ldr	r3, [r7, #76]
 2173 0ba0 9B68     		ldr	r3, [r3, #8]
 2174 0ba2 0122     		movs	r2, #1
 2175 0ba4 5A62     		str	r2, [r3, #36]
 2176              	.L24:
 2177              	.LBE6:
 2178              	.LBE4:
  32:src/modbus.c  **** 		// id: name of key field
  33:src/modbus.c  **** 	}
  34:src/modbus.c  **** 
  35:src/modbus.c  **** 	s->value = (int) keyValue;
 2179              		.loc 1 35 0 is_stmt 1
 2180 0ba6 3A68     		ldr	r2, [r7]
 2181 0ba8 FB6C     		ldr	r3, [r7, #76]
 2182 0baa 5A60     		str	r2, [r3, #4]
  36:src/modbus.c  **** }
 2183              		.loc 1 36 0
 2184 0bac 5437     		adds	r7, r7, #84
 2185 0bae BD46     		mov	sp, r7
 2186              		@ sp needed
 2187 0bb0 90BD     		pop	{r4, r7, pc}
 2188              		.cfi_endproc
 2189              	.LFE0:
 2191 0bb2 00BF     		.section	.rodata
 2192              		.align	2
 2193              	.LC0:
 2194 0000 4B657920 		.ascii	"Key 0x%x --> Data 0x%x\012\000"
 2194      30782578 
 2194      202D2D3E 
 2194      20446174 
 2194      61203078 
 2195              		.section	.text.putData,"ax",%progbits
 2196              		.align	2
 2197              		.global	putData
 2198              		.thumb
 2199              		.thumb_func
 2201              	putData:
 2202              	.LFB1:
  37:src/modbus.c  **** 
  38:src/modbus.c  **** //Print the data from HASH MAP
  39:src/modbus.c  **** void putData() {
 2203              		.loc 1 39 0
 2204              		.cfi_startproc
 2205              		@ args = 0, pretend = 0, frame = 8
 2206              		@ frame_needed = 1, uses_anonymous_args = 0
 2207 0000 80B5     		push	{r7, lr}
 2208              	.LCFI3:
 2209              		.cfi_def_cfa_offset 8
 2210              		.cfi_offset 7, -8
 2211              		.cfi_offset 14, -4
 2212 0002 82B0     		sub	sp, sp, #8
 2213              	.LCFI4:
 2214              		.cfi_def_cfa_offset 16
 2215 0004 00AF     		add	r7, sp, #0
 2216              	.LCFI5:
 2217              		.cfi_def_cfa_register 7
  40:src/modbus.c  **** 	struct heapStruct *s;
  41:src/modbus.c  **** 
  42:src/modbus.c  **** 	for (s = users; s != NULL; s = (struct heapStruct*) (s->hh.next)) {
 2218              		.loc 1 42 0
 2219 0006 0B4B     		ldr	r3, .L65
 2220 0008 1B68     		ldr	r3, [r3]
 2221 000a 7B60     		str	r3, [r7, #4]
 2222 000c 0BE0     		b	.L63
 2223              	.L64:
  43:src/modbus.c  **** 		printf("Key 0x%x --> Data 0x%x\n", s->key, s->value);
 2224              		.loc 1 43 0 discriminator 2
 2225 000e 7B68     		ldr	r3, [r7, #4]
 2226 0010 1A68     		ldr	r2, [r3]
 2227 0012 7B68     		ldr	r3, [r7, #4]
 2228 0014 5B68     		ldr	r3, [r3, #4]
 2229 0016 0848     		ldr	r0, .L65+4
 2230 0018 1146     		mov	r1, r2
 2231 001a 1A46     		mov	r2, r3
 2232 001c FFF7FEFF 		bl	printf
  42:src/modbus.c  **** 	for (s = users; s != NULL; s = (struct heapStruct*) (s->hh.next)) {
 2233              		.loc 1 42 0 discriminator 2
 2234 0020 7B68     		ldr	r3, [r7, #4]
 2235 0022 1B69     		ldr	r3, [r3, #16]
 2236 0024 7B60     		str	r3, [r7, #4]
 2237              	.L63:
  42:src/modbus.c  **** 	for (s = users; s != NULL; s = (struct heapStruct*) (s->hh.next)) {
 2238              		.loc 1 42 0 is_stmt 0 discriminator 1
 2239 0026 7B68     		ldr	r3, [r7, #4]
 2240 0028 002B     		cmp	r3, #0
 2241 002a F0D1     		bne	.L64
  44:src/modbus.c  **** 	}
  45:src/modbus.c  **** }
 2242              		.loc 1 45 0 is_stmt 1
 2243 002c 0837     		adds	r7, r7, #8
 2244 002e BD46     		mov	sp, r7
 2245              		@ sp needed
 2246 0030 80BD     		pop	{r7, pc}
 2247              	.L66:
 2248 0032 00BF     		.align	2
 2249              	.L65:
 2250 0034 00000000 		.word	users
 2251 0038 00000000 		.word	.LC0
 2252              		.cfi_endproc
 2253              	.LFE1:
 2255              		.section	.text.getData,"ax",%progbits
 2256              		.align	2
 2257              		.global	getData
 2258              		.thumb
 2259              		.thumb_func
 2261              	getData:
 2262              	.LFB2:
  46:src/modbus.c  **** 
  47:src/modbus.c  **** //Fetch the data from HASH MAP
  48:src/modbus.c  **** struct heapStruct *getData(int key) {
 2263              		.loc 1 48 0
 2264              		.cfi_startproc
 2265              		@ args = 0, pretend = 0, frame = 40
 2266              		@ frame_needed = 1, uses_anonymous_args = 0
 2267 0000 80B5     		push	{r7, lr}
 2268              	.LCFI6:
 2269              		.cfi_def_cfa_offset 8
 2270              		.cfi_offset 7, -8
 2271              		.cfi_offset 14, -4
 2272 0002 8AB0     		sub	sp, sp, #40
 2273              	.LCFI7:
 2274              		.cfi_def_cfa_offset 48
 2275 0004 00AF     		add	r7, sp, #0
 2276              	.LCFI8:
 2277              		.cfi_def_cfa_register 7
 2278 0006 7860     		str	r0, [r7, #4]
 2279              	.LBB7:
  49:src/modbus.c  **** 	struct heapStruct *s;
  50:src/modbus.c  **** 	HASH_FIND_INT( users, &key, s);
 2280              		.loc 1 50 0
 2281 0008 0023     		movs	r3, #0
 2282 000a 7B62     		str	r3, [r7, #36]
 2283 000c 774B     		ldr	r3, .L91
 2284 000e 1B68     		ldr	r3, [r3]
 2285 0010 002B     		cmp	r3, #0
 2286 0012 00F0FE81 		beq	.L68
 2287              	.LBB8:
 2288              		.loc 1 50 0 is_stmt 0 discriminator 1
 2289 0016 3B1D     		adds	r3, r7, #4
 2290 0018 3B61     		str	r3, [r7, #16]
 2291 001a 754B     		ldr	r3, .L91+4
 2292 001c 3B62     		str	r3, [r7, #32]
 2293 001e 754B     		ldr	r3, .L91+8
 2294 0020 BB61     		str	r3, [r7, #24]
 2295 0022 BB69     		ldr	r3, [r7, #24]
 2296 0024 FB61     		str	r3, [r7, #28]
 2297 0026 0423     		movs	r3, #4
 2298 0028 7B61     		str	r3, [r7, #20]
 2299 002a BBE0     		b	.L69
 2300              	.L70:
 2301              		.loc 1 50 0 discriminator 2
 2302 002c 3B69     		ldr	r3, [r7, #16]
 2303 002e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2304 0030 1A46     		mov	r2, r3
 2305 0032 3B69     		ldr	r3, [r7, #16]
 2306 0034 0133     		adds	r3, r3, #1
 2307 0036 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2308 0038 1B02     		lsls	r3, r3, #8
 2309 003a 1A44     		add	r2, r2, r3
 2310 003c 3B69     		ldr	r3, [r7, #16]
 2311 003e 0233     		adds	r3, r3, #2
 2312 0040 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2313 0042 1B04     		lsls	r3, r3, #16
 2314 0044 1A44     		add	r2, r2, r3
 2315 0046 3B69     		ldr	r3, [r7, #16]
 2316 0048 0333     		adds	r3, r3, #3
 2317 004a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2318 004c 1B06     		lsls	r3, r3, #24
 2319 004e 1344     		add	r3, r3, r2
 2320 0050 FA69     		ldr	r2, [r7, #28]
 2321 0052 1344     		add	r3, r3, r2
 2322 0054 FB61     		str	r3, [r7, #28]
 2323 0056 3B69     		ldr	r3, [r7, #16]
 2324 0058 0433     		adds	r3, r3, #4
 2325 005a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2326 005c 1A46     		mov	r2, r3
 2327 005e 3B69     		ldr	r3, [r7, #16]
 2328 0060 0533     		adds	r3, r3, #5
 2329 0062 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2330 0064 1B02     		lsls	r3, r3, #8
 2331 0066 1A44     		add	r2, r2, r3
 2332 0068 3B69     		ldr	r3, [r7, #16]
 2333 006a 0633     		adds	r3, r3, #6
 2334 006c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2335 006e 1B04     		lsls	r3, r3, #16
 2336 0070 1A44     		add	r2, r2, r3
 2337 0072 3B69     		ldr	r3, [r7, #16]
 2338 0074 0733     		adds	r3, r3, #7
 2339 0076 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2340 0078 1B06     		lsls	r3, r3, #24
 2341 007a 1344     		add	r3, r3, r2
 2342 007c BA69     		ldr	r2, [r7, #24]
 2343 007e 1344     		add	r3, r3, r2
 2344 0080 BB61     		str	r3, [r7, #24]
 2345 0082 3B69     		ldr	r3, [r7, #16]
 2346 0084 0833     		adds	r3, r3, #8
 2347 0086 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2348 0088 1A46     		mov	r2, r3
 2349 008a 3B69     		ldr	r3, [r7, #16]
 2350 008c 0933     		adds	r3, r3, #9
 2351 008e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2352 0090 1B02     		lsls	r3, r3, #8
 2353 0092 1A44     		add	r2, r2, r3
 2354 0094 3B69     		ldr	r3, [r7, #16]
 2355 0096 0A33     		adds	r3, r3, #10
 2356 0098 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2357 009a 1B04     		lsls	r3, r3, #16
 2358 009c 1A44     		add	r2, r2, r3
 2359 009e 3B69     		ldr	r3, [r7, #16]
 2360 00a0 0B33     		adds	r3, r3, #11
 2361 00a2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2362 00a4 1B06     		lsls	r3, r3, #24
 2363 00a6 1344     		add	r3, r3, r2
 2364 00a8 3A6A     		ldr	r2, [r7, #32]
 2365 00aa 1344     		add	r3, r3, r2
 2366 00ac 3B62     		str	r3, [r7, #32]
 2367 00ae FA69     		ldr	r2, [r7, #28]
 2368 00b0 BB69     		ldr	r3, [r7, #24]
 2369 00b2 D31A     		subs	r3, r2, r3
 2370 00b4 FB61     		str	r3, [r7, #28]
 2371 00b6 FA69     		ldr	r2, [r7, #28]
 2372 00b8 3B6A     		ldr	r3, [r7, #32]
 2373 00ba D31A     		subs	r3, r2, r3
 2374 00bc FB61     		str	r3, [r7, #28]
 2375 00be 3B6A     		ldr	r3, [r7, #32]
 2376 00c0 5B0B     		lsrs	r3, r3, #13
 2377 00c2 FA69     		ldr	r2, [r7, #28]
 2378 00c4 5340     		eors	r3, r3, r2
 2379 00c6 FB61     		str	r3, [r7, #28]
 2380 00c8 BA69     		ldr	r2, [r7, #24]
 2381 00ca 3B6A     		ldr	r3, [r7, #32]
 2382 00cc D31A     		subs	r3, r2, r3
 2383 00ce BB61     		str	r3, [r7, #24]
 2384 00d0 BA69     		ldr	r2, [r7, #24]
 2385 00d2 FB69     		ldr	r3, [r7, #28]
 2386 00d4 D31A     		subs	r3, r2, r3
 2387 00d6 BB61     		str	r3, [r7, #24]
 2388 00d8 FB69     		ldr	r3, [r7, #28]
 2389 00da 1B02     		lsls	r3, r3, #8
 2390 00dc BA69     		ldr	r2, [r7, #24]
 2391 00de 5340     		eors	r3, r3, r2
 2392 00e0 BB61     		str	r3, [r7, #24]
 2393 00e2 3A6A     		ldr	r2, [r7, #32]
 2394 00e4 FB69     		ldr	r3, [r7, #28]
 2395 00e6 D31A     		subs	r3, r2, r3
 2396 00e8 3B62     		str	r3, [r7, #32]
 2397 00ea 3A6A     		ldr	r2, [r7, #32]
 2398 00ec BB69     		ldr	r3, [r7, #24]
 2399 00ee D31A     		subs	r3, r2, r3
 2400 00f0 3B62     		str	r3, [r7, #32]
 2401 00f2 BB69     		ldr	r3, [r7, #24]
 2402 00f4 5B0B     		lsrs	r3, r3, #13
 2403 00f6 3A6A     		ldr	r2, [r7, #32]
 2404 00f8 5340     		eors	r3, r3, r2
 2405 00fa 3B62     		str	r3, [r7, #32]
 2406 00fc FA69     		ldr	r2, [r7, #28]
 2407 00fe BB69     		ldr	r3, [r7, #24]
 2408 0100 D31A     		subs	r3, r2, r3
 2409 0102 FB61     		str	r3, [r7, #28]
 2410 0104 FA69     		ldr	r2, [r7, #28]
 2411 0106 3B6A     		ldr	r3, [r7, #32]
 2412 0108 D31A     		subs	r3, r2, r3
 2413 010a FB61     		str	r3, [r7, #28]
 2414 010c 3B6A     		ldr	r3, [r7, #32]
 2415 010e 1B0B     		lsrs	r3, r3, #12
 2416 0110 FA69     		ldr	r2, [r7, #28]
 2417 0112 5340     		eors	r3, r3, r2
 2418 0114 FB61     		str	r3, [r7, #28]
 2419 0116 BA69     		ldr	r2, [r7, #24]
 2420 0118 3B6A     		ldr	r3, [r7, #32]
 2421 011a D31A     		subs	r3, r2, r3
 2422 011c BB61     		str	r3, [r7, #24]
 2423 011e BA69     		ldr	r2, [r7, #24]
 2424 0120 FB69     		ldr	r3, [r7, #28]
 2425 0122 D31A     		subs	r3, r2, r3
 2426 0124 BB61     		str	r3, [r7, #24]
 2427 0126 FB69     		ldr	r3, [r7, #28]
 2428 0128 1B04     		lsls	r3, r3, #16
 2429 012a BA69     		ldr	r2, [r7, #24]
 2430 012c 5340     		eors	r3, r3, r2
 2431 012e BB61     		str	r3, [r7, #24]
 2432 0130 3A6A     		ldr	r2, [r7, #32]
 2433 0132 FB69     		ldr	r3, [r7, #28]
 2434 0134 D31A     		subs	r3, r2, r3
 2435 0136 3B62     		str	r3, [r7, #32]
 2436 0138 3A6A     		ldr	r2, [r7, #32]
 2437 013a BB69     		ldr	r3, [r7, #24]
 2438 013c D31A     		subs	r3, r2, r3
 2439 013e 3B62     		str	r3, [r7, #32]
 2440 0140 BB69     		ldr	r3, [r7, #24]
 2441 0142 5B09     		lsrs	r3, r3, #5
 2442 0144 3A6A     		ldr	r2, [r7, #32]
 2443 0146 5340     		eors	r3, r3, r2
 2444 0148 3B62     		str	r3, [r7, #32]
 2445 014a FA69     		ldr	r2, [r7, #28]
 2446 014c BB69     		ldr	r3, [r7, #24]
 2447 014e D31A     		subs	r3, r2, r3
 2448 0150 FB61     		str	r3, [r7, #28]
 2449 0152 FA69     		ldr	r2, [r7, #28]
 2450 0154 3B6A     		ldr	r3, [r7, #32]
 2451 0156 D31A     		subs	r3, r2, r3
 2452 0158 FB61     		str	r3, [r7, #28]
 2453 015a 3B6A     		ldr	r3, [r7, #32]
 2454 015c DB08     		lsrs	r3, r3, #3
 2455 015e FA69     		ldr	r2, [r7, #28]
 2456 0160 5340     		eors	r3, r3, r2
 2457 0162 FB61     		str	r3, [r7, #28]
 2458 0164 BA69     		ldr	r2, [r7, #24]
 2459 0166 3B6A     		ldr	r3, [r7, #32]
 2460 0168 D31A     		subs	r3, r2, r3
 2461 016a BB61     		str	r3, [r7, #24]
 2462 016c BA69     		ldr	r2, [r7, #24]
 2463 016e FB69     		ldr	r3, [r7, #28]
 2464 0170 D31A     		subs	r3, r2, r3
 2465 0172 BB61     		str	r3, [r7, #24]
 2466 0174 FB69     		ldr	r3, [r7, #28]
 2467 0176 9B02     		lsls	r3, r3, #10
 2468 0178 BA69     		ldr	r2, [r7, #24]
 2469 017a 5340     		eors	r3, r3, r2
 2470 017c BB61     		str	r3, [r7, #24]
 2471 017e 3A6A     		ldr	r2, [r7, #32]
 2472 0180 FB69     		ldr	r3, [r7, #28]
 2473 0182 D31A     		subs	r3, r2, r3
 2474 0184 3B62     		str	r3, [r7, #32]
 2475 0186 3A6A     		ldr	r2, [r7, #32]
 2476 0188 BB69     		ldr	r3, [r7, #24]
 2477 018a D31A     		subs	r3, r2, r3
 2478 018c 3B62     		str	r3, [r7, #32]
 2479 018e BB69     		ldr	r3, [r7, #24]
 2480 0190 DB0B     		lsrs	r3, r3, #15
 2481 0192 3A6A     		ldr	r2, [r7, #32]
 2482 0194 5340     		eors	r3, r3, r2
 2483 0196 3B62     		str	r3, [r7, #32]
 2484 0198 3B69     		ldr	r3, [r7, #16]
 2485 019a 0C33     		adds	r3, r3, #12
 2486 019c 3B61     		str	r3, [r7, #16]
 2487 019e 7B69     		ldr	r3, [r7, #20]
 2488 01a0 0C3B     		subs	r3, r3, #12
 2489 01a2 7B61     		str	r3, [r7, #20]
 2490              	.L69:
 2491              		.loc 1 50 0 discriminator 1
 2492 01a4 7B69     		ldr	r3, [r7, #20]
 2493 01a6 0B2B     		cmp	r3, #11
 2494 01a8 3FF640AF 		bhi	.L70
 2495              		.loc 1 50 0 discriminator 3
 2496 01ac 3B6A     		ldr	r3, [r7, #32]
 2497 01ae 0433     		adds	r3, r3, #4
 2498 01b0 3B62     		str	r3, [r7, #32]
 2499 01b2 7B69     		ldr	r3, [r7, #20]
 2500 01b4 013B     		subs	r3, r3, #1
 2501 01b6 0A2B     		cmp	r3, #10
 2502 01b8 68D8     		bhi	.L71
 2503 01ba 01A2     		adr	r2, .L73
 2504 01bc 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 2505              		.p2align 2
 2506              	.L73:
 2507 01c0 83020000 		.word	.L72+1
 2508 01c4 75020000 		.word	.L74+1
 2509 01c8 67020000 		.word	.L75+1
 2510 01cc 59020000 		.word	.L76+1
 2511 01d0 4D020000 		.word	.L77+1
 2512 01d4 3F020000 		.word	.L78+1
 2513 01d8 31020000 		.word	.L79+1
 2514 01dc 23020000 		.word	.L80+1
 2515 01e0 15020000 		.word	.L81+1
 2516 01e4 07020000 		.word	.L82+1
 2517 01e8 F9010000 		.word	.L83+1
 2518              	.L92:
 2519              		.align	2
 2520              	.L91:
 2521 01ec 00000000 		.word	users
 2522 01f0 EFBEEDFE 		.word	-17973521
 2523 01f4 B979379E 		.word	-1640531527
 2524              	.L83:
 2525              		.loc 1 50 0 discriminator 12
 2526 01f8 3B69     		ldr	r3, [r7, #16]
 2527 01fa 0A33     		adds	r3, r3, #10
 2528 01fc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2529 01fe 1B06     		lsls	r3, r3, #24
 2530 0200 3A6A     		ldr	r2, [r7, #32]
 2531 0202 1344     		add	r3, r3, r2
 2532 0204 3B62     		str	r3, [r7, #32]
 2533              	.L82:
 2534              		.loc 1 50 0 discriminator 11
 2535 0206 3B69     		ldr	r3, [r7, #16]
 2536 0208 0933     		adds	r3, r3, #9
 2537 020a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2538 020c 1B04     		lsls	r3, r3, #16
 2539 020e 3A6A     		ldr	r2, [r7, #32]
 2540 0210 1344     		add	r3, r3, r2
 2541 0212 3B62     		str	r3, [r7, #32]
 2542              	.L81:
 2543              		.loc 1 50 0 discriminator 10
 2544 0214 3B69     		ldr	r3, [r7, #16]
 2545 0216 0833     		adds	r3, r3, #8
 2546 0218 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2547 021a 1B02     		lsls	r3, r3, #8
 2548 021c 3A6A     		ldr	r2, [r7, #32]
 2549 021e 1344     		add	r3, r3, r2
 2550 0220 3B62     		str	r3, [r7, #32]
 2551              	.L80:
 2552              		.loc 1 50 0 discriminator 9
 2553 0222 3B69     		ldr	r3, [r7, #16]
 2554 0224 0733     		adds	r3, r3, #7
 2555 0226 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2556 0228 1B06     		lsls	r3, r3, #24
 2557 022a BA69     		ldr	r2, [r7, #24]
 2558 022c 1344     		add	r3, r3, r2
 2559 022e BB61     		str	r3, [r7, #24]
 2560              	.L79:
 2561              		.loc 1 50 0 discriminator 8
 2562 0230 3B69     		ldr	r3, [r7, #16]
 2563 0232 0633     		adds	r3, r3, #6
 2564 0234 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2565 0236 1B04     		lsls	r3, r3, #16
 2566 0238 BA69     		ldr	r2, [r7, #24]
 2567 023a 1344     		add	r3, r3, r2
 2568 023c BB61     		str	r3, [r7, #24]
 2569              	.L78:
 2570              		.loc 1 50 0 discriminator 7
 2571 023e 3B69     		ldr	r3, [r7, #16]
 2572 0240 0533     		adds	r3, r3, #5
 2573 0242 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2574 0244 1B02     		lsls	r3, r3, #8
 2575 0246 BA69     		ldr	r2, [r7, #24]
 2576 0248 1344     		add	r3, r3, r2
 2577 024a BB61     		str	r3, [r7, #24]
 2578              	.L77:
 2579              		.loc 1 50 0 discriminator 6
 2580 024c 3B69     		ldr	r3, [r7, #16]
 2581 024e 0433     		adds	r3, r3, #4
 2582 0250 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2583 0252 BA69     		ldr	r2, [r7, #24]
 2584 0254 1344     		add	r3, r3, r2
 2585 0256 BB61     		str	r3, [r7, #24]
 2586              	.L76:
 2587              		.loc 1 50 0 discriminator 5
 2588 0258 3B69     		ldr	r3, [r7, #16]
 2589 025a 0333     		adds	r3, r3, #3
 2590 025c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2591 025e 1B06     		lsls	r3, r3, #24
 2592 0260 FA69     		ldr	r2, [r7, #28]
 2593 0262 1344     		add	r3, r3, r2
 2594 0264 FB61     		str	r3, [r7, #28]
 2595              	.L75:
 2596              		.loc 1 50 0 discriminator 4
 2597 0266 3B69     		ldr	r3, [r7, #16]
 2598 0268 0233     		adds	r3, r3, #2
 2599 026a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2600 026c 1B04     		lsls	r3, r3, #16
 2601 026e FA69     		ldr	r2, [r7, #28]
 2602 0270 1344     		add	r3, r3, r2
 2603 0272 FB61     		str	r3, [r7, #28]
 2604              	.L74:
 2605              		.loc 1 50 0 discriminator 3
 2606 0274 3B69     		ldr	r3, [r7, #16]
 2607 0276 0133     		adds	r3, r3, #1
 2608 0278 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2609 027a 1B02     		lsls	r3, r3, #8
 2610 027c FA69     		ldr	r2, [r7, #28]
 2611 027e 1344     		add	r3, r3, r2
 2612 0280 FB61     		str	r3, [r7, #28]
 2613              	.L72:
 2614              		.loc 1 50 0 discriminator 2
 2615 0282 3B69     		ldr	r3, [r7, #16]
 2616 0284 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2617 0286 FA69     		ldr	r2, [r7, #28]
 2618 0288 1344     		add	r3, r3, r2
 2619 028a FB61     		str	r3, [r7, #28]
 2620              	.L71:
 2621              		.loc 1 50 0 discriminator 1
 2622 028c FA69     		ldr	r2, [r7, #28]
 2623 028e BB69     		ldr	r3, [r7, #24]
 2624 0290 D31A     		subs	r3, r2, r3
 2625 0292 FB61     		str	r3, [r7, #28]
 2626 0294 FA69     		ldr	r2, [r7, #28]
 2627 0296 3B6A     		ldr	r3, [r7, #32]
 2628 0298 D31A     		subs	r3, r2, r3
 2629 029a FB61     		str	r3, [r7, #28]
 2630 029c 3B6A     		ldr	r3, [r7, #32]
 2631 029e 5B0B     		lsrs	r3, r3, #13
 2632 02a0 FA69     		ldr	r2, [r7, #28]
 2633 02a2 5340     		eors	r3, r3, r2
 2634 02a4 FB61     		str	r3, [r7, #28]
 2635 02a6 BA69     		ldr	r2, [r7, #24]
 2636 02a8 3B6A     		ldr	r3, [r7, #32]
 2637 02aa D31A     		subs	r3, r2, r3
 2638 02ac BB61     		str	r3, [r7, #24]
 2639 02ae BA69     		ldr	r2, [r7, #24]
 2640 02b0 FB69     		ldr	r3, [r7, #28]
 2641 02b2 D31A     		subs	r3, r2, r3
 2642 02b4 BB61     		str	r3, [r7, #24]
 2643 02b6 FB69     		ldr	r3, [r7, #28]
 2644 02b8 1B02     		lsls	r3, r3, #8
 2645 02ba BA69     		ldr	r2, [r7, #24]
 2646 02bc 5340     		eors	r3, r3, r2
 2647 02be BB61     		str	r3, [r7, #24]
 2648 02c0 3A6A     		ldr	r2, [r7, #32]
 2649 02c2 FB69     		ldr	r3, [r7, #28]
 2650 02c4 D31A     		subs	r3, r2, r3
 2651 02c6 3B62     		str	r3, [r7, #32]
 2652 02c8 3A6A     		ldr	r2, [r7, #32]
 2653 02ca BB69     		ldr	r3, [r7, #24]
 2654 02cc D31A     		subs	r3, r2, r3
 2655 02ce 3B62     		str	r3, [r7, #32]
 2656 02d0 BB69     		ldr	r3, [r7, #24]
 2657 02d2 5B0B     		lsrs	r3, r3, #13
 2658 02d4 3A6A     		ldr	r2, [r7, #32]
 2659 02d6 5340     		eors	r3, r3, r2
 2660 02d8 3B62     		str	r3, [r7, #32]
 2661 02da FA69     		ldr	r2, [r7, #28]
 2662 02dc BB69     		ldr	r3, [r7, #24]
 2663 02de D31A     		subs	r3, r2, r3
 2664 02e0 FB61     		str	r3, [r7, #28]
 2665 02e2 FA69     		ldr	r2, [r7, #28]
 2666 02e4 3B6A     		ldr	r3, [r7, #32]
 2667 02e6 D31A     		subs	r3, r2, r3
 2668 02e8 FB61     		str	r3, [r7, #28]
 2669 02ea 3B6A     		ldr	r3, [r7, #32]
 2670 02ec 1B0B     		lsrs	r3, r3, #12
 2671 02ee FA69     		ldr	r2, [r7, #28]
 2672 02f0 5340     		eors	r3, r3, r2
 2673 02f2 FB61     		str	r3, [r7, #28]
 2674 02f4 BA69     		ldr	r2, [r7, #24]
 2675 02f6 3B6A     		ldr	r3, [r7, #32]
 2676 02f8 D31A     		subs	r3, r2, r3
 2677 02fa BB61     		str	r3, [r7, #24]
 2678 02fc BA69     		ldr	r2, [r7, #24]
 2679 02fe FB69     		ldr	r3, [r7, #28]
 2680 0300 D31A     		subs	r3, r2, r3
 2681 0302 BB61     		str	r3, [r7, #24]
 2682 0304 FB69     		ldr	r3, [r7, #28]
 2683 0306 1B04     		lsls	r3, r3, #16
 2684 0308 BA69     		ldr	r2, [r7, #24]
 2685 030a 5340     		eors	r3, r3, r2
 2686 030c BB61     		str	r3, [r7, #24]
 2687 030e 3A6A     		ldr	r2, [r7, #32]
 2688 0310 FB69     		ldr	r3, [r7, #28]
 2689 0312 D31A     		subs	r3, r2, r3
 2690 0314 3B62     		str	r3, [r7, #32]
 2691 0316 3A6A     		ldr	r2, [r7, #32]
 2692 0318 BB69     		ldr	r3, [r7, #24]
 2693 031a D31A     		subs	r3, r2, r3
 2694 031c 3B62     		str	r3, [r7, #32]
 2695 031e BB69     		ldr	r3, [r7, #24]
 2696 0320 5B09     		lsrs	r3, r3, #5
 2697 0322 3A6A     		ldr	r2, [r7, #32]
 2698 0324 5340     		eors	r3, r3, r2
 2699 0326 3B62     		str	r3, [r7, #32]
 2700 0328 FA69     		ldr	r2, [r7, #28]
 2701 032a BB69     		ldr	r3, [r7, #24]
 2702 032c D31A     		subs	r3, r2, r3
 2703 032e FB61     		str	r3, [r7, #28]
 2704 0330 FA69     		ldr	r2, [r7, #28]
 2705 0332 3B6A     		ldr	r3, [r7, #32]
 2706 0334 D31A     		subs	r3, r2, r3
 2707 0336 FB61     		str	r3, [r7, #28]
 2708 0338 3B6A     		ldr	r3, [r7, #32]
 2709 033a DB08     		lsrs	r3, r3, #3
 2710 033c FA69     		ldr	r2, [r7, #28]
 2711 033e 5340     		eors	r3, r3, r2
 2712 0340 FB61     		str	r3, [r7, #28]
 2713 0342 BA69     		ldr	r2, [r7, #24]
 2714 0344 3B6A     		ldr	r3, [r7, #32]
 2715 0346 D31A     		subs	r3, r2, r3
 2716 0348 BB61     		str	r3, [r7, #24]
 2717 034a BA69     		ldr	r2, [r7, #24]
 2718 034c FB69     		ldr	r3, [r7, #28]
 2719 034e D31A     		subs	r3, r2, r3
 2720 0350 BB61     		str	r3, [r7, #24]
 2721 0352 FB69     		ldr	r3, [r7, #28]
 2722 0354 9B02     		lsls	r3, r3, #10
 2723 0356 BA69     		ldr	r2, [r7, #24]
 2724 0358 5340     		eors	r3, r3, r2
 2725 035a BB61     		str	r3, [r7, #24]
 2726 035c 3A6A     		ldr	r2, [r7, #32]
 2727 035e FB69     		ldr	r3, [r7, #28]
 2728 0360 D31A     		subs	r3, r2, r3
 2729 0362 3B62     		str	r3, [r7, #32]
 2730 0364 3A6A     		ldr	r2, [r7, #32]
 2731 0366 BB69     		ldr	r3, [r7, #24]
 2732 0368 D31A     		subs	r3, r2, r3
 2733 036a 3B62     		str	r3, [r7, #32]
 2734 036c BB69     		ldr	r3, [r7, #24]
 2735 036e DB0B     		lsrs	r3, r3, #15
 2736 0370 3A6A     		ldr	r2, [r7, #32]
 2737 0372 5340     		eors	r3, r3, r2
 2738 0374 3B62     		str	r3, [r7, #32]
 2739 0376 294B     		ldr	r3, .L93
 2740 0378 1B68     		ldr	r3, [r3]
 2741 037a 9B68     		ldr	r3, [r3, #8]
 2742 037c 5B68     		ldr	r3, [r3, #4]
 2743 037e 5A1E     		subs	r2, r3, #1
 2744 0380 3B6A     		ldr	r3, [r7, #32]
 2745 0382 1340     		ands	r3, r3, r2
 2746 0384 FB60     		str	r3, [r7, #12]
 2747              	.LBE8:
 2748 0386 254B     		ldr	r3, .L93
 2749 0388 1B68     		ldr	r3, [r3]
 2750 038a 9B68     		ldr	r3, [r3, #8]
 2751 038c 1968     		ldr	r1, [r3]
 2752 038e FA68     		ldr	r2, [r7, #12]
 2753 0390 1346     		mov	r3, r2
 2754 0392 5B00     		lsls	r3, r3, #1
 2755 0394 1344     		add	r3, r3, r2
 2756 0396 9B00     		lsls	r3, r3, #2
 2757 0398 0B44     		add	r3, r3, r1
 2758 039a 1B68     		ldr	r3, [r3]
 2759 039c 002B     		cmp	r3, #0
 2760 039e 12D0     		beq	.L84
 2761 03a0 1E4B     		ldr	r3, .L93
 2762 03a2 1B68     		ldr	r3, [r3]
 2763 03a4 9B68     		ldr	r3, [r3, #8]
 2764 03a6 1968     		ldr	r1, [r3]
 2765 03a8 FA68     		ldr	r2, [r7, #12]
 2766 03aa 1346     		mov	r3, r2
 2767 03ac 5B00     		lsls	r3, r3, #1
 2768 03ae 1344     		add	r3, r3, r2
 2769 03b0 9B00     		lsls	r3, r3, #2
 2770 03b2 0B44     		add	r3, r3, r1
 2771 03b4 1A68     		ldr	r2, [r3]
 2772 03b6 194B     		ldr	r3, .L93
 2773 03b8 1B68     		ldr	r3, [r3]
 2774 03ba 9B68     		ldr	r3, [r3, #8]
 2775 03bc 5B69     		ldr	r3, [r3, #20]
 2776 03be 5B42     		negs	r3, r3
 2777 03c0 1344     		add	r3, r3, r2
 2778 03c2 7B62     		str	r3, [r7, #36]
 2779 03c4 22E0     		b	.L86
 2780              	.L84:
 2781              		.loc 1 50 0 discriminator 2
 2782 03c6 0023     		movs	r3, #0
 2783 03c8 7B62     		str	r3, [r7, #36]
 2784 03ca 1FE0     		b	.L86
 2785              	.L89:
 2786 03cc 7B6A     		ldr	r3, [r7, #36]
 2787 03ce 1B6A     		ldr	r3, [r3, #32]
 2788 03d0 042B     		cmp	r3, #4
 2789 03d2 0BD1     		bne	.L87
 2790              		.loc 1 50 0 discriminator 1
 2791 03d4 7B6A     		ldr	r3, [r7, #36]
 2792 03d6 DA69     		ldr	r2, [r3, #28]
 2793 03d8 3B1D     		adds	r3, r7, #4
 2794 03da 1046     		mov	r0, r2
 2795 03dc 1946     		mov	r1, r3
 2796 03de 0422     		movs	r2, #4
 2797 03e0 FFF7FEFF 		bl	memcmp
 2798 03e4 0346     		mov	r3, r0
 2799 03e6 002B     		cmp	r3, #0
 2800 03e8 00D1     		bne	.L87
 2801 03ea 12E0     		b	.L68
 2802              	.L87:
 2803              		.loc 1 50 0 discriminator 2
 2804 03ec 7B6A     		ldr	r3, [r7, #36]
 2805 03ee 9B69     		ldr	r3, [r3, #24]
 2806 03f0 002B     		cmp	r3, #0
 2807 03f2 09D0     		beq	.L88
 2808              		.loc 1 50 0 discriminator 1
 2809 03f4 7B6A     		ldr	r3, [r7, #36]
 2810 03f6 9A69     		ldr	r2, [r3, #24]
 2811 03f8 084B     		ldr	r3, .L93
 2812 03fa 1B68     		ldr	r3, [r3]
 2813 03fc 9B68     		ldr	r3, [r3, #8]
 2814 03fe 5B69     		ldr	r3, [r3, #20]
 2815 0400 5B42     		negs	r3, r3
 2816 0402 1344     		add	r3, r3, r2
 2817 0404 7B62     		str	r3, [r7, #36]
 2818 0406 01E0     		b	.L86
 2819              	.L88:
 2820              		.loc 1 50 0 discriminator 2
 2821 0408 0023     		movs	r3, #0
 2822 040a 7B62     		str	r3, [r7, #36]
 2823              	.L86:
 2824              		.loc 1 50 0 discriminator 1
 2825 040c 7B6A     		ldr	r3, [r7, #36]
 2826 040e 002B     		cmp	r3, #0
 2827 0410 DCD1     		bne	.L89
 2828              	.L68:
 2829              	.LBE7:
  51:src/modbus.c  **** 	//s: output pointer
  52:src/modbus.c  **** 	//printf("Data: 0x%x\n", s ? s->name : "unknown");
  53:src/modbus.c  **** 	return s;
 2830              		.loc 1 53 0 is_stmt 1
 2831 0412 7B6A     		ldr	r3, [r7, #36]
  54:src/modbus.c  **** }
 2832              		.loc 1 54 0
 2833 0414 1846     		mov	r0, r3
 2834 0416 2837     		adds	r7, r7, #40
 2835 0418 BD46     		mov	sp, r7
 2836              		@ sp needed
 2837 041a 80BD     		pop	{r7, pc}
 2838              	.L94:
 2839              		.align	2
 2840              	.L93:
 2841 041c 00000000 		.word	users
 2842              		.cfi_endproc
 2843              	.LFE2:
 2845              		.section	.text.validateSlaveID,"ax",%progbits
 2846              		.align	2
 2847              		.global	validateSlaveID
 2848              		.thumb
 2849              		.thumb_func
 2851              	validateSlaveID:
 2852              	.LFB3:
  55:src/modbus.c  **** 
  56:src/modbus.c  **** // MODBUS :
  57:src/modbus.c  **** 
  58:src/modbus.c  **** //Validating the slaveID
  59:src/modbus.c  **** uint32_t validateSlaveID(uint32_t *qPacket, uint32_t deviceID) {
 2853              		.loc 1 59 0
 2854              		.cfi_startproc
 2855              		@ args = 0, pretend = 0, frame = 8
 2856              		@ frame_needed = 1, uses_anonymous_args = 0
 2857              		@ link register save eliminated.
 2858 0000 80B4     		push	{r7}
 2859              	.LCFI9:
 2860              		.cfi_def_cfa_offset 4
 2861              		.cfi_offset 7, -4
 2862 0002 83B0     		sub	sp, sp, #12
 2863              	.LCFI10:
 2864              		.cfi_def_cfa_offset 16
 2865 0004 00AF     		add	r7, sp, #0
 2866              	.LCFI11:
 2867              		.cfi_def_cfa_register 7
 2868 0006 7860     		str	r0, [r7, #4]
 2869 0008 3960     		str	r1, [r7]
  60:src/modbus.c  **** 	if (*qPacket == deviceID) {
 2870              		.loc 1 60 0
 2871 000a 7B68     		ldr	r3, [r7, #4]
 2872 000c 1A68     		ldr	r2, [r3]
 2873 000e 3B68     		ldr	r3, [r7]
 2874 0010 9A42     		cmp	r2, r3
 2875 0012 0BD1     		bne	.L96
  61:src/modbus.c  **** 
  62:src/modbus.c  **** 		//Copy deviceID into repose packet
  63:src/modbus.c  **** 		*rPacket = *qPacket;
 2876              		.loc 1 63 0
 2877 0014 094B     		ldr	r3, .L98
 2878 0016 1B68     		ldr	r3, [r3]
 2879 0018 7A68     		ldr	r2, [r7, #4]
 2880 001a 1268     		ldr	r2, [r2]
 2881 001c 1A60     		str	r2, [r3]
  64:src/modbus.c  **** 		//printf("%d\n",*rPacket);
  65:src/modbus.c  **** 		rPacket++;
 2882              		.loc 1 65 0
 2883 001e 074B     		ldr	r3, .L98
 2884 0020 1B68     		ldr	r3, [r3]
 2885 0022 1A1D     		adds	r2, r3, #4
 2886 0024 054B     		ldr	r3, .L98
 2887 0026 1A60     		str	r2, [r3]
  66:src/modbus.c  **** 		return 1;
 2888              		.loc 1 66 0
 2889 0028 0123     		movs	r3, #1
 2890 002a 00E0     		b	.L97
 2891              	.L96:
  67:src/modbus.c  **** 	} else {
  68:src/modbus.c  **** 		return 0;
 2892              		.loc 1 68 0
 2893 002c 0023     		movs	r3, #0
 2894              	.L97:
  69:src/modbus.c  **** 	}
  70:src/modbus.c  **** }
 2895              		.loc 1 70 0
 2896 002e 1846     		mov	r0, r3
 2897 0030 0C37     		adds	r7, r7, #12
 2898 0032 BD46     		mov	sp, r7
 2899              		@ sp needed
 2900 0034 5DF8047B 		ldr	r7, [sp], #4
 2901 0038 7047     		bx	lr
 2902              	.L99:
 2903 003a 00BF     		.align	2
 2904              	.L98:
 2905 003c 00000000 		.word	rPacket
 2906              		.cfi_endproc
 2907              	.LFE3:
 2909              		.section	.text.validateCrc,"ax",%progbits
 2910              		.align	2
 2911              		.global	validateCrc
 2912              		.thumb
 2913              		.thumb_func
 2915              	validateCrc:
 2916              	.LFB4:
  71:src/modbus.c  **** 
  72:src/modbus.c  **** uint32_t validateCrc(uint32_t *qPacket,uint32_t usDataLen,uint32_t *tempCRC){
 2917              		.loc 1 72 0
 2918              		.cfi_startproc
 2919              		@ args = 0, pretend = 0, frame = 32
 2920              		@ frame_needed = 1, uses_anonymous_args = 0
 2921              		@ link register save eliminated.
 2922 0000 80B4     		push	{r7}
 2923              	.LCFI12:
 2924              		.cfi_def_cfa_offset 4
 2925              		.cfi_offset 7, -4
 2926 0002 89B0     		sub	sp, sp, #36
 2927              	.LCFI13:
 2928              		.cfi_def_cfa_offset 40
 2929 0004 00AF     		add	r7, sp, #0
 2930              	.LCFI14:
 2931              		.cfi_def_cfa_register 7
 2932 0006 F860     		str	r0, [r7, #12]
 2933 0008 B960     		str	r1, [r7, #8]
 2934 000a 7A60     		str	r2, [r7, #4]
  73:src/modbus.c  **** 
  74:src/modbus.c  **** 	/*//CRC 16
  75:src/modbus.c  **** 	uint32_t CRC16(uint32_t *qPacket, uint32_t usDataLen) {*/
  76:src/modbus.c  **** 
  77:src/modbus.c  **** 		uint32_t ucrcHi = 0xFF;
 2935              		.loc 1 77 0
 2936 000c FF23     		movs	r3, #255
 2937 000e FB61     		str	r3, [r7, #28]
  78:src/modbus.c  **** 		uint32_t ucrcLo = 0xFF;
 2938              		.loc 1 78 0
 2939 0010 FF23     		movs	r3, #255
 2940 0012 BB61     		str	r3, [r7, #24]
  79:src/modbus.c  **** 		uint32_t iIndex;
  80:src/modbus.c  **** 
  81:src/modbus.c  **** 		while(usDataLen--){
 2941              		.loc 1 81 0
 2942 0014 12E0     		b	.L101
 2943              	.L102:
  82:src/modbus.c  **** 			iIndex = ucrcLo ^ *(qPacket++);
 2944              		.loc 1 82 0
 2945 0016 FB68     		ldr	r3, [r7, #12]
 2946 0018 1A1D     		adds	r2, r3, #4
 2947 001a FA60     		str	r2, [r7, #12]
 2948 001c 1A68     		ldr	r2, [r3]
 2949 001e BB69     		ldr	r3, [r7, #24]
 2950 0020 5340     		eors	r3, r3, r2
 2951 0022 7B61     		str	r3, [r7, #20]
  83:src/modbus.c  **** 			ucrcLo = ucrcHi ^ crcHi[iIndex];
 2952              		.loc 1 83 0
 2953 0024 124B     		ldr	r3, .L105
 2954 0026 7A69     		ldr	r2, [r7, #20]
 2955 0028 53F82220 		ldr	r2, [r3, r2, lsl #2]
 2956 002c FB69     		ldr	r3, [r7, #28]
 2957 002e 5340     		eors	r3, r3, r2
 2958 0030 BB61     		str	r3, [r7, #24]
  84:src/modbus.c  **** 			ucrcHi = crcLo[iIndex];
 2959              		.loc 1 84 0
 2960 0032 104B     		ldr	r3, .L105+4
 2961 0034 7A69     		ldr	r2, [r7, #20]
 2962 0036 53F82230 		ldr	r3, [r3, r2, lsl #2]
 2963 003a FB61     		str	r3, [r7, #28]
 2964              	.L101:
  81:src/modbus.c  **** 		while(usDataLen--){
 2965              		.loc 1 81 0 discriminator 1
 2966 003c BB68     		ldr	r3, [r7, #8]
 2967 003e 5A1E     		subs	r2, r3, #1
 2968 0040 BA60     		str	r2, [r7, #8]
 2969 0042 002B     		cmp	r3, #0
 2970 0044 E7D1     		bne	.L102
  85:src/modbus.c  **** 		}
  86:src/modbus.c  **** 		//ucrcHi = ucrcHi << 8 | ucrcLo;
  87:src/modbus.c  **** 
  88:src/modbus.c  **** 		if (ucrcLo == *tempCRC++){
 2971              		.loc 1 88 0
 2972 0046 7B68     		ldr	r3, [r7, #4]
 2973 0048 1A1D     		adds	r2, r3, #4
 2974 004a 7A60     		str	r2, [r7, #4]
 2975 004c 1A68     		ldr	r2, [r3]
 2976 004e BB69     		ldr	r3, [r7, #24]
 2977 0050 9A42     		cmp	r2, r3
 2978 0052 06D1     		bne	.L103
  89:src/modbus.c  **** 			if(ucrcHi ==*tempCRC){
 2979              		.loc 1 89 0
 2980 0054 7B68     		ldr	r3, [r7, #4]
 2981 0056 1A68     		ldr	r2, [r3]
 2982 0058 FB69     		ldr	r3, [r7, #28]
 2983 005a 9A42     		cmp	r2, r3
 2984 005c 01D1     		bne	.L103
  90:src/modbus.c  **** 				return 1;
 2985              		.loc 1 90 0
 2986 005e 0123     		movs	r3, #1
 2987 0060 00E0     		b	.L104
 2988              	.L103:
  91:src/modbus.c  **** 			}
  92:src/modbus.c  **** 		}
  93:src/modbus.c  **** 		return 0;
 2989              		.loc 1 93 0
 2990 0062 0023     		movs	r3, #0
 2991              	.L104:
  94:src/modbus.c  **** }
 2992              		.loc 1 94 0
 2993 0064 1846     		mov	r0, r3
 2994 0066 2437     		adds	r7, r7, #36
 2995 0068 BD46     		mov	sp, r7
 2996              		@ sp needed
 2997 006a 5DF8047B 		ldr	r7, [sp], #4
 2998 006e 7047     		bx	lr
 2999              	.L106:
 3000              		.align	2
 3001              	.L105:
 3002 0070 00000000 		.word	crcHi
 3003 0074 00000000 		.word	crcLo
 3004              		.cfi_endproc
 3005              	.LFE4:
 3007              		.section	.text.calculateOutputCrc,"ax",%progbits
 3008              		.align	2
 3009              		.global	calculateOutputCrc
 3010              		.thumb
 3011              		.thumb_func
 3013              	calculateOutputCrc:
 3014              	.LFB5:
  95:src/modbus.c  **** 
  96:src/modbus.c  **** uint32_t calculateOutputCrc(uint32_t *tempRpacket,uint32_t rPacketLen){
 3015              		.loc 1 96 0
 3016              		.cfi_startproc
 3017              		@ args = 0, pretend = 0, frame = 24
 3018              		@ frame_needed = 1, uses_anonymous_args = 0
 3019              		@ link register save eliminated.
 3020 0000 80B4     		push	{r7}
 3021              	.LCFI15:
 3022              		.cfi_def_cfa_offset 4
 3023              		.cfi_offset 7, -4
 3024 0002 87B0     		sub	sp, sp, #28
 3025              	.LCFI16:
 3026              		.cfi_def_cfa_offset 32
 3027 0004 00AF     		add	r7, sp, #0
 3028              	.LCFI17:
 3029              		.cfi_def_cfa_register 7
 3030 0006 7860     		str	r0, [r7, #4]
 3031 0008 3960     		str	r1, [r7]
  97:src/modbus.c  **** 	
  98:src/modbus.c  **** 	uint32_t ucrcHi = 0xFF;
 3032              		.loc 1 98 0
 3033 000a FF23     		movs	r3, #255
 3034 000c 7B61     		str	r3, [r7, #20]
  99:src/modbus.c  **** 	uint32_t ucrcLo = 0xFF;
 3035              		.loc 1 99 0
 3036 000e FF23     		movs	r3, #255
 3037 0010 3B61     		str	r3, [r7, #16]
 100:src/modbus.c  **** 	uint32_t iIndex;
 101:src/modbus.c  **** 
 102:src/modbus.c  **** 	while(rPacketLen--){
 3038              		.loc 1 102 0
 3039 0012 12E0     		b	.L108
 3040              	.L109:
 103:src/modbus.c  **** 		iIndex = ucrcLo ^ *(tempRpacket++);
 3041              		.loc 1 103 0
 3042 0014 7B68     		ldr	r3, [r7, #4]
 3043 0016 1A1D     		adds	r2, r3, #4
 3044 0018 7A60     		str	r2, [r7, #4]
 3045 001a 1A68     		ldr	r2, [r3]
 3046 001c 3B69     		ldr	r3, [r7, #16]
 3047 001e 5340     		eors	r3, r3, r2
 3048 0020 FB60     		str	r3, [r7, #12]
 104:src/modbus.c  **** 		ucrcLo = ucrcHi ^ crcHi[iIndex];
 3049              		.loc 1 104 0
 3050 0022 134B     		ldr	r3, .L111
 3051 0024 FA68     		ldr	r2, [r7, #12]
 3052 0026 53F82220 		ldr	r2, [r3, r2, lsl #2]
 3053 002a 7B69     		ldr	r3, [r7, #20]
 3054 002c 5340     		eors	r3, r3, r2
 3055 002e 3B61     		str	r3, [r7, #16]
 105:src/modbus.c  **** 		ucrcHi = crcLo[iIndex];
 3056              		.loc 1 105 0
 3057 0030 104B     		ldr	r3, .L111+4
 3058 0032 FA68     		ldr	r2, [r7, #12]
 3059 0034 53F82230 		ldr	r3, [r3, r2, lsl #2]
 3060 0038 7B61     		str	r3, [r7, #20]
 3061              	.L108:
 102:src/modbus.c  **** 	while(rPacketLen--){
 3062              		.loc 1 102 0 discriminator 1
 3063 003a 3B68     		ldr	r3, [r7]
 3064 003c 5A1E     		subs	r2, r3, #1
 3065 003e 3A60     		str	r2, [r7]
 3066 0040 002B     		cmp	r3, #0
 3067 0042 E7D1     		bne	.L109
 106:src/modbus.c  **** 	}
 107:src/modbus.c  **** 	*rPacket++ = ucrcHi;
 3068              		.loc 1 107 0
 3069 0044 0C4B     		ldr	r3, .L111+8
 3070 0046 1B68     		ldr	r3, [r3]
 3071 0048 191D     		adds	r1, r3, #4
 3072 004a 0B4A     		ldr	r2, .L111+8
 3073 004c 1160     		str	r1, [r2]
 3074 004e 7A69     		ldr	r2, [r7, #20]
 3075 0050 1A60     		str	r2, [r3]
 108:src/modbus.c  **** 	*rPacket++ = ucrcLo;
 3076              		.loc 1 108 0
 3077 0052 094B     		ldr	r3, .L111+8
 3078 0054 1B68     		ldr	r3, [r3]
 3079 0056 191D     		adds	r1, r3, #4
 3080 0058 074A     		ldr	r2, .L111+8
 3081 005a 1160     		str	r1, [r2]
 3082 005c 3A69     		ldr	r2, [r7, #16]
 3083 005e 1A60     		str	r2, [r3]
 109:src/modbus.c  **** 	return 0;		
 3084              		.loc 1 109 0
 3085 0060 0023     		movs	r3, #0
 110:src/modbus.c  **** }
 3086              		.loc 1 110 0
 3087 0062 1846     		mov	r0, r3
 3088 0064 1C37     		adds	r7, r7, #28
 3089 0066 BD46     		mov	sp, r7
 3090              		@ sp needed
 3091 0068 5DF8047B 		ldr	r7, [sp], #4
 3092 006c 7047     		bx	lr
 3093              	.L112:
 3094 006e 00BF     		.align	2
 3095              	.L111:
 3096 0070 00000000 		.word	crcHi
 3097 0074 00000000 		.word	crcLo
 3098 0078 00000000 		.word	rPacket
 3099              		.cfi_endproc
 3100              	.LFE5:
 3102              		.section	.text.validateFunction,"ax",%progbits
 3103              		.align	2
 3104              		.global	validateFunction
 3105              		.thumb
 3106              		.thumb_func
 3108              	validateFunction:
 3109              	.LFB6:
 111:src/modbus.c  **** 
 112:src/modbus.c  **** //Validate the function
 113:src/modbus.c  **** uint32_t validateFunction(uint32_t *qPacket) {
 3110              		.loc 1 113 0
 3111              		.cfi_startproc
 3112              		@ args = 0, pretend = 0, frame = 8
 3113              		@ frame_needed = 1, uses_anonymous_args = 0
 3114 0000 80B5     		push	{r7, lr}
 3115              	.LCFI18:
 3116              		.cfi_def_cfa_offset 8
 3117              		.cfi_offset 7, -8
 3118              		.cfi_offset 14, -4
 3119 0002 82B0     		sub	sp, sp, #8
 3120              	.LCFI19:
 3121              		.cfi_def_cfa_offset 16
 3122 0004 00AF     		add	r7, sp, #0
 3123              	.LCFI20:
 3124              		.cfi_def_cfa_register 7
 3125 0006 7860     		str	r0, [r7, #4]
 114:src/modbus.c  **** 
 115:src/modbus.c  **** 	qPacket++;
 3126              		.loc 1 115 0
 3127 0008 7B68     		ldr	r3, [r7, #4]
 3128 000a 0433     		adds	r3, r3, #4
 3129 000c 7B60     		str	r3, [r7, #4]
 116:src/modbus.c  **** 
 117:src/modbus.c  **** 	//Copy function address in to respose packet
 118:src/modbus.c  **** 	*rPacket = *qPacket;
 3130              		.loc 1 118 0
 3131 000e 324B     		ldr	r3, .L126
 3132 0010 1B68     		ldr	r3, [r3]
 3133 0012 7A68     		ldr	r2, [r7, #4]
 3134 0014 1268     		ldr	r2, [r2]
 3135 0016 1A60     		str	r2, [r3]
 119:src/modbus.c  **** 	//printf("%d\n",*rPacket);
 120:src/modbus.c  **** 	rPacket++;
 3136              		.loc 1 120 0
 3137 0018 2F4B     		ldr	r3, .L126
 3138 001a 1B68     		ldr	r3, [r3]
 3139 001c 1A1D     		adds	r2, r3, #4
 3140 001e 2E4B     		ldr	r3, .L126
 3141 0020 1A60     		str	r2, [r3]
 121:src/modbus.c  **** 
 122:src/modbus.c  **** 	switch (*qPacket) {
 3142              		.loc 1 122 0
 3143 0022 7B68     		ldr	r3, [r7, #4]
 3144 0024 1B68     		ldr	r3, [r3]
 3145 0026 013B     		subs	r3, r3, #1
 3146 0028 0F2B     		cmp	r3, #15
 3147 002a 50D8     		bhi	.L114
 3148 002c 01A2     		adr	r2, .L116
 3149 002e 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 3150 0032 00BF     		.p2align 2
 3151              	.L116:
 3152 0034 75000000 		.word	.L115+1
 3153 0038 7F000000 		.word	.L117+1
 3154 003c 89000000 		.word	.L118+1
 3155 0040 93000000 		.word	.L119+1
 3156 0044 9D000000 		.word	.L120+1
 3157 0048 A7000000 		.word	.L121+1
 3158 004c C5000000 		.word	.L122+1
 3159 0050 CF000000 		.word	.L114+1
 3160 0054 CF000000 		.word	.L114+1
 3161 0058 CF000000 		.word	.L114+1
 3162 005c CF000000 		.word	.L114+1
 3163 0060 CF000000 		.word	.L114+1
 3164 0064 CF000000 		.word	.L114+1
 3165 0068 CF000000 		.word	.L114+1
 3166 006c B1000000 		.word	.L123+1
 3167 0070 BB000000 		.word	.L124+1
 3168              	.L115:
 123:src/modbus.c  **** 	case READ_COIL:
 124:src/modbus.c  **** 		readCoil(qPacket);
 3169              		.loc 1 124 0
 3170 0074 7868     		ldr	r0, [r7, #4]
 3171 0076 FFF7FEFF 		bl	readCoil
 125:src/modbus.c  **** 		return 1;
 3172              		.loc 1 125 0
 3173 007a 0123     		movs	r3, #1
 3174 007c 28E0     		b	.L125
 3175              	.L117:
 126:src/modbus.c  **** 		break;
 127:src/modbus.c  **** 	case READ_DISCRETE_INPUTS:
 128:src/modbus.c  **** 		readDiscreteInputs(qPacket);
 3176              		.loc 1 128 0
 3177 007e 7868     		ldr	r0, [r7, #4]
 3178 0080 FFF7FEFF 		bl	readDiscreteInputs
 129:src/modbus.c  **** 		return 1;
 3179              		.loc 1 129 0
 3180 0084 0123     		movs	r3, #1
 3181 0086 23E0     		b	.L125
 3182              	.L118:
 130:src/modbus.c  **** 		break;
 131:src/modbus.c  **** 	case READ_HOLDING_REGISTERS:
 132:src/modbus.c  **** 		readHoldingRegisters(qPacket);
 3183              		.loc 1 132 0
 3184 0088 7868     		ldr	r0, [r7, #4]
 3185 008a FFF7FEFF 		bl	readHoldingRegisters
 133:src/modbus.c  **** 		return 1;
 3186              		.loc 1 133 0
 3187 008e 0123     		movs	r3, #1
 3188 0090 1EE0     		b	.L125
 3189              	.L119:
 134:src/modbus.c  **** 		break;
 135:src/modbus.c  **** 	case READ_INPUT_REGISTERS:
 136:src/modbus.c  **** 		readInputRegisters(qPacket);
 3190              		.loc 1 136 0
 3191 0092 7868     		ldr	r0, [r7, #4]
 3192 0094 FFF7FEFF 		bl	readInputRegisters
 137:src/modbus.c  **** 		return 1;
 3193              		.loc 1 137 0
 3194 0098 0123     		movs	r3, #1
 3195 009a 19E0     		b	.L125
 3196              	.L120:
 138:src/modbus.c  **** 		break;
 139:src/modbus.c  **** 	case WRITE_SINGLE_COIL:
 140:src/modbus.c  **** 		writeSingleCoil(qPacket);
 3197              		.loc 1 140 0
 3198 009c 7868     		ldr	r0, [r7, #4]
 3199 009e FFF7FEFF 		bl	writeSingleCoil
 141:src/modbus.c  **** 		return 1;
 3200              		.loc 1 141 0
 3201 00a2 0123     		movs	r3, #1
 3202 00a4 14E0     		b	.L125
 3203              	.L121:
 142:src/modbus.c  **** 		break;
 143:src/modbus.c  **** 	case WRITE_SINGLE_REGISTER:
 144:src/modbus.c  **** 		writeSingleRegister(qPacket);
 3204              		.loc 1 144 0
 3205 00a6 7868     		ldr	r0, [r7, #4]
 3206 00a8 FFF7FEFF 		bl	writeSingleRegister
 145:src/modbus.c  **** 		return 1;
 3207              		.loc 1 145 0
 3208 00ac 0123     		movs	r3, #1
 3209 00ae 0FE0     		b	.L125
 3210              	.L123:
 146:src/modbus.c  **** 		break;
 147:src/modbus.c  **** 	case WRITE_MULTIPLE_COILS:
 148:src/modbus.c  **** 		writeMultipleCoils(qPacket);
 3211              		.loc 1 148 0
 3212 00b0 7868     		ldr	r0, [r7, #4]
 3213 00b2 FFF7FEFF 		bl	writeMultipleCoils
 149:src/modbus.c  **** 		return 1;
 3214              		.loc 1 149 0
 3215 00b6 0123     		movs	r3, #1
 3216 00b8 0AE0     		b	.L125
 3217              	.L124:
 150:src/modbus.c  **** 		break;
 151:src/modbus.c  **** 	case WRITE_MULTIPLE_REGISTERS:
 152:src/modbus.c  **** 		writeMultipleRegisters(qPacket);
 3218              		.loc 1 152 0
 3219 00ba 7868     		ldr	r0, [r7, #4]
 3220 00bc FFF7FEFF 		bl	writeMultipleRegisters
 153:src/modbus.c  **** 		return 1;
 3221              		.loc 1 153 0
 3222 00c0 0123     		movs	r3, #1
 3223 00c2 05E0     		b	.L125
 3224              	.L122:
 154:src/modbus.c  **** 		break;
 155:src/modbus.c  **** 	case READ_EXCEPTION_STATUS:
 156:src/modbus.c  **** 		readExceptionStatus(qPacket);
 3225              		.loc 1 156 0
 3226 00c4 7868     		ldr	r0, [r7, #4]
 3227 00c6 FFF7FEFF 		bl	readExceptionStatus
 157:src/modbus.c  **** 		return 1;
 3228              		.loc 1 157 0
 3229 00ca 0123     		movs	r3, #1
 3230 00cc 00E0     		b	.L125
 3231              	.L114:
 158:src/modbus.c  **** 		break;
 159:src/modbus.c  **** 	default:
 160:src/modbus.c  **** 		return 0;
 3232              		.loc 1 160 0
 3233 00ce 0023     		movs	r3, #0
 3234              	.L125:
 161:src/modbus.c  **** 	}
 162:src/modbus.c  **** }
 3235              		.loc 1 162 0
 3236 00d0 1846     		mov	r0, r3
 3237 00d2 0837     		adds	r7, r7, #8
 3238 00d4 BD46     		mov	sp, r7
 3239              		@ sp needed
 3240 00d6 80BD     		pop	{r7, pc}
 3241              	.L127:
 3242              		.align	2
 3243              	.L126:
 3244 00d8 00000000 		.word	rPacket
 3245              		.cfi_endproc
 3246              	.LFE6:
 3248              		.section	.text.writeMultipleRegisters,"ax",%progbits
 3249              		.align	2
 3250              		.global	writeMultipleRegisters
 3251              		.thumb
 3252              		.thumb_func
 3254              	writeMultipleRegisters:
 3255              	.LFB7:
 163:src/modbus.c  **** 
 164:src/modbus.c  **** 
 165:src/modbus.c  **** //TODO : Code to be checked for Multiple Register Writing
 166:src/modbus.c  **** uint32_t writeMultipleRegisters(uint32_t *qPacket) {
 3256              		.loc 1 166 0
 3257              		.cfi_startproc
 3258              		@ args = 0, pretend = 0, frame = 56
 3259              		@ frame_needed = 1, uses_anonymous_args = 0
 3260 0000 80B5     		push	{r7, lr}
 3261              	.LCFI21:
 3262              		.cfi_def_cfa_offset 8
 3263              		.cfi_offset 7, -8
 3264              		.cfi_offset 14, -4
 3265 0002 8EB0     		sub	sp, sp, #56
 3266              	.LCFI22:
 3267              		.cfi_def_cfa_offset 64
 3268 0004 00AF     		add	r7, sp, #0
 3269              	.LCFI23:
 3270              		.cfi_def_cfa_register 7
 3271 0006 7860     		str	r0, [r7, #4]
 167:src/modbus.c  **** 
 168:src/modbus.c  **** 	//Point qPacket to first address from where data is to be fetched.
 169:src/modbus.c  **** 	qPacket++;
 3272              		.loc 1 169 0
 3273 0008 7B68     		ldr	r3, [r7, #4]
 3274 000a 0433     		adds	r3, r3, #4
 3275 000c 7B60     		str	r3, [r7, #4]
 170:src/modbus.c  **** 
 171:src/modbus.c  **** 	//Assign first address to firstRequest from qPacket
 172:src/modbus.c  **** 	firstRequest = 0x9c40 + *qPacket++;
 3276              		.loc 1 172 0
 3277 000e 7B68     		ldr	r3, [r7, #4]
 3278 0010 1A1D     		adds	r2, r3, #4
 3279 0012 7A60     		str	r2, [r7, #4]
 3280 0014 1B68     		ldr	r3, [r3]
 3281 0016 03F51C43 		add	r3, r3, #39936
 3282 001a 4033     		adds	r3, r3, #64
 3283 001c 484A     		ldr	r2, .L135
 3284 001e 1360     		str	r3, [r2]
 173:src/modbus.c  **** 
 174:src/modbus.c  **** 	//Data address of first coil
 175:src/modbus.c  **** 	*rPacket = (unsigned int) firstRequest;
 3285              		.loc 1 175 0
 3286 0020 484B     		ldr	r3, .L135+4
 3287 0022 1B68     		ldr	r3, [r3]
 3288 0024 464A     		ldr	r2, .L135
 3289 0026 1268     		ldr	r2, [r2]
 3290 0028 1A60     		str	r2, [r3]
 176:src/modbus.c  **** 	//printf("%d\n",*rPacket);
 177:src/modbus.c  **** 	rPacket++;
 3291              		.loc 1 177 0
 3292 002a 464B     		ldr	r3, .L135+4
 3293 002c 1B68     		ldr	r3, [r3]
 3294 002e 1A1D     		adds	r2, r3, #4
 3295 0030 444B     		ldr	r3, .L135+4
 3296 0032 1A60     		str	r2, [r3]
 178:src/modbus.c  **** 
 179:src/modbus.c  **** 	//move the number of registers to be written.
 180:src/modbus.c  **** 	totalRequest = *qPacket++;
 3297              		.loc 1 180 0
 3298 0034 7B68     		ldr	r3, [r7, #4]
 3299 0036 1A1D     		adds	r2, r3, #4
 3300 0038 7A60     		str	r2, [r7, #4]
 3301 003a 1A68     		ldr	r2, [r3]
 3302 003c 424B     		ldr	r3, .L135+8
 3303 003e 1A60     		str	r2, [r3]
 181:src/modbus.c  **** 
 182:src/modbus.c  **** 	//Number of registers to be written
 183:src/modbus.c  **** 	*rPacket = (unsigned int) totalRequest;
 3304              		.loc 1 183 0
 3305 0040 404B     		ldr	r3, .L135+4
 3306 0042 1B68     		ldr	r3, [r3]
 3307 0044 404A     		ldr	r2, .L135+8
 3308 0046 1268     		ldr	r2, [r2]
 3309 0048 1A60     		str	r2, [r3]
 184:src/modbus.c  **** 	rPacket++;
 3310              		.loc 1 184 0
 3311 004a 3E4B     		ldr	r3, .L135+4
 3312 004c 1B68     		ldr	r3, [r3]
 3313 004e 1A1D     		adds	r2, r3, #4
 3314 0050 3C4B     		ldr	r3, .L135+4
 3315 0052 1A60     		str	r2, [r3]
 185:src/modbus.c  **** 
 186:src/modbus.c  **** 	//Number of bytes to be sent to slave by master
 187:src/modbus.c  **** 	unsigned int byteStream = (unsigned int) *qPacket++;
 3316              		.loc 1 187 0
 3317 0054 7B68     		ldr	r3, [r7, #4]
 3318 0056 1A1D     		adds	r2, r3, #4
 3319 0058 7A60     		str	r2, [r7, #4]
 3320 005a 1B68     		ldr	r3, [r3]
 3321 005c FB61     		str	r3, [r7, #28]
 188:src/modbus.c  **** 
 189:src/modbus.c  **** 	//Fetch first address data.
 190:src/modbus.c  **** 	s = getData(firstRequest++);
 3322              		.loc 1 190 0
 3323 005e 384B     		ldr	r3, .L135
 3324 0060 1B68     		ldr	r3, [r3]
 3325 0062 591C     		adds	r1, r3, #1
 3326 0064 364A     		ldr	r2, .L135
 3327 0066 1160     		str	r1, [r2]
 3328 0068 1846     		mov	r0, r3
 3329 006a FFF7FEFF 		bl	getData
 3330 006e 0246     		mov	r2, r0
 3331 0070 364B     		ldr	r3, .L135+12
 3332 0072 1A60     		str	r2, [r3]
 191:src/modbus.c  **** 
 192:src/modbus.c  **** 	//For WRITE_MULTIPLE_REGISTERS
 193:src/modbus.c  **** 	uint32_t *tempWriteData = qPacket;
 3333              		.loc 1 193 0
 3334 0074 7B68     		ldr	r3, [r7, #4]
 3335 0076 BB61     		str	r3, [r7, #24]
 194:src/modbus.c  **** 
 195:src/modbus.c  **** 	int dataToBeWritten = *tempWriteData++;
 3336              		.loc 1 195 0
 3337 0078 BB69     		ldr	r3, [r7, #24]
 3338 007a 1A1D     		adds	r2, r3, #4
 3339 007c BA61     		str	r2, [r7, #24]
 3340 007e 1B68     		ldr	r3, [r3]
 3341 0080 7B61     		str	r3, [r7, #20]
 196:src/modbus.c  **** 
 197:src/modbus.c  **** 	int tempWriteRequest = (int) dataToBeWritten;
 3342              		.loc 1 197 0
 3343 0082 7B69     		ldr	r3, [r7, #20]
 3344 0084 7B63     		str	r3, [r7, #52]
 198:src/modbus.c  **** 	int count = byteStream;
 3345              		.loc 1 198 0
 3346 0086 FB69     		ldr	r3, [r7, #28]
 3347 0088 3B63     		str	r3, [r7, #48]
 199:src/modbus.c  **** 	int fromBit = 0;
 3348              		.loc 1 199 0
 3349 008a 0023     		movs	r3, #0
 3350 008c FB62     		str	r3, [r7, #44]
 200:src/modbus.c  **** 	int toBit = 7;
 3351              		.loc 1 200 0
 3352 008e 0723     		movs	r3, #7
 3353 0090 BB62     		str	r3, [r7, #40]
 201:src/modbus.c  **** 	int shiftRight;
 202:src/modbus.c  **** 	//int d;
 203:src/modbus.c  **** 
 204:src/modbus.c  **** 	again: while (count != 0) {
 3354              		.loc 1 204 0
 3355 0092 4CE0     		b	.L130
 3356              	.L133:
 3357              	.LBB9:
 205:src/modbus.c  **** 
 206:src/modbus.c  **** 		//Call masking function and store value in r.
 207:src/modbus.c  **** 		unsigned int r = getMask(fromBit, toBit);
 3358              		.loc 1 207 0
 3359 0094 F86A     		ldr	r0, [r7, #44]
 3360 0096 B96A     		ldr	r1, [r7, #40]
 3361 0098 FFF7FEFF 		bl	getMask
 3362 009c 3861     		str	r0, [r7, #16]
 208:src/modbus.c  **** 
 209:src/modbus.c  **** 		//Get masking done on data from hash and store in result.
 210:src/modbus.c  **** 		unsigned int result = r & s->value;
 3363              		.loc 1 210 0
 3364 009e 2B4B     		ldr	r3, .L135+12
 3365 00a0 1B68     		ldr	r3, [r3]
 3366 00a2 5B68     		ldr	r3, [r3, #4]
 3367 00a4 1A46     		mov	r2, r3
 3368 00a6 3B69     		ldr	r3, [r7, #16]
 3369 00a8 1340     		ands	r3, r3, r2
 3370 00aa 3B62     		str	r3, [r7, #32]
 211:src/modbus.c  **** 
 212:src/modbus.c  **** 		tempWriteRequest = r & tempWriteRequest;
 3371              		.loc 1 212 0
 3372 00ac 7A6B     		ldr	r2, [r7, #52]
 3373 00ae 3B69     		ldr	r3, [r7, #16]
 3374 00b0 1340     		ands	r3, r3, r2
 3375 00b2 7B63     		str	r3, [r7, #52]
 213:src/modbus.c  **** 
 214:src/modbus.c  **** 		//Else shift right.
 215:src/modbus.c  **** 		for (shiftRight = fromBit; shiftRight > 0; shiftRight--) {
 3376              		.loc 1 215 0
 3377 00b4 FB6A     		ldr	r3, [r7, #44]
 3378 00b6 7B62     		str	r3, [r7, #36]
 3379 00b8 08E0     		b	.L131
 3380              	.L132:
 216:src/modbus.c  **** 			result = result >> 1;
 3381              		.loc 1 216 0 discriminator 2
 3382 00ba 3B6A     		ldr	r3, [r7, #32]
 3383 00bc 5B08     		lsrs	r3, r3, #1
 3384 00be 3B62     		str	r3, [r7, #32]
 217:src/modbus.c  **** 			tempWriteRequest = tempWriteRequest >> 1;
 3385              		.loc 1 217 0 discriminator 2
 3386 00c0 7B6B     		ldr	r3, [r7, #52]
 3387 00c2 5B10     		asrs	r3, r3, #1
 3388 00c4 7B63     		str	r3, [r7, #52]
 215:src/modbus.c  **** 		for (shiftRight = fromBit; shiftRight > 0; shiftRight--) {
 3389              		.loc 1 215 0 discriminator 2
 3390 00c6 7B6A     		ldr	r3, [r7, #36]
 3391 00c8 013B     		subs	r3, r3, #1
 3392 00ca 7B62     		str	r3, [r7, #36]
 3393              	.L131:
 215:src/modbus.c  **** 		for (shiftRight = fromBit; shiftRight > 0; shiftRight--) {
 3394              		.loc 1 215 0 is_stmt 0 discriminator 1
 3395 00cc 7B6A     		ldr	r3, [r7, #36]
 3396 00ce 002B     		cmp	r3, #0
 3397 00d0 F3DC     		bgt	.L132
 218:src/modbus.c  **** 		}
 219:src/modbus.c  **** 
 220:src/modbus.c  **** 		result = result | tempWriteRequest;
 3398              		.loc 1 220 0 is_stmt 1
 3399 00d2 7B6B     		ldr	r3, [r7, #52]
 3400 00d4 3A6A     		ldr	r2, [r7, #32]
 3401 00d6 1343     		orrs	r3, r3, r2
 3402 00d8 3B62     		str	r3, [r7, #32]
 221:src/modbus.c  **** 
 222:src/modbus.c  **** 		//Store the data to be sent in response packet one by one till requested bits reached.
 223:src/modbus.c  **** 		*rPacket = result;
 3403              		.loc 1 223 0
 3404 00da 1A4B     		ldr	r3, .L135+4
 3405 00dc 1B68     		ldr	r3, [r3]
 3406 00de 3A6A     		ldr	r2, [r7, #32]
 3407 00e0 1A60     		str	r2, [r3]
 224:src/modbus.c  **** 		rPacket++;
 3408              		.loc 1 224 0
 3409 00e2 184B     		ldr	r3, .L135+4
 3410 00e4 1B68     		ldr	r3, [r3]
 3411 00e6 1A1D     		adds	r2, r3, #4
 3412 00e8 164B     		ldr	r3, .L135+4
 3413 00ea 1A60     		str	r2, [r3]
 225:src/modbus.c  **** //		printf("Data: 0x%x\n", result);
 226:src/modbus.c  **** 
 227:src/modbus.c  **** 		//Decrease the count for number of bytes to be written
 228:src/modbus.c  **** 		count--;
 3414              		.loc 1 228 0
 3415 00ec 3B6B     		ldr	r3, [r7, #48]
 3416 00ee 013B     		subs	r3, r3, #1
 3417 00f0 3B63     		str	r3, [r7, #48]
 229:src/modbus.c  **** 		fromBit = fromBit + 8;
 3418              		.loc 1 229 0
 3419 00f2 FB6A     		ldr	r3, [r7, #44]
 3420 00f4 0833     		adds	r3, r3, #8
 3421 00f6 FB62     		str	r3, [r7, #44]
 230:src/modbus.c  **** 		toBit = toBit + 8;
 3422              		.loc 1 230 0
 3423 00f8 BB6A     		ldr	r3, [r7, #40]
 3424 00fa 0833     		adds	r3, r3, #8
 3425 00fc BB62     		str	r3, [r7, #40]
 231:src/modbus.c  **** 		tempWriteRequest = (int) dataToBeWritten;
 3426              		.loc 1 231 0
 3427 00fe 7B69     		ldr	r3, [r7, #20]
 3428 0100 7B63     		str	r3, [r7, #52]
 232:src/modbus.c  **** 
 233:src/modbus.c  **** 		// If two bytes written then move on to next register
 234:src/modbus.c  **** 		if (count == 2) {
 3429              		.loc 1 234 0
 3430 0102 3B6B     		ldr	r3, [r7, #48]
 3431 0104 022B     		cmp	r3, #2
 3432 0106 12D1     		bne	.L130
 3433              	.LBB10:
 235:src/modbus.c  **** 			s = getData(firstRequest++);
 3434              		.loc 1 235 0
 3435 0108 0D4B     		ldr	r3, .L135
 3436 010a 1B68     		ldr	r3, [r3]
 3437 010c 591C     		adds	r1, r3, #1
 3438 010e 0C4A     		ldr	r2, .L135
 3439 0110 1160     		str	r1, [r2]
 3440 0112 1846     		mov	r0, r3
 3441 0114 FFF7FEFF 		bl	getData
 3442 0118 0246     		mov	r2, r0
 3443 011a 0C4B     		ldr	r3, .L135+12
 3444 011c 1A60     		str	r2, [r3]
 236:src/modbus.c  **** 			int dataToBeWritten = *tempWriteData;
 3445              		.loc 1 236 0
 3446 011e BB69     		ldr	r3, [r7, #24]
 3447 0120 1B68     		ldr	r3, [r3]
 3448 0122 FB60     		str	r3, [r7, #12]
 237:src/modbus.c  **** 			fromBit = 0;
 3449              		.loc 1 237 0
 3450 0124 0023     		movs	r3, #0
 3451 0126 FB62     		str	r3, [r7, #44]
 238:src/modbus.c  **** 			toBit = 7;
 3452              		.loc 1 238 0
 3453 0128 0723     		movs	r3, #7
 3454 012a BB62     		str	r3, [r7, #40]
 239:src/modbus.c  **** 			goto again;
 3455              		.loc 1 239 0
 3456 012c 00BF     		nop
 3457              	.L129:
 3458              	.L130:
 3459              	.LBE10:
 3460              	.LBE9:
 204:src/modbus.c  **** 	again: while (count != 0) {
 3461              		.loc 1 204 0 discriminator 1
 3462 012e 3B6B     		ldr	r3, [r7, #48]
 3463 0130 002B     		cmp	r3, #0
 3464 0132 AFD1     		bne	.L133
 240:src/modbus.c  **** 		}
 241:src/modbus.c  **** 	}
 242:src/modbus.c  **** /*
 243:src/modbus.c  **** 	for (d = 0; d < 5; d++) {
 244:src/modbus.c  **** 		printf("\n0x%x", arrayResponsePacket[d]);
 245:src/modbus.c  **** 	}
 246:src/modbus.c  **** */
 247:src/modbus.c  **** 	return 0;
 3465              		.loc 1 247 0
 3466 0134 0023     		movs	r3, #0
 248:src/modbus.c  **** 
 249:src/modbus.c  **** }
 3467              		.loc 1 249 0
 3468 0136 1846     		mov	r0, r3
 3469 0138 3837     		adds	r7, r7, #56
 3470 013a BD46     		mov	sp, r7
 3471              		@ sp needed
 3472 013c 80BD     		pop	{r7, pc}
 3473              	.L136:
 3474 013e 00BF     		.align	2
 3475              	.L135:
 3476 0140 00000000 		.word	firstRequest
 3477 0144 00000000 		.word	rPacket
 3478 0148 00000000 		.word	totalRequest
 3479 014c 00000000 		.word	s
 3480              		.cfi_endproc
 3481              	.LFE7:
 3483              		.section	.rodata
 3484              		.align	2
 3485              	.LC1:
 3486 0018 44617461 		.ascii	"Data: 0x%x\012\000"
 3486      3A203078 
 3486      25780A00 
 3487              		.section	.text.writeMultipleCoils,"ax",%progbits
 3488              		.align	2
 3489              		.global	writeMultipleCoils
 3490              		.thumb
 3491              		.thumb_func
 3493              	writeMultipleCoils:
 3494              	.LFB8:
 250:src/modbus.c  **** 
 251:src/modbus.c  **** //TODO : Code to be checked for Multiple Coils Writing
 252:src/modbus.c  **** uint32_t writeMultipleCoils(uint32_t *qPacket) {
 3495              		.loc 1 252 0
 3496              		.cfi_startproc
 3497              		@ args = 0, pretend = 0, frame = 48
 3498              		@ frame_needed = 1, uses_anonymous_args = 0
 3499 0000 80B5     		push	{r7, lr}
 3500              	.LCFI24:
 3501              		.cfi_def_cfa_offset 8
 3502              		.cfi_offset 7, -8
 3503              		.cfi_offset 14, -4
 3504 0002 8CB0     		sub	sp, sp, #48
 3505              	.LCFI25:
 3506              		.cfi_def_cfa_offset 56
 3507 0004 00AF     		add	r7, sp, #0
 3508              	.LCFI26:
 3509              		.cfi_def_cfa_register 7
 3510 0006 7860     		str	r0, [r7, #4]
 253:src/modbus.c  **** 
 254:src/modbus.c  **** 	//Point qPacket to first address from where data is to be fetched.
 255:src/modbus.c  **** 	qPacket++;
 3511              		.loc 1 255 0
 3512 0008 7B68     		ldr	r3, [r7, #4]
 3513 000a 0433     		adds	r3, r3, #4
 3514 000c 7B60     		str	r3, [r7, #4]
 256:src/modbus.c  **** 
 257:src/modbus.c  **** 	//Assign first address to firstRequest from qPacket
 258:src/modbus.c  **** 	firstRequest = 0x0000 + *qPacket++;
 3515              		.loc 1 258 0
 3516 000e 7B68     		ldr	r3, [r7, #4]
 3517 0010 1A1D     		adds	r2, r3, #4
 3518 0012 7A60     		str	r2, [r7, #4]
 3519 0014 1A68     		ldr	r2, [r3]
 3520 0016 394B     		ldr	r3, .L143
 3521 0018 1A60     		str	r2, [r3]
 259:src/modbus.c  **** 
 260:src/modbus.c  **** 	//Data address of first coil
 261:src/modbus.c  **** 	*rPacket = (unsigned int) firstRequest;
 3522              		.loc 1 261 0
 3523 001a 394B     		ldr	r3, .L143+4
 3524 001c 1B68     		ldr	r3, [r3]
 3525 001e 374A     		ldr	r2, .L143
 3526 0020 1268     		ldr	r2, [r2]
 3527 0022 1A60     		str	r2, [r3]
 262:src/modbus.c  **** 	//printf("%d\n",*rPacket);
 263:src/modbus.c  **** 	rPacket++;
 3528              		.loc 1 263 0
 3529 0024 364B     		ldr	r3, .L143+4
 3530 0026 1B68     		ldr	r3, [r3]
 3531 0028 1A1D     		adds	r2, r3, #4
 3532 002a 354B     		ldr	r3, .L143+4
 3533 002c 1A60     		str	r2, [r3]
 264:src/modbus.c  **** 
 265:src/modbus.c  **** 	//move the number of coils to be written.
 266:src/modbus.c  **** 	totalRequest = *qPacket++;
 3534              		.loc 1 266 0
 3535 002e 7B68     		ldr	r3, [r7, #4]
 3536 0030 1A1D     		adds	r2, r3, #4
 3537 0032 7A60     		str	r2, [r7, #4]
 3538 0034 1A68     		ldr	r2, [r3]
 3539 0036 334B     		ldr	r3, .L143+8
 3540 0038 1A60     		str	r2, [r3]
 267:src/modbus.c  **** 
 268:src/modbus.c  **** 	//Number of coils to be written
 269:src/modbus.c  **** 	*rPacket = (unsigned int) totalRequest;
 3541              		.loc 1 269 0
 3542 003a 314B     		ldr	r3, .L143+4
 3543 003c 1B68     		ldr	r3, [r3]
 3544 003e 314A     		ldr	r2, .L143+8
 3545 0040 1268     		ldr	r2, [r2]
 3546 0042 1A60     		str	r2, [r3]
 270:src/modbus.c  **** 	rPacket++;
 3547              		.loc 1 270 0
 3548 0044 2E4B     		ldr	r3, .L143+4
 3549 0046 1B68     		ldr	r3, [r3]
 3550 0048 1A1D     		adds	r2, r3, #4
 3551 004a 2D4B     		ldr	r3, .L143+4
 3552 004c 1A60     		str	r2, [r3]
 271:src/modbus.c  **** 
 272:src/modbus.c  **** 	//Number of bytes to be sent to slave by master
 273:src/modbus.c  **** 	unsigned int byteStream = (unsigned int) *qPacket++;
 3553              		.loc 1 273 0
 3554 004e 7B68     		ldr	r3, [r7, #4]
 3555 0050 1A1D     		adds	r2, r3, #4
 3556 0052 7A60     		str	r2, [r7, #4]
 3557 0054 1B68     		ldr	r3, [r3]
 3558 0056 3B61     		str	r3, [r7, #16]
 274:src/modbus.c  **** 
 275:src/modbus.c  **** 	//Fetch first address data.
 276:src/modbus.c  **** 	s = getData(firstRequest++);
 3559              		.loc 1 276 0
 3560 0058 284B     		ldr	r3, .L143
 3561 005a 1B68     		ldr	r3, [r3]
 3562 005c 591C     		adds	r1, r3, #1
 3563 005e 274A     		ldr	r2, .L143
 3564 0060 1160     		str	r1, [r2]
 3565 0062 1846     		mov	r0, r3
 3566 0064 FFF7FEFF 		bl	getData
 3567 0068 0246     		mov	r2, r0
 3568 006a 274B     		ldr	r3, .L143+12
 3569 006c 1A60     		str	r2, [r3]
 277:src/modbus.c  **** 
 278:src/modbus.c  **** 	uint32_t *dataToBeWritten;
 279:src/modbus.c  **** 	dataToBeWritten = qPacket;
 3570              		.loc 1 279 0
 3571 006e 7B68     		ldr	r3, [r7, #4]
 3572 0070 FB62     		str	r3, [r7, #44]
 280:src/modbus.c  **** 	qPacket++;
 3573              		.loc 1 280 0
 3574 0072 7B68     		ldr	r3, [r7, #4]
 3575 0074 0433     		adds	r3, r3, #4
 3576 0076 7B60     		str	r3, [r7, #4]
 281:src/modbus.c  **** 
 282:src/modbus.c  **** 	int tempWriteRequest = *dataToBeWritten++;
 3577              		.loc 1 282 0
 3578 0078 FB6A     		ldr	r3, [r7, #44]
 3579 007a 1A1D     		adds	r2, r3, #4
 3580 007c FA62     		str	r2, [r7, #44]
 3581 007e 1B68     		ldr	r3, [r3]
 3582 0080 BB62     		str	r3, [r7, #40]
 283:src/modbus.c  **** 	int count = byteStream;
 3583              		.loc 1 283 0
 3584 0082 3B69     		ldr	r3, [r7, #16]
 3585 0084 7B62     		str	r3, [r7, #36]
 284:src/modbus.c  **** 	int fromBit = 0;
 3586              		.loc 1 284 0
 3587 0086 0023     		movs	r3, #0
 3588 0088 3B62     		str	r3, [r7, #32]
 285:src/modbus.c  **** 	int toBit = 7;
 3589              		.loc 1 285 0
 3590 008a 0723     		movs	r3, #7
 3591 008c FB61     		str	r3, [r7, #28]
 286:src/modbus.c  **** 	int shiftRight;
 287:src/modbus.c  **** 	int d;
 288:src/modbus.c  **** 
 289:src/modbus.c  **** 	while (count != 0) {
 3592              		.loc 1 289 0
 3593 008e 2DE0     		b	.L138
 3594              	.L141:
 3595              	.LBB11:
 290:src/modbus.c  **** 
 291:src/modbus.c  **** 		//Call masking function and store value in r.
 292:src/modbus.c  **** 		unsigned int r = getMask(fromBit, toBit);
 3596              		.loc 1 292 0
 3597 0090 386A     		ldr	r0, [r7, #32]
 3598 0092 F969     		ldr	r1, [r7, #28]
 3599 0094 FFF7FEFF 		bl	getMask
 3600 0098 F860     		str	r0, [r7, #12]
 293:src/modbus.c  **** 
 294:src/modbus.c  **** 		//Get masking done on data from hash and store in result.
 295:src/modbus.c  **** 		unsigned int result = r & s->value;
 3601              		.loc 1 295 0
 3602 009a 1B4B     		ldr	r3, .L143+12
 3603 009c 1B68     		ldr	r3, [r3]
 3604 009e 5B68     		ldr	r3, [r3, #4]
 3605 00a0 1A46     		mov	r2, r3
 3606 00a2 FB68     		ldr	r3, [r7, #12]
 3607 00a4 1340     		ands	r3, r3, r2
 3608 00a6 7B61     		str	r3, [r7, #20]
 296:src/modbus.c  **** 
 297:src/modbus.c  **** 		//tempWriteRequest = r & tempWriteRequest;
 298:src/modbus.c  **** 
 299:src/modbus.c  **** 		//Else shift right.
 300:src/modbus.c  **** 		for (shiftRight = fromBit; shiftRight > 0; shiftRight--) {
 3609              		.loc 1 300 0
 3610 00a8 3B6A     		ldr	r3, [r7, #32]
 3611 00aa BB61     		str	r3, [r7, #24]
 3612 00ac 05E0     		b	.L139
 3613              	.L140:
 301:src/modbus.c  **** 			result = result >> 1;
 3614              		.loc 1 301 0 discriminator 2
 3615 00ae 7B69     		ldr	r3, [r7, #20]
 3616 00b0 5B08     		lsrs	r3, r3, #1
 3617 00b2 7B61     		str	r3, [r7, #20]
 300:src/modbus.c  **** 		for (shiftRight = fromBit; shiftRight > 0; shiftRight--) {
 3618              		.loc 1 300 0 discriminator 2
 3619 00b4 BB69     		ldr	r3, [r7, #24]
 3620 00b6 013B     		subs	r3, r3, #1
 3621 00b8 BB61     		str	r3, [r7, #24]
 3622              	.L139:
 300:src/modbus.c  **** 		for (shiftRight = fromBit; shiftRight > 0; shiftRight--) {
 3623              		.loc 1 300 0 is_stmt 0 discriminator 1
 3624 00ba BB69     		ldr	r3, [r7, #24]
 3625 00bc 002B     		cmp	r3, #0
 3626 00be F6DC     		bgt	.L140
 302:src/modbus.c  **** 			//tempWriteRequest = tempWriteRequest << 1;
 303:src/modbus.c  **** 		}
 304:src/modbus.c  **** 
 305:src/modbus.c  **** 		result = result | tempWriteRequest;
 3627              		.loc 1 305 0 is_stmt 1
 3628 00c0 BB6A     		ldr	r3, [r7, #40]
 3629 00c2 7A69     		ldr	r2, [r7, #20]
 3630 00c4 1343     		orrs	r3, r3, r2
 3631 00c6 7B61     		str	r3, [r7, #20]
 306:src/modbus.c  **** 
 307:src/modbus.c  **** 		//Store the data to be sent in response packet one by one till requested bits reached.
 308:src/modbus.c  **** //		*rPacket = result;
 309:src/modbus.c  **** //		rPacket++;
 310:src/modbus.c  **** 		printf("Data: 0x%x\n", result);
 3632              		.loc 1 310 0
 3633 00c8 1048     		ldr	r0, .L143+16
 3634 00ca 7969     		ldr	r1, [r7, #20]
 3635 00cc FFF7FEFF 		bl	printf
 311:src/modbus.c  **** 
 312:src/modbus.c  **** 		//Decrease the count for number of bytes to be written
 313:src/modbus.c  **** 		count--;
 3636              		.loc 1 313 0
 3637 00d0 7B6A     		ldr	r3, [r7, #36]
 3638 00d2 013B     		subs	r3, r3, #1
 3639 00d4 7B62     		str	r3, [r7, #36]
 314:src/modbus.c  **** 		fromBit = fromBit + 8;
 3640              		.loc 1 314 0
 3641 00d6 3B6A     		ldr	r3, [r7, #32]
 3642 00d8 0833     		adds	r3, r3, #8
 3643 00da 3B62     		str	r3, [r7, #32]
 315:src/modbus.c  **** 		toBit = toBit + 8;
 3644              		.loc 1 315 0
 3645 00dc FB69     		ldr	r3, [r7, #28]
 3646 00de 0833     		adds	r3, r3, #8
 3647 00e0 FB61     		str	r3, [r7, #28]
 316:src/modbus.c  **** 		tempWriteRequest = *dataToBeWritten++;
 3648              		.loc 1 316 0
 3649 00e2 FB6A     		ldr	r3, [r7, #44]
 3650 00e4 1A1D     		adds	r2, r3, #4
 3651 00e6 FA62     		str	r2, [r7, #44]
 3652 00e8 1B68     		ldr	r3, [r3]
 3653 00ea BB62     		str	r3, [r7, #40]
 3654              	.L138:
 3655              	.LBE11:
 289:src/modbus.c  **** 	while (count != 0) {
 3656              		.loc 1 289 0 discriminator 1
 3657 00ec 7B6A     		ldr	r3, [r7, #36]
 3658 00ee 002B     		cmp	r3, #0
 3659 00f0 CED1     		bne	.L141
 317:src/modbus.c  **** 	}
 318:src/modbus.c  **** 
 319:src/modbus.c  **** //	for (d = 0; d < 5; d++) {
 320:src/modbus.c  **** //		printf("\n0x%x", arrayResponsePacket[d]);
 321:src/modbus.c  **** //	}
 322:src/modbus.c  **** 
 323:src/modbus.c  **** 	return 0;
 3660              		.loc 1 323 0
 3661 00f2 0023     		movs	r3, #0
 324:src/modbus.c  **** }
 3662              		.loc 1 324 0
 3663 00f4 1846     		mov	r0, r3
 3664 00f6 3037     		adds	r7, r7, #48
 3665 00f8 BD46     		mov	sp, r7
 3666              		@ sp needed
 3667 00fa 80BD     		pop	{r7, pc}
 3668              	.L144:
 3669              		.align	2
 3670              	.L143:
 3671 00fc 00000000 		.word	firstRequest
 3672 0100 00000000 		.word	rPacket
 3673 0104 00000000 		.word	totalRequest
 3674 0108 00000000 		.word	s
 3675 010c 18000000 		.word	.LC1
 3676              		.cfi_endproc
 3677              	.LFE8:
 3679              		.section	.text.readExceptionStatus,"ax",%progbits
 3680              		.align	2
 3681              		.global	readExceptionStatus
 3682              		.thumb
 3683              		.thumb_func
 3685              	readExceptionStatus:
 3686              	.LFB9:
 325:src/modbus.c  **** 
 326:src/modbus.c  **** uint32_t readExceptionStatus(uint32_t *qPacket) {
 3687              		.loc 1 326 0
 3688              		.cfi_startproc
 3689              		@ args = 0, pretend = 0, frame = 8
 3690              		@ frame_needed = 1, uses_anonymous_args = 0
 3691              		@ link register save eliminated.
 3692 0000 80B4     		push	{r7}
 3693              	.LCFI27:
 3694              		.cfi_def_cfa_offset 4
 3695              		.cfi_offset 7, -4
 3696 0002 83B0     		sub	sp, sp, #12
 3697              	.LCFI28:
 3698              		.cfi_def_cfa_offset 16
 3699 0004 00AF     		add	r7, sp, #0
 3700              	.LCFI29:
 3701              		.cfi_def_cfa_register 7
 3702 0006 7860     		str	r0, [r7, #4]
 327:src/modbus.c  **** 	return 0;
 3703              		.loc 1 327 0
 3704 0008 0023     		movs	r3, #0
 328:src/modbus.c  **** }
 3705              		.loc 1 328 0
 3706 000a 1846     		mov	r0, r3
 3707 000c 0C37     		adds	r7, r7, #12
 3708 000e BD46     		mov	sp, r7
 3709              		@ sp needed
 3710 0010 5DF8047B 		ldr	r7, [sp], #4
 3711 0014 7047     		bx	lr
 3712              		.cfi_endproc
 3713              	.LFE9:
 3715 0016 00BF     		.section	.text.writeSingleRegister,"ax",%progbits
 3716              		.align	2
 3717              		.global	writeSingleRegister
 3718              		.thumb
 3719              		.thumb_func
 3721              	writeSingleRegister:
 3722              	.LFB10:
 329:src/modbus.c  **** 
 330:src/modbus.c  **** uint32_t writeSingleRegister(uint32_t *qPacket) {
 3723              		.loc 1 330 0
 3724              		.cfi_startproc
 3725              		@ args = 0, pretend = 0, frame = 40
 3726              		@ frame_needed = 1, uses_anonymous_args = 0
 3727 0000 80B5     		push	{r7, lr}
 3728              	.LCFI30:
 3729              		.cfi_def_cfa_offset 8
 3730              		.cfi_offset 7, -8
 3731              		.cfi_offset 14, -4
 3732 0002 8AB0     		sub	sp, sp, #40
 3733              	.LCFI31:
 3734              		.cfi_def_cfa_offset 48
 3735 0004 00AF     		add	r7, sp, #0
 3736              	.LCFI32:
 3737              		.cfi_def_cfa_register 7
 3738 0006 7860     		str	r0, [r7, #4]
 331:src/modbus.c  **** 
 332:src/modbus.c  **** 	//Point qPacket to first address from where data is to be fetched.
 333:src/modbus.c  **** 	qPacket++;
 3739              		.loc 1 333 0
 3740 0008 7B68     		ldr	r3, [r7, #4]
 3741 000a 0433     		adds	r3, r3, #4
 3742 000c 7B60     		str	r3, [r7, #4]
 334:src/modbus.c  **** 
 335:src/modbus.c  **** 	//Store the address requested and move it to response packet
 336:src/modbus.c  **** 	uint32_t tempWriteAddress = *qPacket;
 3743              		.loc 1 336 0
 3744 000e 7B68     		ldr	r3, [r7, #4]
 3745 0010 1B68     		ldr	r3, [r3]
 3746 0012 FB61     		str	r3, [r7, #28]
 337:src/modbus.c  **** 	*rPacket = (unsigned int) tempWriteAddress;
 3747              		.loc 1 337 0
 3748 0014 284B     		ldr	r3, .L151
 3749 0016 1B68     		ldr	r3, [r3]
 3750 0018 FA69     		ldr	r2, [r7, #28]
 3751 001a 1A60     		str	r2, [r3]
 338:src/modbus.c  **** 	rPacket++;
 3752              		.loc 1 338 0
 3753 001c 264B     		ldr	r3, .L151
 3754 001e 1B68     		ldr	r3, [r3]
 3755 0020 1A1D     		adds	r2, r3, #4
 3756 0022 254B     		ldr	r3, .L151
 3757 0024 1A60     		str	r2, [r3]
 339:src/modbus.c  **** 
 340:src/modbus.c  **** 	//Assign first address to firstRequest from qPacket and
 341:src/modbus.c  **** 	//qPacket's next value i.e total bit requested to totalRequest.
 342:src/modbus.c  **** 	firstRequest = 0x9c40 + *qPacket++;
 3758              		.loc 1 342 0
 3759 0026 7B68     		ldr	r3, [r7, #4]
 3760 0028 1A1D     		adds	r2, r3, #4
 3761 002a 7A60     		str	r2, [r7, #4]
 3762 002c 1B68     		ldr	r3, [r3]
 3763 002e 03F51C43 		add	r3, r3, #39936
 3764 0032 4033     		adds	r3, r3, #64
 3765 0034 214A     		ldr	r2, .L151+4
 3766 0036 1360     		str	r3, [r2]
 343:src/modbus.c  **** 
 344:src/modbus.c  **** 	//move the data to be written
 345:src/modbus.c  **** 	writeRequest = *qPacket;
 3767              		.loc 1 345 0
 3768 0038 7B68     		ldr	r3, [r7, #4]
 3769 003a 1A68     		ldr	r2, [r3]
 3770 003c 204B     		ldr	r3, .L151+8
 3771 003e 1A60     		str	r2, [r3]
 346:src/modbus.c  **** 
 347:src/modbus.c  **** 	//stream to be sent back to response packet
 348:src/modbus.c  **** 	//*rPacket = (unsigned int) firstRequest;
 349:src/modbus.c  **** 	//printf("%d\n",*rPacket);
 350:src/modbus.c  **** 	//rPacket++;
 351:src/modbus.c  **** 
 352:src/modbus.c  **** 	//Fetch first address data.
 353:src/modbus.c  **** 	s = getData(firstRequest++);
 3772              		.loc 1 353 0
 3773 0040 1E4B     		ldr	r3, .L151+4
 3774 0042 1B68     		ldr	r3, [r3]
 3775 0044 591C     		adds	r1, r3, #1
 3776 0046 1D4A     		ldr	r2, .L151+4
 3777 0048 1160     		str	r1, [r2]
 3778 004a 1846     		mov	r0, r3
 3779 004c FFF7FEFF 		bl	getData
 3780 0050 0246     		mov	r2, r0
 3781 0052 1C4B     		ldr	r3, .L151+12
 3782 0054 1A60     		str	r2, [r3]
 354:src/modbus.c  **** 
 355:src/modbus.c  **** 	int tempWriteRequest = (int) writeRequest;
 3783              		.loc 1 355 0
 3784 0056 1A4B     		ldr	r3, .L151+8
 3785 0058 1B68     		ldr	r3, [r3]
 3786 005a BB61     		str	r3, [r7, #24]
 356:src/modbus.c  **** 	int fromBit = 0;
 3787              		.loc 1 356 0
 3788 005c 0023     		movs	r3, #0
 3789 005e 7B61     		str	r3, [r7, #20]
 357:src/modbus.c  **** 	int toBit = 32;
 3790              		.loc 1 357 0
 3791 0060 2023     		movs	r3, #32
 3792 0062 3B61     		str	r3, [r7, #16]
 358:src/modbus.c  **** 	int shiftRight;
 359:src/modbus.c  **** 	int d;
 360:src/modbus.c  **** 
 361:src/modbus.c  **** 	//Call masking function and store value in r.
 362:src/modbus.c  **** 	unsigned int r = getMask(fromBit, toBit);
 3793              		.loc 1 362 0
 3794 0064 7869     		ldr	r0, [r7, #20]
 3795 0066 3969     		ldr	r1, [r7, #16]
 3796 0068 FFF7FEFF 		bl	getMask
 3797 006c F860     		str	r0, [r7, #12]
 363:src/modbus.c  **** 
 364:src/modbus.c  **** 	//Get masking done on data from hash and store in result.
 365:src/modbus.c  **** 	unsigned int result = r & s->value;
 3798              		.loc 1 365 0
 3799 006e 154B     		ldr	r3, .L151+12
 3800 0070 1B68     		ldr	r3, [r3]
 3801 0072 5B68     		ldr	r3, [r3, #4]
 3802 0074 1A46     		mov	r2, r3
 3803 0076 FB68     		ldr	r3, [r7, #12]
 3804 0078 1340     		ands	r3, r3, r2
 3805 007a 3B62     		str	r3, [r7, #32]
 366:src/modbus.c  **** 
 367:src/modbus.c  **** 	//Else shift right.
 368:src/modbus.c  **** 	for (shiftRight = fromBit; shiftRight > 0; shiftRight--) {
 3806              		.loc 1 368 0
 3807 007c 7B69     		ldr	r3, [r7, #20]
 3808 007e 7B62     		str	r3, [r7, #36]
 3809 0080 05E0     		b	.L148
 3810              	.L149:
 369:src/modbus.c  **** 		result = result >> 1;
 3811              		.loc 1 369 0 discriminator 2
 3812 0082 3B6A     		ldr	r3, [r7, #32]
 3813 0084 5B08     		lsrs	r3, r3, #1
 3814 0086 3B62     		str	r3, [r7, #32]
 368:src/modbus.c  **** 	for (shiftRight = fromBit; shiftRight > 0; shiftRight--) {
 3815              		.loc 1 368 0 discriminator 2
 3816 0088 7B6A     		ldr	r3, [r7, #36]
 3817 008a 013B     		subs	r3, r3, #1
 3818 008c 7B62     		str	r3, [r7, #36]
 3819              	.L148:
 368:src/modbus.c  **** 	for (shiftRight = fromBit; shiftRight > 0; shiftRight--) {
 3820              		.loc 1 368 0 is_stmt 0 discriminator 1
 3821 008e 7B6A     		ldr	r3, [r7, #36]
 3822 0090 002B     		cmp	r3, #0
 3823 0092 F6DC     		bgt	.L149
 370:src/modbus.c  **** 	}
 371:src/modbus.c  **** 
 372:src/modbus.c  **** 	//printf("Data: 0x%x\n", result);
 373:src/modbus.c  **** 
 374:src/modbus.c  **** 	result = result | tempWriteRequest;
 3824              		.loc 1 374 0 is_stmt 1
 3825 0094 BB69     		ldr	r3, [r7, #24]
 3826 0096 3A6A     		ldr	r2, [r7, #32]
 3827 0098 1343     		orrs	r3, r3, r2
 3828 009a 3B62     		str	r3, [r7, #32]
 375:src/modbus.c  **** 
 376:src/modbus.c  **** 	//Store the data to be sent in response packet one by one till requested bits reached.
 377:src/modbus.c  **** 	//*rPacket = result;
 378:src/modbus.c  **** 	//rPacket++;
 379:src/modbus.c  **** 	*rPacket = tempWriteRequest;
 3829              		.loc 1 379 0
 3830 009c 064B     		ldr	r3, .L151
 3831 009e 1B68     		ldr	r3, [r3]
 3832 00a0 BA69     		ldr	r2, [r7, #24]
 3833 00a2 1A60     		str	r2, [r3]
 380:src/modbus.c  **** 	rPacket++;
 3834              		.loc 1 380 0
 3835 00a4 044B     		ldr	r3, .L151
 3836 00a6 1B68     		ldr	r3, [r3]
 3837 00a8 1A1D     		adds	r2, r3, #4
 3838 00aa 034B     		ldr	r3, .L151
 3839 00ac 1A60     		str	r2, [r3]
 381:src/modbus.c  **** 
 382:src/modbus.c  **** //	for (d = 0; d < (1 + 5); d++) {
 383:src/modbus.c  **** //		printf("\n0x%x", arrayResponsePacket[d]);
 384:src/modbus.c  **** //	}
 385:src/modbus.c  **** 
 386:src/modbus.c  **** 	return 0;
 3840              		.loc 1 386 0
 3841 00ae 0023     		movs	r3, #0
 387:src/modbus.c  **** 
 388:src/modbus.c  **** }
 3842              		.loc 1 388 0
 3843 00b0 1846     		mov	r0, r3
 3844 00b2 2837     		adds	r7, r7, #40
 3845 00b4 BD46     		mov	sp, r7
 3846              		@ sp needed
 3847 00b6 80BD     		pop	{r7, pc}
 3848              	.L152:
 3849              		.align	2
 3850              	.L151:
 3851 00b8 00000000 		.word	rPacket
 3852 00bc 00000000 		.word	firstRequest
 3853 00c0 00000000 		.word	writeRequest
 3854 00c4 00000000 		.word	s
 3855              		.cfi_endproc
 3856              	.LFE10:
 3858              		.section	.text.writeSingleCoil,"ax",%progbits
 3859              		.align	2
 3860              		.global	writeSingleCoil
 3861              		.thumb
 3862              		.thumb_func
 3864              	writeSingleCoil:
 3865              	.LFB11:
 389:src/modbus.c  **** 
 390:src/modbus.c  **** 
 391:src/modbus.c  **** //TODO : Check what to use for writing ON (0xffff0000 or 0xff00) and OFF (0x00000000 or 0x0000)
 392:src/modbus.c  **** uint32_t writeSingleCoil(uint32_t *qPacket) {
 3866              		.loc 1 392 0
 3867              		.cfi_startproc
 3868              		@ args = 0, pretend = 0, frame = 40
 3869              		@ frame_needed = 1, uses_anonymous_args = 0
 3870 0000 80B5     		push	{r7, lr}
 3871              	.LCFI33:
 3872              		.cfi_def_cfa_offset 8
 3873              		.cfi_offset 7, -8
 3874              		.cfi_offset 14, -4
 3875 0002 8AB0     		sub	sp, sp, #40
 3876              	.LCFI34:
 3877              		.cfi_def_cfa_offset 48
 3878 0004 00AF     		add	r7, sp, #0
 3879              	.LCFI35:
 3880              		.cfi_def_cfa_register 7
 3881 0006 7860     		str	r0, [r7, #4]
 393:src/modbus.c  **** 
 394:src/modbus.c  **** 	//Point qPacket to first address from where data is to be fetched.
 395:src/modbus.c  **** 	qPacket++;
 3882              		.loc 1 395 0
 3883 0008 7B68     		ldr	r3, [r7, #4]
 3884 000a 0433     		adds	r3, r3, #4
 3885 000c 7B60     		str	r3, [r7, #4]
 396:src/modbus.c  **** 
 397:src/modbus.c  **** 	//Assign first address to firstRequest from qPacket and
 398:src/modbus.c  **** 	//qPacket's next value i.e total bit requested to totalRequest.
 399:src/modbus.c  **** 	firstRequest = 0x0000 + *qPacket++;
 3886              		.loc 1 399 0
 3887 000e 7B68     		ldr	r3, [r7, #4]
 3888 0010 1A1D     		adds	r2, r3, #4
 3889 0012 7A60     		str	r2, [r7, #4]
 3890 0014 1A68     		ldr	r2, [r3]
 3891 0016 2D4B     		ldr	r3, .L159
 3892 0018 1A60     		str	r2, [r3]
 400:src/modbus.c  **** 
 401:src/modbus.c  **** 	//move the data to be written
 402:src/modbus.c  **** 	uint32_t *writeRequest = qPacket;
 3893              		.loc 1 402 0
 3894 001a 7B68     		ldr	r3, [r7, #4]
 3895 001c 7B62     		str	r3, [r7, #36]
 403:src/modbus.c  **** //	writeRequest+=3;
 404:src/modbus.c  **** 
 405:src/modbus.c  **** 	//stream to be sent back to response packet
 406:src/modbus.c  **** 	*rPacket = (unsigned int) firstRequest;
 3896              		.loc 1 406 0
 3897 001e 2C4B     		ldr	r3, .L159+4
 3898 0020 1B68     		ldr	r3, [r3]
 3899 0022 2A4A     		ldr	r2, .L159
 3900 0024 1268     		ldr	r2, [r2]
 3901 0026 1A60     		str	r2, [r3]
 407:src/modbus.c  **** 	//printf("%d\n",*rPacket);
 408:src/modbus.c  **** 	rPacket++;
 3902              		.loc 1 408 0
 3903 0028 294B     		ldr	r3, .L159+4
 3904 002a 1B68     		ldr	r3, [r3]
 3905 002c 1A1D     		adds	r2, r3, #4
 3906 002e 284B     		ldr	r3, .L159+4
 3907 0030 1A60     		str	r2, [r3]
 409:src/modbus.c  **** 
 410:src/modbus.c  **** 	//Fetch first address data.
 411:src/modbus.c  **** 	s = getData(firstRequest++);
 3908              		.loc 1 411 0
 3909 0032 264B     		ldr	r3, .L159
 3910 0034 1B68     		ldr	r3, [r3]
 3911 0036 591C     		adds	r1, r3, #1
 3912 0038 244A     		ldr	r2, .L159
 3913 003a 1160     		str	r1, [r2]
 3914 003c 1846     		mov	r0, r3
 3915 003e FFF7FEFF 		bl	getData
 3916 0042 0246     		mov	r2, r0
 3917 0044 234B     		ldr	r3, .L159+8
 3918 0046 1A60     		str	r2, [r3]
 412:src/modbus.c  **** 
 413:src/modbus.c  **** 	//int tempWriteRequest = (int) writeRequest;
 414:src/modbus.c  **** 	int fromBit = 0;
 3919              		.loc 1 414 0
 3920 0048 0023     		movs	r3, #0
 3921 004a 3B62     		str	r3, [r7, #32]
 415:src/modbus.c  **** 	int toBit = 7;
 3922              		.loc 1 415 0
 3923 004c 0723     		movs	r3, #7
 3924 004e FB61     		str	r3, [r7, #28]
 416:src/modbus.c  **** 	int shiftRight;
 417:src/modbus.c  **** 	int d;
 418:src/modbus.c  **** 	int count = 0;
 3925              		.loc 1 418 0
 3926 0050 0023     		movs	r3, #0
 3927 0052 7B61     		str	r3, [r7, #20]
 419:src/modbus.c  **** 	unsigned int result;
 420:src/modbus.c  **** 
 421:src/modbus.c  **** 	while(count < 2){
 3928              		.loc 1 421 0
 3929 0054 31E0     		b	.L154
 3930              	.L157:
 3931              	.LBB12:
 422:src/modbus.c  **** 		//Call masking function and store value in r.
 423:src/modbus.c  **** 		unsigned int r = getMask(fromBit, toBit);
 3932              		.loc 1 423 0
 3933 0056 386A     		ldr	r0, [r7, #32]
 3934 0058 F969     		ldr	r1, [r7, #28]
 3935 005a FFF7FEFF 		bl	getMask
 3936 005e F860     		str	r0, [r7, #12]
 424:src/modbus.c  **** 
 425:src/modbus.c  **** 		//Get masking done on data from hash and store in result.
 426:src/modbus.c  **** 		result = r & s->value;
 3937              		.loc 1 426 0
 3938 0060 1C4B     		ldr	r3, .L159+8
 3939 0062 1B68     		ldr	r3, [r3]
 3940 0064 5B68     		ldr	r3, [r3, #4]
 3941 0066 1A46     		mov	r2, r3
 3942 0068 FB68     		ldr	r3, [r7, #12]
 3943 006a 1340     		ands	r3, r3, r2
 3944 006c 3B61     		str	r3, [r7, #16]
 427:src/modbus.c  **** 
 428:src/modbus.c  **** 		//Else shift right.
 429:src/modbus.c  **** 		for (shiftRight = fromBit; shiftRight > 0; shiftRight--) {
 3945              		.loc 1 429 0
 3946 006e 3B6A     		ldr	r3, [r7, #32]
 3947 0070 BB61     		str	r3, [r7, #24]
 3948 0072 05E0     		b	.L155
 3949              	.L156:
 430:src/modbus.c  **** 			result = result >> 1;
 3950              		.loc 1 430 0 discriminator 2
 3951 0074 3B69     		ldr	r3, [r7, #16]
 3952 0076 5B08     		lsrs	r3, r3, #1
 3953 0078 3B61     		str	r3, [r7, #16]
 429:src/modbus.c  **** 		for (shiftRight = fromBit; shiftRight > 0; shiftRight--) {
 3954              		.loc 1 429 0 discriminator 2
 3955 007a BB69     		ldr	r3, [r7, #24]
 3956 007c 013B     		subs	r3, r3, #1
 3957 007e BB61     		str	r3, [r7, #24]
 3958              	.L155:
 429:src/modbus.c  **** 		for (shiftRight = fromBit; shiftRight > 0; shiftRight--) {
 3959              		.loc 1 429 0 is_stmt 0 discriminator 1
 3960 0080 BB69     		ldr	r3, [r7, #24]
 3961 0082 002B     		cmp	r3, #0
 3962 0084 F6DC     		bgt	.L156
 431:src/modbus.c  **** 		}
 432:src/modbus.c  **** 
 433:src/modbus.c  **** 		*rPacket = *writeRequest;
 3963              		.loc 1 433 0 is_stmt 1
 3964 0086 124B     		ldr	r3, .L159+4
 3965 0088 1B68     		ldr	r3, [r3]
 3966 008a 7A6A     		ldr	r2, [r7, #36]
 3967 008c 1268     		ldr	r2, [r2]
 3968 008e 1A60     		str	r2, [r3]
 434:src/modbus.c  **** 		rPacket++;
 3969              		.loc 1 434 0
 3970 0090 0F4B     		ldr	r3, .L159+4
 3971 0092 1B68     		ldr	r3, [r3]
 3972 0094 1A1D     		adds	r2, r3, #4
 3973 0096 0E4B     		ldr	r3, .L159+4
 3974 0098 1A60     		str	r2, [r3]
 435:src/modbus.c  **** 
 436:src/modbus.c  **** 		result = result | *writeRequest++;
 3975              		.loc 1 436 0
 3976 009a 7B6A     		ldr	r3, [r7, #36]
 3977 009c 1A1D     		adds	r2, r3, #4
 3978 009e 7A62     		str	r2, [r7, #36]
 3979 00a0 1B68     		ldr	r3, [r3]
 3980 00a2 3A69     		ldr	r2, [r7, #16]
 3981 00a4 1343     		orrs	r3, r3, r2
 3982 00a6 3B61     		str	r3, [r7, #16]
 437:src/modbus.c  **** 
 438:src/modbus.c  **** 		fromBit = fromBit + 8;
 3983              		.loc 1 438 0
 3984 00a8 3B6A     		ldr	r3, [r7, #32]
 3985 00aa 0833     		adds	r3, r3, #8
 3986 00ac 3B62     		str	r3, [r7, #32]
 439:src/modbus.c  **** 		toBit = toBit + 8;
 3987              		.loc 1 439 0
 3988 00ae FB69     		ldr	r3, [r7, #28]
 3989 00b0 0833     		adds	r3, r3, #8
 3990 00b2 FB61     		str	r3, [r7, #28]
 440:src/modbus.c  **** 
 441:src/modbus.c  **** 		count++;
 3991              		.loc 1 441 0
 3992 00b4 7B69     		ldr	r3, [r7, #20]
 3993 00b6 0133     		adds	r3, r3, #1
 3994 00b8 7B61     		str	r3, [r7, #20]
 3995              	.L154:
 3996              	.LBE12:
 421:src/modbus.c  **** 	while(count < 2){
 3997              		.loc 1 421 0 discriminator 1
 3998 00ba 7B69     		ldr	r3, [r7, #20]
 3999 00bc 012B     		cmp	r3, #1
 4000 00be CADD     		ble	.L157
 442:src/modbus.c  **** 	}
 443:src/modbus.c  **** //		//Store the data to be sent in response packet one by one till requested bits reached.
 444:src/modbus.c  **** //		*rPacket = result;
 445:src/modbus.c  **** //		rPacket++;
 446:src/modbus.c  **** //		//printf("Data: 0x%x\n", result);
 447:src/modbus.c  **** 
 448:src/modbus.c  **** 
 449:src/modbus.c  **** //	for (d = 0; d < (1 + 3); d++) {
 450:src/modbus.c  **** //		printf("\n0x%x", arrayResponsePacket[d]);
 451:src/modbus.c  **** //	}
 452:src/modbus.c  **** 
 453:src/modbus.c  **** 	return 0;
 4001              		.loc 1 453 0
 4002 00c0 0023     		movs	r3, #0
 454:src/modbus.c  **** 
 455:src/modbus.c  **** }
 4003              		.loc 1 455 0
 4004 00c2 1846     		mov	r0, r3
 4005 00c4 2837     		adds	r7, r7, #40
 4006 00c6 BD46     		mov	sp, r7
 4007              		@ sp needed
 4008 00c8 80BD     		pop	{r7, pc}
 4009              	.L160:
 4010 00ca 00BF     		.align	2
 4011              	.L159:
 4012 00cc 00000000 		.word	firstRequest
 4013 00d0 00000000 		.word	rPacket
 4014 00d4 00000000 		.word	s
 4015              		.cfi_endproc
 4016              	.LFE11:
 4018              		.section	.text.readInputRegisters,"ax",%progbits
 4019              		.align	2
 4020              		.global	readInputRegisters
 4021              		.thumb
 4022              		.thumb_func
 4024              	readInputRegisters:
 4025              	.LFB12:
 456:src/modbus.c  **** 
 457:src/modbus.c  **** uint32_t readInputRegisters(uint32_t *qPacket) {
 4026              		.loc 1 457 0
 4027              		.cfi_startproc
 4028              		@ args = 0, pretend = 0, frame = 48
 4029              		@ frame_needed = 1, uses_anonymous_args = 0
 4030 0000 80B5     		push	{r7, lr}
 4031              	.LCFI36:
 4032              		.cfi_def_cfa_offset 8
 4033              		.cfi_offset 7, -8
 4034              		.cfi_offset 14, -4
 4035 0002 8CB0     		sub	sp, sp, #48
 4036              	.LCFI37:
 4037              		.cfi_def_cfa_offset 56
 4038 0004 00AF     		add	r7, sp, #0
 4039              	.LCFI38:
 4040              		.cfi_def_cfa_register 7
 4041 0006 7860     		str	r0, [r7, #4]
 458:src/modbus.c  **** 
 459:src/modbus.c  **** 	//Point qPacket to first address from where data is to be fetched.
 460:src/modbus.c  **** 	qPacket++;
 4042              		.loc 1 460 0
 4043 0008 7B68     		ldr	r3, [r7, #4]
 4044 000a 0433     		adds	r3, r3, #4
 4045 000c 7B60     		str	r3, [r7, #4]
 461:src/modbus.c  **** 
 462:src/modbus.c  **** 	//Assign first address to firstRequest from qPacket and
 463:src/modbus.c  **** 	//qPacket's next value i.e total bit requested to totalRequest.
 464:src/modbus.c  **** 	firstRequest = 0x7530 + *qPacket++;
 4046              		.loc 1 464 0
 4047 000e 7B68     		ldr	r3, [r7, #4]
 4048 0010 1A1D     		adds	r2, r3, #4
 4049 0012 7A60     		str	r2, [r7, #4]
 4050 0014 1B68     		ldr	r3, [r3]
 4051 0016 03F5EA43 		add	r3, r3, #29952
 4052 001a 3033     		adds	r3, r3, #48
 4053 001c 4E4A     		ldr	r2, .L174
 4054 001e 1360     		str	r3, [r2]
 465:src/modbus.c  **** 	totalRequest = *qPacket;
 4055              		.loc 1 465 0
 4056 0020 7B68     		ldr	r3, [r7, #4]
 4057 0022 1A68     		ldr	r2, [r3]
 4058 0024 4D4B     		ldr	r3, .L174+4
 4059 0026 1A60     		str	r2, [r3]
 466:src/modbus.c  **** 
 467:src/modbus.c  **** 	//Calculate no. of byte and assign it to rPacket
 468:src/modbus.c  **** 	unsigned int byteStream = ((totalRequest / 8) + 1);
 4060              		.loc 1 468 0
 4061 0028 4C4B     		ldr	r3, .L174+4
 4062 002a 1B68     		ldr	r3, [r3]
 4063 002c DB08     		lsrs	r3, r3, #3
 4064 002e 0133     		adds	r3, r3, #1
 4065 0030 FB60     		str	r3, [r7, #12]
 469:src/modbus.c  **** 
 470:src/modbus.c  **** 	//Copy no. of byte stream to be sent back to reponse packet
 471:src/modbus.c  **** 	*rPacket = (unsigned int) byteStream;
 4066              		.loc 1 471 0
 4067 0032 4B4B     		ldr	r3, .L174+8
 4068 0034 1B68     		ldr	r3, [r3]
 4069 0036 FA68     		ldr	r2, [r7, #12]
 4070 0038 1A60     		str	r2, [r3]
 472:src/modbus.c  **** 	//printf("%d\n",*rPacket);
 473:src/modbus.c  **** 	rPacket++;
 4071              		.loc 1 473 0
 4072 003a 494B     		ldr	r3, .L174+8
 4073 003c 1B68     		ldr	r3, [r3]
 4074 003e 1A1D     		adds	r2, r3, #4
 4075 0040 474B     		ldr	r3, .L174+8
 4076 0042 1A60     		str	r2, [r3]
 474:src/modbus.c  **** 
 475:src/modbus.c  **** 	//Fetch first address data.
 476:src/modbus.c  **** 	s = getData(firstRequest++);
 4077              		.loc 1 476 0
 4078 0044 444B     		ldr	r3, .L174
 4079 0046 1B68     		ldr	r3, [r3]
 4080 0048 591C     		adds	r1, r3, #1
 4081 004a 434A     		ldr	r2, .L174
 4082 004c 1160     		str	r1, [r2]
 4083 004e 1846     		mov	r0, r3
 4084 0050 FFF7FEFF 		bl	getData
 4085 0054 0246     		mov	r2, r0
 4086 0056 434B     		ldr	r3, .L174+12
 4087 0058 1A60     		str	r2, [r3]
 477:src/modbus.c  **** 
 478:src/modbus.c  **** 	int tempTotalRequest = (int) totalRequest;
 4088              		.loc 1 478 0
 4089 005a 404B     		ldr	r3, .L174+4
 4090 005c 1B68     		ldr	r3, [r3]
 4091 005e FB62     		str	r3, [r7, #44]
 479:src/modbus.c  **** 	int count = 0;
 4092              		.loc 1 479 0
 4093 0060 0023     		movs	r3, #0
 4094 0062 BB62     		str	r3, [r7, #40]
 480:src/modbus.c  **** 	int fromBit = 0;
 4095              		.loc 1 480 0
 4096 0064 0023     		movs	r3, #0
 4097 0066 7B62     		str	r3, [r7, #36]
 481:src/modbus.c  **** 	int toBit = 7;
 4098              		.loc 1 481 0
 4099 0068 0723     		movs	r3, #7
 4100 006a 3B62     		str	r3, [r7, #32]
 482:src/modbus.c  **** 	int shiftRight;
 483:src/modbus.c  **** 	int flag = 0;
 4101              		.loc 1 483 0
 4102 006c 0023     		movs	r3, #0
 4103 006e BB61     		str	r3, [r7, #24]
 484:src/modbus.c  **** 	int maxCount = 0;
 4104              		.loc 1 484 0
 4105 0070 0023     		movs	r3, #0
 4106 0072 7B61     		str	r3, [r7, #20]
 485:src/modbus.c  **** 	//int d;
 486:src/modbus.c  **** 
 487:src/modbus.c  **** 	again: while (tempTotalRequest > 0) {
 4107              		.loc 1 487 0
 4108 0074 67E0     		b	.L163
 4109              	.L172:
 4110              	.LBB13:
 488:src/modbus.c  **** 
 489:src/modbus.c  **** 		if (totalRequest < 8) {
 4111              		.loc 1 489 0
 4112 0076 394B     		ldr	r3, .L174+4
 4113 0078 1B68     		ldr	r3, [r3]
 4114 007a 072B     		cmp	r3, #7
 4115 007c 03D8     		bhi	.L164
 490:src/modbus.c  **** 			toBit = totalRequest - 1;
 4116              		.loc 1 490 0
 4117 007e 374B     		ldr	r3, .L174+4
 4118 0080 1B68     		ldr	r3, [r3]
 4119 0082 013B     		subs	r3, r3, #1
 4120 0084 3B62     		str	r3, [r7, #32]
 4121              	.L164:
 491:src/modbus.c  **** 		}
 492:src/modbus.c  **** 
 493:src/modbus.c  **** 		//Check if temp (having totalRequest) has modulus value of totalRequest.
 494:src/modbus.c  **** 		if (tempTotalRequest == (totalRequest % 8) && flag == 1) {
 4122              		.loc 1 494 0
 4123 0086 FA6A     		ldr	r2, [r7, #44]
 4124 0088 344B     		ldr	r3, .L174+4
 4125 008a 1B68     		ldr	r3, [r3]
 4126 008c 03F00703 		and	r3, r3, #7
 4127 0090 9A42     		cmp	r2, r3
 4128 0092 08D1     		bne	.L165
 4129              		.loc 1 494 0 is_stmt 0 discriminator 1
 4130 0094 BB69     		ldr	r3, [r7, #24]
 4131 0096 012B     		cmp	r3, #1
 4132 0098 05D1     		bne	.L165
 495:src/modbus.c  **** 			toBit = (totalRequest % 8) - 1; //if true the set toBit to modules minus-1.
 4133              		.loc 1 495 0 is_stmt 1
 4134 009a 304B     		ldr	r3, .L174+4
 4135 009c 1B68     		ldr	r3, [r3]
 4136 009e 03F00703 		and	r3, r3, #7
 4137 00a2 013B     		subs	r3, r3, #1
 4138 00a4 3B62     		str	r3, [r7, #32]
 4139              	.L165:
 496:src/modbus.c  **** 		}
 497:src/modbus.c  **** 
 498:src/modbus.c  **** 		//Call masking function and store value in r.
 499:src/modbus.c  **** 		unsigned int r = getMask(fromBit, toBit);
 4140              		.loc 1 499 0
 4141 00a6 786A     		ldr	r0, [r7, #36]
 4142 00a8 396A     		ldr	r1, [r7, #32]
 4143 00aa FFF7FEFF 		bl	getMask
 4144 00ae B860     		str	r0, [r7, #8]
 500:src/modbus.c  **** 
 501:src/modbus.c  **** 		//Get masking done on data from hash and store in result.
 502:src/modbus.c  **** 		unsigned int result = r & s->value;
 4145              		.loc 1 502 0
 4146 00b0 2C4B     		ldr	r3, .L174+12
 4147 00b2 1B68     		ldr	r3, [r3]
 4148 00b4 5B68     		ldr	r3, [r3, #4]
 4149 00b6 1A46     		mov	r2, r3
 4150 00b8 BB68     		ldr	r3, [r7, #8]
 4151 00ba 1340     		ands	r3, r3, r2
 4152 00bc 3B61     		str	r3, [r7, #16]
 503:src/modbus.c  **** 
 504:src/modbus.c  **** 		//Check if first 8 Bit then go to "next" label.
 505:src/modbus.c  **** 		if (toBit == 7) {
 4153              		.loc 1 505 0
 4154 00be 3B6A     		ldr	r3, [r7, #32]
 4155 00c0 072B     		cmp	r3, #7
 4156 00c2 00D1     		bne	.L166
 506:src/modbus.c  **** 			goto next;
 4157              		.loc 1 506 0
 4158 00c4 0BE0     		b	.L167
 4159              	.L166:
 507:src/modbus.c  **** 		}
 508:src/modbus.c  **** 
 509:src/modbus.c  **** 		//Else shift right.
 510:src/modbus.c  **** 		else {
 511:src/modbus.c  **** 			for (shiftRight = fromBit; shiftRight > 0; shiftRight--) {
 4160              		.loc 1 511 0
 4161 00c6 7B6A     		ldr	r3, [r7, #36]
 4162 00c8 FB61     		str	r3, [r7, #28]
 4163 00ca 05E0     		b	.L168
 4164              	.L169:
 512:src/modbus.c  **** 				result = result >> 1;
 4165              		.loc 1 512 0 discriminator 2
 4166 00cc 3B69     		ldr	r3, [r7, #16]
 4167 00ce 5B08     		lsrs	r3, r3, #1
 4168 00d0 3B61     		str	r3, [r7, #16]
 511:src/modbus.c  **** 			for (shiftRight = fromBit; shiftRight > 0; shiftRight--) {
 4169              		.loc 1 511 0 discriminator 2
 4170 00d2 FB69     		ldr	r3, [r7, #28]
 4171 00d4 013B     		subs	r3, r3, #1
 4172 00d6 FB61     		str	r3, [r7, #28]
 4173              	.L168:
 511:src/modbus.c  **** 			for (shiftRight = fromBit; shiftRight > 0; shiftRight--) {
 4174              		.loc 1 511 0 is_stmt 0 discriminator 1
 4175 00d8 FB69     		ldr	r3, [r7, #28]
 4176 00da 002B     		cmp	r3, #0
 4177 00dc F6DC     		bgt	.L169
 4178              	.L167:
 513:src/modbus.c  **** 			}
 514:src/modbus.c  **** 		}
 515:src/modbus.c  **** 
 516:src/modbus.c  **** 		//Label
 517:src/modbus.c  **** 		next:
 518:src/modbus.c  **** 
 519:src/modbus.c  **** 		//Store the data to be sent in response packet one by one till requested bits reached.
 520:src/modbus.c  **** 		*rPacket = result;
 4179              		.loc 1 520 0 is_stmt 1
 4180 00de 204B     		ldr	r3, .L174+8
 4181 00e0 1B68     		ldr	r3, [r3]
 4182 00e2 3A69     		ldr	r2, [r7, #16]
 4183 00e4 1A60     		str	r2, [r3]
 521:src/modbus.c  **** 		rPacket++;
 4184              		.loc 1 521 0
 4185 00e6 1E4B     		ldr	r3, .L174+8
 4186 00e8 1B68     		ldr	r3, [r3]
 4187 00ea 1A1D     		adds	r2, r3, #4
 4188 00ec 1C4B     		ldr	r3, .L174+8
 4189 00ee 1A60     		str	r2, [r3]
 522:src/modbus.c  **** //		printf("Data: 0x%x\n", result);
 523:src/modbus.c  **** 
 524:src/modbus.c  **** 		//Increase the countbuffer to check if 32 bit data sent or not
 525:src/modbus.c  **** 		count++;
 4190              		.loc 1 525 0
 4191 00f0 BB6A     		ldr	r3, [r7, #40]
 4192 00f2 0133     		adds	r3, r3, #1
 4193 00f4 BB62     		str	r3, [r7, #40]
 526:src/modbus.c  **** 
 527:src/modbus.c  **** 		//Decrement the totalReqeust (assigned to temp) by 8 after sending 8 bit.
 528:src/modbus.c  **** 		tempTotalRequest = tempTotalRequest - 8;
 4194              		.loc 1 528 0
 4195 00f6 FB6A     		ldr	r3, [r7, #44]
 4196 00f8 083B     		subs	r3, r3, #8
 4197 00fa FB62     		str	r3, [r7, #44]
 529:src/modbus.c  **** 
 530:src/modbus.c  **** 		//Check if totalRequest is more than 32 bit or not.
 531:src/modbus.c  **** 		if (totalRequest >= 32) {
 4198              		.loc 1 531 0
 4199 00fc 174B     		ldr	r3, .L174+4
 4200 00fe 1B68     		ldr	r3, [r3]
 4201 0100 1F2B     		cmp	r3, #31
 4202 0102 01D9     		bls	.L170
 532:src/modbus.c  **** 			maxCount = 4;
 4203              		.loc 1 532 0
 4204 0104 0423     		movs	r3, #4
 4205 0106 7B61     		str	r3, [r7, #20]
 4206              	.L170:
 533:src/modbus.c  **** 		}
 534:src/modbus.c  **** 
 535:src/modbus.c  **** 		//If not then set
 536:src/modbus.c  **** 		/*else{
 537:src/modbus.c  **** 		 count = 0;
 538:src/modbus.c  **** 		 fromBit = 0;
 539:src/modbus.c  **** 		 toBit = 7;
 540:src/modbus.c  **** 		 flag = 1;
 541:src/modbus.c  **** 		 goto again;
 542:src/modbus.c  **** 		 }*/
 543:src/modbus.c  **** 
 544:src/modbus.c  **** 		//If count reached b i.e. total 4*8 Bit sent (32 bit) then get next value from hash.
 545:src/modbus.c  **** 		if (count == maxCount) {
 4207              		.loc 1 545 0
 4208 0108 BA6A     		ldr	r2, [r7, #40]
 4209 010a 7B69     		ldr	r3, [r7, #20]
 4210 010c 9A42     		cmp	r2, r3
 4211 010e 14D1     		bne	.L171
 546:src/modbus.c  **** 			s = getData(firstRequest++);
 4212              		.loc 1 546 0
 4213 0110 114B     		ldr	r3, .L174
 4214 0112 1B68     		ldr	r3, [r3]
 4215 0114 591C     		adds	r1, r3, #1
 4216 0116 104A     		ldr	r2, .L174
 4217 0118 1160     		str	r1, [r2]
 4218 011a 1846     		mov	r0, r3
 4219 011c FFF7FEFF 		bl	getData
 4220 0120 0246     		mov	r2, r0
 4221 0122 104B     		ldr	r3, .L174+12
 4222 0124 1A60     		str	r2, [r3]
 547:src/modbus.c  **** 			count = 0;
 4223              		.loc 1 547 0
 4224 0126 0023     		movs	r3, #0
 4225 0128 BB62     		str	r3, [r7, #40]
 548:src/modbus.c  **** 			fromBit = 0;
 4226              		.loc 1 548 0
 4227 012a 0023     		movs	r3, #0
 4228 012c 7B62     		str	r3, [r7, #36]
 549:src/modbus.c  **** 			toBit = 7;
 4229              		.loc 1 549 0
 4230 012e 0723     		movs	r3, #7
 4231 0130 3B62     		str	r3, [r7, #32]
 550:src/modbus.c  **** 			flag = 1;
 4232              		.loc 1 550 0
 4233 0132 0123     		movs	r3, #1
 4234 0134 BB61     		str	r3, [r7, #24]
 551:src/modbus.c  **** 			goto again;
 4235              		.loc 1 551 0
 4236 0136 00BF     		nop
 4237              	.L162:
 4238              	.LBE13:
 487:src/modbus.c  **** 	again: while (tempTotalRequest > 0) {
 4239              		.loc 1 487 0
 4240 0138 05E0     		b	.L163
 4241              	.L171:
 4242              	.LBB14:
 552:src/modbus.c  **** 		}
 553:src/modbus.c  **** 
 554:src/modbus.c  **** 		//Increase fromBit and toBit to fetch next 8 bit.
 555:src/modbus.c  **** 		fromBit = fromBit + 8;
 4243              		.loc 1 555 0
 4244 013a 7B6A     		ldr	r3, [r7, #36]
 4245 013c 0833     		adds	r3, r3, #8
 4246 013e 7B62     		str	r3, [r7, #36]
 556:src/modbus.c  **** 		toBit = toBit + 8;
 4247              		.loc 1 556 0
 4248 0140 3B6A     		ldr	r3, [r7, #32]
 4249 0142 0833     		adds	r3, r3, #8
 4250 0144 3B62     		str	r3, [r7, #32]
 4251              	.L163:
 4252              	.LBE14:
 487:src/modbus.c  **** 	again: while (tempTotalRequest > 0) {
 4253              		.loc 1 487 0 discriminator 1
 4254 0146 FB6A     		ldr	r3, [r7, #44]
 4255 0148 002B     		cmp	r3, #0
 4256 014a 94DC     		bgt	.L172
 557:src/modbus.c  **** 	}
 558:src/modbus.c  **** /*
 559:src/modbus.c  **** 	for (d = 0; d < (byteStream + 3); d++) {
 560:src/modbus.c  **** 		printf("\n0x%x", arrayResponsePacket[d]);
 561:src/modbus.c  **** 	}
 562:src/modbus.c  **** 
 563:src/modbus.c  **** */
 564:src/modbus.c  **** 	return 0;
 4257              		.loc 1 564 0
 4258 014c 0023     		movs	r3, #0
 565:src/modbus.c  **** 
 566:src/modbus.c  **** }
 4259              		.loc 1 566 0
 4260 014e 1846     		mov	r0, r3
 4261 0150 3037     		adds	r7, r7, #48
 4262 0152 BD46     		mov	sp, r7
 4263              		@ sp needed
 4264 0154 80BD     		pop	{r7, pc}
 4265              	.L175:
 4266 0156 00BF     		.align	2
 4267              	.L174:
 4268 0158 00000000 		.word	firstRequest
 4269 015c 00000000 		.word	totalRequest
 4270 0160 00000000 		.word	rPacket
 4271 0164 00000000 		.word	s
 4272              		.cfi_endproc
 4273              	.LFE12:
 4275              		.section	.text.readHoldingRegisters,"ax",%progbits
 4276              		.align	2
 4277              		.global	readHoldingRegisters
 4278              		.thumb
 4279              		.thumb_func
 4281              	readHoldingRegisters:
 4282              	.LFB13:
 567:src/modbus.c  **** 
 568:src/modbus.c  **** uint32_t readHoldingRegisters(uint32_t *qPacket) {
 4283              		.loc 1 568 0
 4284              		.cfi_startproc
 4285              		@ args = 0, pretend = 0, frame = 48
 4286              		@ frame_needed = 1, uses_anonymous_args = 0
 4287 0000 80B5     		push	{r7, lr}
 4288              	.LCFI39:
 4289              		.cfi_def_cfa_offset 8
 4290              		.cfi_offset 7, -8
 4291              		.cfi_offset 14, -4
 4292 0002 8CB0     		sub	sp, sp, #48
 4293              	.LCFI40:
 4294              		.cfi_def_cfa_offset 56
 4295 0004 00AF     		add	r7, sp, #0
 4296              	.LCFI41:
 4297              		.cfi_def_cfa_register 7
 4298 0006 7860     		str	r0, [r7, #4]
 569:src/modbus.c  **** 
 570:src/modbus.c  **** 	//Point qPacket to first address from where data is to be fetched.
 571:src/modbus.c  **** 	qPacket++;
 4299              		.loc 1 571 0
 4300 0008 7B68     		ldr	r3, [r7, #4]
 4301 000a 0433     		adds	r3, r3, #4
 4302 000c 7B60     		str	r3, [r7, #4]
 572:src/modbus.c  **** 
 573:src/modbus.c  **** 	//Assign first address to firstRequest from qPacket and
 574:src/modbus.c  **** 	//qPacket's next value i.e total bit requested to totalRequest.
 575:src/modbus.c  **** 	firstRequest = 0x9C40 | *qPacket++;
 4303              		.loc 1 575 0
 4304 000e 7B68     		ldr	r3, [r7, #4]
 4305 0010 1A1D     		adds	r2, r3, #4
 4306 0012 7A60     		str	r2, [r7, #4]
 4307 0014 1B68     		ldr	r3, [r3]
 4308 0016 43F41C43 		orr	r3, r3, #39936
 4309 001a 43F04003 		orr	r3, r3, #64
 4310 001e 354A     		ldr	r2, .L184
 4311 0020 1360     		str	r3, [r2]
 576:src/modbus.c  **** 	totalRequest = *qPacket;
 4312              		.loc 1 576 0
 4313 0022 7B68     		ldr	r3, [r7, #4]
 4314 0024 1A68     		ldr	r2, [r3]
 4315 0026 344B     		ldr	r3, .L184+4
 4316 0028 1A60     		str	r2, [r3]
 577:src/modbus.c  **** 
 578:src/modbus.c  **** 	//Calculate no. of byte and assign it to rPacket
 579:src/modbus.c  **** 	unsigned int byteStream = totalRequest * 2;
 4317              		.loc 1 579 0
 4318 002a 334B     		ldr	r3, .L184+4
 4319 002c 1B68     		ldr	r3, [r3]
 4320 002e 5B00     		lsls	r3, r3, #1
 4321 0030 BB61     		str	r3, [r7, #24]
 580:src/modbus.c  **** 
 581:src/modbus.c  **** 	//Copy no. of byte stream to be sent back to response packet
 582:src/modbus.c  **** 	*rPacket = (unsigned int) byteStream;
 4322              		.loc 1 582 0
 4323 0032 324B     		ldr	r3, .L184+8
 4324 0034 1B68     		ldr	r3, [r3]
 4325 0036 BA69     		ldr	r2, [r7, #24]
 4326 0038 1A60     		str	r2, [r3]
 583:src/modbus.c  **** 	//printf("%d\n",*rPacket);
 584:src/modbus.c  **** 	rPacket++;
 4327              		.loc 1 584 0
 4328 003a 304B     		ldr	r3, .L184+8
 4329 003c 1B68     		ldr	r3, [r3]
 4330 003e 1A1D     		adds	r2, r3, #4
 4331 0040 2E4B     		ldr	r3, .L184+8
 4332 0042 1A60     		str	r2, [r3]
 585:src/modbus.c  **** 
 586:src/modbus.c  **** 	//Fetch first address data.
 587:src/modbus.c  **** 	s = getData(firstRequest++);
 4333              		.loc 1 587 0
 4334 0044 2B4B     		ldr	r3, .L184
 4335 0046 1B68     		ldr	r3, [r3]
 4336 0048 591C     		adds	r1, r3, #1
 4337 004a 2A4A     		ldr	r2, .L184
 4338 004c 1160     		str	r1, [r2]
 4339 004e 1846     		mov	r0, r3
 4340 0050 FFF7FEFF 		bl	getData
 4341 0054 0246     		mov	r2, r0
 4342 0056 2A4B     		ldr	r3, .L184+12
 4343 0058 1A60     		str	r2, [r3]
 588:src/modbus.c  **** 
 589:src/modbus.c  **** 	int tempTotalRequest = (int) totalRequest;
 4344              		.loc 1 589 0
 4345 005a 274B     		ldr	r3, .L184+4
 4346 005c 1B68     		ldr	r3, [r3]
 4347 005e FB62     		str	r3, [r7, #44]
 590:src/modbus.c  **** 	int fromBit = 0;
 4348              		.loc 1 590 0
 4349 0060 0023     		movs	r3, #0
 4350 0062 7B61     		str	r3, [r7, #20]
 591:src/modbus.c  **** 	int toBit = 15;
 4351              		.loc 1 591 0
 4352 0064 0F23     		movs	r3, #15
 4353 0066 3B61     		str	r3, [r7, #16]
 592:src/modbus.c  **** 	int shiftRight;
 593:src/modbus.c  **** 	//int d;
 594:src/modbus.c  **** 
 595:src/modbus.c  **** 	while (tempTotalRequest > 0) {
 4354              		.loc 1 595 0
 4355 0068 3CE0     		b	.L177
 4356              	.L182:
 4357              	.LBB15:
 596:src/modbus.c  **** 
 597:src/modbus.c  **** 		int fromBit = 0;
 4358              		.loc 1 597 0
 4359 006a 0023     		movs	r3, #0
 4360 006c 7B62     		str	r3, [r7, #36]
 598:src/modbus.c  **** 		int toBit = 7;
 4361              		.loc 1 598 0
 4362 006e 0723     		movs	r3, #7
 4363 0070 3B62     		str	r3, [r7, #32]
 599:src/modbus.c  **** 
 600:src/modbus.c  **** 		while(fromBit <= 8){
 4364              		.loc 1 600 0
 4365 0072 26E0     		b	.L178
 4366              	.L181:
 4367              	.LBB16:
 601:src/modbus.c  **** 				//Call masking function and store value in r.
 602:src/modbus.c  **** 				unsigned int r = getMask(fromBit, toBit);
 4368              		.loc 1 602 0
 4369 0074 786A     		ldr	r0, [r7, #36]
 4370 0076 396A     		ldr	r1, [r7, #32]
 4371 0078 FFF7FEFF 		bl	getMask
 4372 007c F860     		str	r0, [r7, #12]
 603:src/modbus.c  **** 
 604:src/modbus.c  **** 				//Get masking done on data from hash and store in result.
 605:src/modbus.c  **** 				unsigned int result = r & s->value;
 4373              		.loc 1 605 0
 4374 007e 204B     		ldr	r3, .L184+12
 4375 0080 1B68     		ldr	r3, [r3]
 4376 0082 5B68     		ldr	r3, [r3, #4]
 4377 0084 1A46     		mov	r2, r3
 4378 0086 FB68     		ldr	r3, [r7, #12]
 4379 0088 1340     		ands	r3, r3, r2
 4380 008a FB61     		str	r3, [r7, #28]
 606:src/modbus.c  **** 
 607:src/modbus.c  **** 				for (shiftRight = fromBit; shiftRight > 0; shiftRight--) {
 4381              		.loc 1 607 0
 4382 008c 7B6A     		ldr	r3, [r7, #36]
 4383 008e BB62     		str	r3, [r7, #40]
 4384 0090 05E0     		b	.L179
 4385              	.L180:
 608:src/modbus.c  **** 					result = result >> 1;
 4386              		.loc 1 608 0 discriminator 2
 4387 0092 FB69     		ldr	r3, [r7, #28]
 4388 0094 5B08     		lsrs	r3, r3, #1
 4389 0096 FB61     		str	r3, [r7, #28]
 607:src/modbus.c  **** 				for (shiftRight = fromBit; shiftRight > 0; shiftRight--) {
 4390              		.loc 1 607 0 discriminator 2
 4391 0098 BB6A     		ldr	r3, [r7, #40]
 4392 009a 013B     		subs	r3, r3, #1
 4393 009c BB62     		str	r3, [r7, #40]
 4394              	.L179:
 607:src/modbus.c  **** 				for (shiftRight = fromBit; shiftRight > 0; shiftRight--) {
 4395              		.loc 1 607 0 is_stmt 0 discriminator 1
 4396 009e BB6A     		ldr	r3, [r7, #40]
 4397 00a0 002B     		cmp	r3, #0
 4398 00a2 F6DC     		bgt	.L180
 609:src/modbus.c  **** 				}
 610:src/modbus.c  **** 
 611:src/modbus.c  **** 				//Store the data to be sent in response packet one by one till requested bits reached.
 612:src/modbus.c  **** 				*rPacket = result;
 4399              		.loc 1 612 0 is_stmt 1
 4400 00a4 154B     		ldr	r3, .L184+8
 4401 00a6 1B68     		ldr	r3, [r3]
 4402 00a8 FA69     		ldr	r2, [r7, #28]
 4403 00aa 1A60     		str	r2, [r3]
 613:src/modbus.c  **** 				rPacket++;
 4404              		.loc 1 613 0
 4405 00ac 134B     		ldr	r3, .L184+8
 4406 00ae 1B68     		ldr	r3, [r3]
 4407 00b0 1A1D     		adds	r2, r3, #4
 4408 00b2 124B     		ldr	r3, .L184+8
 4409 00b4 1A60     		str	r2, [r3]
 614:src/modbus.c  **** 				//printf("Data: 0x%x\n", result);
 615:src/modbus.c  **** 
 616:src/modbus.c  **** 
 617:src/modbus.c  **** 				//Increase from and to bit
 618:src/modbus.c  **** 				fromBit = fromBit + 8;
 4410              		.loc 1 618 0
 4411 00b6 7B6A     		ldr	r3, [r7, #36]
 4412 00b8 0833     		adds	r3, r3, #8
 4413 00ba 7B62     		str	r3, [r7, #36]
 619:src/modbus.c  **** 				toBit = toBit + 8;
 4414              		.loc 1 619 0
 4415 00bc 3B6A     		ldr	r3, [r7, #32]
 4416 00be 0833     		adds	r3, r3, #8
 4417 00c0 3B62     		str	r3, [r7, #32]
 4418              	.L178:
 4419              	.LBE16:
 600:src/modbus.c  **** 		while(fromBit <= 8){
 4420              		.loc 1 600 0 discriminator 1
 4421 00c2 7B6A     		ldr	r3, [r7, #36]
 4422 00c4 082B     		cmp	r3, #8
 4423 00c6 D5DD     		ble	.L181
 620:src/modbus.c  **** 		}
 621:src/modbus.c  **** 
 622:src/modbus.c  **** 		//Decrement request count
 623:src/modbus.c  **** 		tempTotalRequest = tempTotalRequest - 1;
 4424              		.loc 1 623 0
 4425 00c8 FB6A     		ldr	r3, [r7, #44]
 4426 00ca 013B     		subs	r3, r3, #1
 4427 00cc FB62     		str	r3, [r7, #44]
 624:src/modbus.c  **** 
 625:src/modbus.c  **** 		//Fetch next data .
 626:src/modbus.c  **** 		s = getData(firstRequest++);
 4428              		.loc 1 626 0
 4429 00ce 094B     		ldr	r3, .L184
 4430 00d0 1B68     		ldr	r3, [r3]
 4431 00d2 591C     		adds	r1, r3, #1
 4432 00d4 074A     		ldr	r2, .L184
 4433 00d6 1160     		str	r1, [r2]
 4434 00d8 1846     		mov	r0, r3
 4435 00da FFF7FEFF 		bl	getData
 4436 00de 0246     		mov	r2, r0
 4437 00e0 074B     		ldr	r3, .L184+12
 4438 00e2 1A60     		str	r2, [r3]
 4439              	.L177:
 4440              	.LBE15:
 595:src/modbus.c  **** 	while (tempTotalRequest > 0) {
 4441              		.loc 1 595 0 discriminator 1
 4442 00e4 FB6A     		ldr	r3, [r7, #44]
 4443 00e6 002B     		cmp	r3, #0
 4444 00e8 BFDC     		bgt	.L182
 627:src/modbus.c  **** 	}
 628:src/modbus.c  **** 
 629:src/modbus.c  **** /*	for (d = 0; d < ((byteStream / 2) + 3); d++) {
 630:src/modbus.c  **** 		printf("\n0x%x", arrayResponsePacket[d]);
 631:src/modbus.c  **** 	}
 632:src/modbus.c  **** */
 633:src/modbus.c  **** 	return 0;
 4445              		.loc 1 633 0
 4446 00ea 0023     		movs	r3, #0
 634:src/modbus.c  **** }
 4447              		.loc 1 634 0
 4448 00ec 1846     		mov	r0, r3
 4449 00ee 3037     		adds	r7, r7, #48
 4450 00f0 BD46     		mov	sp, r7
 4451              		@ sp needed
 4452 00f2 80BD     		pop	{r7, pc}
 4453              	.L185:
 4454              		.align	2
 4455              	.L184:
 4456 00f4 00000000 		.word	firstRequest
 4457 00f8 00000000 		.word	totalRequest
 4458 00fc 00000000 		.word	rPacket
 4459 0100 00000000 		.word	s
 4460              		.cfi_endproc
 4461              	.LFE13:
 4463              		.section	.text.readDiscreteInputs,"ax",%progbits
 4464              		.align	2
 4465              		.global	readDiscreteInputs
 4466              		.thumb
 4467              		.thumb_func
 4469              	readDiscreteInputs:
 4470              	.LFB14:
 635:src/modbus.c  **** 
 636:src/modbus.c  **** uint32_t readDiscreteInputs(uint32_t *qPacket) {
 4471              		.loc 1 636 0
 4472              		.cfi_startproc
 4473              		@ args = 0, pretend = 0, frame = 48
 4474              		@ frame_needed = 1, uses_anonymous_args = 0
 4475 0000 80B5     		push	{r7, lr}
 4476              	.LCFI42:
 4477              		.cfi_def_cfa_offset 8
 4478              		.cfi_offset 7, -8
 4479              		.cfi_offset 14, -4
 4480 0002 8CB0     		sub	sp, sp, #48
 4481              	.LCFI43:
 4482              		.cfi_def_cfa_offset 56
 4483 0004 00AF     		add	r7, sp, #0
 4484              	.LCFI44:
 4485              		.cfi_def_cfa_register 7
 4486 0006 7860     		str	r0, [r7, #4]
 637:src/modbus.c  **** 
 638:src/modbus.c  **** 	//Point qPacket to first address from where data is to be fetched.
 639:src/modbus.c  **** 	qPacket++;
 4487              		.loc 1 639 0
 4488 0008 7B68     		ldr	r3, [r7, #4]
 4489 000a 0433     		adds	r3, r3, #4
 4490 000c 7B60     		str	r3, [r7, #4]
 640:src/modbus.c  **** 
 641:src/modbus.c  **** 	//Assign first address to firstRequest from qPacket and
 642:src/modbus.c  **** 	//qPacket's next value i.e total bit requested to totalRequest.
 643:src/modbus.c  **** 	firstRequest = 0x2710 | *qPacket++;
 4491              		.loc 1 643 0
 4492 000e 7B68     		ldr	r3, [r7, #4]
 4493 0010 1A1D     		adds	r2, r3, #4
 4494 0012 7A60     		str	r2, [r7, #4]
 4495 0014 1B68     		ldr	r3, [r3]
 4496 0016 43F41C53 		orr	r3, r3, #9984
 4497 001a 43F01003 		orr	r3, r3, #16
 4498 001e 4E4A     		ldr	r2, .L199
 4499 0020 1360     		str	r3, [r2]
 644:src/modbus.c  **** 	totalRequest = *qPacket;
 4500              		.loc 1 644 0
 4501 0022 7B68     		ldr	r3, [r7, #4]
 4502 0024 1A68     		ldr	r2, [r3]
 4503 0026 4D4B     		ldr	r3, .L199+4
 4504 0028 1A60     		str	r2, [r3]
 645:src/modbus.c  **** 
 646:src/modbus.c  **** 	//Calculate no. of byte and assign it to rPacket
 647:src/modbus.c  **** 	unsigned int byteStream = ((totalRequest / 8) + 1);
 4505              		.loc 1 647 0
 4506 002a 4C4B     		ldr	r3, .L199+4
 4507 002c 1B68     		ldr	r3, [r3]
 4508 002e DB08     		lsrs	r3, r3, #3
 4509 0030 0133     		adds	r3, r3, #1
 4510 0032 FB60     		str	r3, [r7, #12]
 648:src/modbus.c  **** 
 649:src/modbus.c  **** 	//Copy no. of byte stream to be sent back to reponse packet
 650:src/modbus.c  **** 	*rPacket = (unsigned int) byteStream;
 4511              		.loc 1 650 0
 4512 0034 4A4B     		ldr	r3, .L199+8
 4513 0036 1B68     		ldr	r3, [r3]
 4514 0038 FA68     		ldr	r2, [r7, #12]
 4515 003a 1A60     		str	r2, [r3]
 651:src/modbus.c  **** 	//printf("%d\n",*rPacket);
 652:src/modbus.c  **** 	rPacket++;
 4516              		.loc 1 652 0
 4517 003c 484B     		ldr	r3, .L199+8
 4518 003e 1B68     		ldr	r3, [r3]
 4519 0040 1A1D     		adds	r2, r3, #4
 4520 0042 474B     		ldr	r3, .L199+8
 4521 0044 1A60     		str	r2, [r3]
 653:src/modbus.c  **** 
 654:src/modbus.c  **** 	//Fetch first address data.
 655:src/modbus.c  **** 	s = getData(firstRequest++);
 4522              		.loc 1 655 0
 4523 0046 444B     		ldr	r3, .L199
 4524 0048 1B68     		ldr	r3, [r3]
 4525 004a 591C     		adds	r1, r3, #1
 4526 004c 424A     		ldr	r2, .L199
 4527 004e 1160     		str	r1, [r2]
 4528 0050 1846     		mov	r0, r3
 4529 0052 FFF7FEFF 		bl	getData
 4530 0056 0246     		mov	r2, r0
 4531 0058 424B     		ldr	r3, .L199+12
 4532 005a 1A60     		str	r2, [r3]
 656:src/modbus.c  **** 
 657:src/modbus.c  **** 	int tempTotalRequest = (int) totalRequest;
 4533              		.loc 1 657 0
 4534 005c 3F4B     		ldr	r3, .L199+4
 4535 005e 1B68     		ldr	r3, [r3]
 4536 0060 FB62     		str	r3, [r7, #44]
 658:src/modbus.c  **** 	int count = 0;
 4537              		.loc 1 658 0
 4538 0062 0023     		movs	r3, #0
 4539 0064 BB62     		str	r3, [r7, #40]
 659:src/modbus.c  **** 	int fromBit = 0;
 4540              		.loc 1 659 0
 4541 0066 0023     		movs	r3, #0
 4542 0068 7B62     		str	r3, [r7, #36]
 660:src/modbus.c  **** 	int toBit = 7;
 4543              		.loc 1 660 0
 4544 006a 0723     		movs	r3, #7
 4545 006c 3B62     		str	r3, [r7, #32]
 661:src/modbus.c  **** 	int shiftRight;
 662:src/modbus.c  **** 	int flag = 0;
 4546              		.loc 1 662 0
 4547 006e 0023     		movs	r3, #0
 4548 0070 BB61     		str	r3, [r7, #24]
 663:src/modbus.c  **** 	int maxCount = 0;
 4549              		.loc 1 663 0
 4550 0072 0023     		movs	r3, #0
 4551 0074 7B61     		str	r3, [r7, #20]
 664:src/modbus.c  **** 	//int d;
 665:src/modbus.c  **** 
 666:src/modbus.c  **** 	again: while (tempTotalRequest > 0) {
 4552              		.loc 1 666 0
 4553 0076 67E0     		b	.L188
 4554              	.L197:
 4555              	.LBB17:
 667:src/modbus.c  **** 
 668:src/modbus.c  **** 		if (totalRequest < 8) {
 4556              		.loc 1 668 0
 4557 0078 384B     		ldr	r3, .L199+4
 4558 007a 1B68     		ldr	r3, [r3]
 4559 007c 072B     		cmp	r3, #7
 4560 007e 03D8     		bhi	.L189
 669:src/modbus.c  **** 			toBit = totalRequest - 1;
 4561              		.loc 1 669 0
 4562 0080 364B     		ldr	r3, .L199+4
 4563 0082 1B68     		ldr	r3, [r3]
 4564 0084 013B     		subs	r3, r3, #1
 4565 0086 3B62     		str	r3, [r7, #32]
 4566              	.L189:
 670:src/modbus.c  **** 		}
 671:src/modbus.c  **** 
 672:src/modbus.c  **** 		//Check if temp (having totalRequest) has modulus value of totalRequest.
 673:src/modbus.c  **** 		if (tempTotalRequest == (totalRequest % 8) && flag == 1) {
 4567              		.loc 1 673 0
 4568 0088 FA6A     		ldr	r2, [r7, #44]
 4569 008a 344B     		ldr	r3, .L199+4
 4570 008c 1B68     		ldr	r3, [r3]
 4571 008e 03F00703 		and	r3, r3, #7
 4572 0092 9A42     		cmp	r2, r3
 4573 0094 08D1     		bne	.L190
 4574              		.loc 1 673 0 is_stmt 0 discriminator 1
 4575 0096 BB69     		ldr	r3, [r7, #24]
 4576 0098 012B     		cmp	r3, #1
 4577 009a 05D1     		bne	.L190
 674:src/modbus.c  **** 			toBit = (totalRequest % 8) - 1; //if true the set toBit to modules minus-1.
 4578              		.loc 1 674 0 is_stmt 1
 4579 009c 2F4B     		ldr	r3, .L199+4
 4580 009e 1B68     		ldr	r3, [r3]
 4581 00a0 03F00703 		and	r3, r3, #7
 4582 00a4 013B     		subs	r3, r3, #1
 4583 00a6 3B62     		str	r3, [r7, #32]
 4584              	.L190:
 675:src/modbus.c  **** 		}
 676:src/modbus.c  **** 
 677:src/modbus.c  **** 		//Call masking function and store value in r.
 678:src/modbus.c  **** 		unsigned int r = getMask(fromBit, toBit);
 4585              		.loc 1 678 0
 4586 00a8 786A     		ldr	r0, [r7, #36]
 4587 00aa 396A     		ldr	r1, [r7, #32]
 4588 00ac FFF7FEFF 		bl	getMask
 4589 00b0 B860     		str	r0, [r7, #8]
 679:src/modbus.c  **** 
 680:src/modbus.c  **** 		//Get masking done on data from hash and store in result.
 681:src/modbus.c  **** 		unsigned int result = r & s->value;
 4590              		.loc 1 681 0
 4591 00b2 2C4B     		ldr	r3, .L199+12
 4592 00b4 1B68     		ldr	r3, [r3]
 4593 00b6 5B68     		ldr	r3, [r3, #4]
 4594 00b8 1A46     		mov	r2, r3
 4595 00ba BB68     		ldr	r3, [r7, #8]
 4596 00bc 1340     		ands	r3, r3, r2
 4597 00be 3B61     		str	r3, [r7, #16]
 682:src/modbus.c  **** 
 683:src/modbus.c  **** 		//Check if first 8 Bit then go to "next" label.
 684:src/modbus.c  **** 		if (toBit == 7) {
 4598              		.loc 1 684 0
 4599 00c0 3B6A     		ldr	r3, [r7, #32]
 4600 00c2 072B     		cmp	r3, #7
 4601 00c4 00D1     		bne	.L191
 685:src/modbus.c  **** 			goto next;
 4602              		.loc 1 685 0
 4603 00c6 0BE0     		b	.L192
 4604              	.L191:
 686:src/modbus.c  **** 		}
 687:src/modbus.c  **** 
 688:src/modbus.c  **** 		//Else shift right.
 689:src/modbus.c  **** 		else {
 690:src/modbus.c  **** 			for (shiftRight = fromBit; shiftRight > 0; shiftRight--) {
 4605              		.loc 1 690 0
 4606 00c8 7B6A     		ldr	r3, [r7, #36]
 4607 00ca FB61     		str	r3, [r7, #28]
 4608 00cc 05E0     		b	.L193
 4609              	.L194:
 691:src/modbus.c  **** 				result = result >> 1;
 4610              		.loc 1 691 0 discriminator 2
 4611 00ce 3B69     		ldr	r3, [r7, #16]
 4612 00d0 5B08     		lsrs	r3, r3, #1
 4613 00d2 3B61     		str	r3, [r7, #16]
 690:src/modbus.c  **** 			for (shiftRight = fromBit; shiftRight > 0; shiftRight--) {
 4614              		.loc 1 690 0 discriminator 2
 4615 00d4 FB69     		ldr	r3, [r7, #28]
 4616 00d6 013B     		subs	r3, r3, #1
 4617 00d8 FB61     		str	r3, [r7, #28]
 4618              	.L193:
 690:src/modbus.c  **** 			for (shiftRight = fromBit; shiftRight > 0; shiftRight--) {
 4619              		.loc 1 690 0 is_stmt 0 discriminator 1
 4620 00da FB69     		ldr	r3, [r7, #28]
 4621 00dc 002B     		cmp	r3, #0
 4622 00de F6DC     		bgt	.L194
 4623              	.L192:
 692:src/modbus.c  **** 			}
 693:src/modbus.c  **** 		}
 694:src/modbus.c  **** 
 695:src/modbus.c  **** 		//Label
 696:src/modbus.c  **** 		next:
 697:src/modbus.c  **** 
 698:src/modbus.c  **** 		//Store the data to be sent in response packet one by one till requested bits reached.
 699:src/modbus.c  **** 		*rPacket = result;
 4624              		.loc 1 699 0 is_stmt 1
 4625 00e0 1F4B     		ldr	r3, .L199+8
 4626 00e2 1B68     		ldr	r3, [r3]
 4627 00e4 3A69     		ldr	r2, [r7, #16]
 4628 00e6 1A60     		str	r2, [r3]
 700:src/modbus.c  **** 		rPacket++;
 4629              		.loc 1 700 0
 4630 00e8 1D4B     		ldr	r3, .L199+8
 4631 00ea 1B68     		ldr	r3, [r3]
 4632 00ec 1A1D     		adds	r2, r3, #4
 4633 00ee 1C4B     		ldr	r3, .L199+8
 4634 00f0 1A60     		str	r2, [r3]
 701:src/modbus.c  **** //		printf("Data: 0x%x\n", result);
 702:src/modbus.c  **** 
 703:src/modbus.c  **** 		//Increase the countbuffer to check if 32 bit data sent or not
 704:src/modbus.c  **** 		count++;
 4635              		.loc 1 704 0
 4636 00f2 BB6A     		ldr	r3, [r7, #40]
 4637 00f4 0133     		adds	r3, r3, #1
 4638 00f6 BB62     		str	r3, [r7, #40]
 705:src/modbus.c  **** 
 706:src/modbus.c  **** 		//Decrement the totalReqeust (assigned to temp) by 8 after sending 8 bit.
 707:src/modbus.c  **** 		tempTotalRequest = tempTotalRequest - 8;
 4639              		.loc 1 707 0
 4640 00f8 FB6A     		ldr	r3, [r7, #44]
 4641 00fa 083B     		subs	r3, r3, #8
 4642 00fc FB62     		str	r3, [r7, #44]
 708:src/modbus.c  **** 
 709:src/modbus.c  **** 		//Check if totalRequest is more than 32 bit or not.
 710:src/modbus.c  **** 		if (totalRequest >= 32) {
 4643              		.loc 1 710 0
 4644 00fe 174B     		ldr	r3, .L199+4
 4645 0100 1B68     		ldr	r3, [r3]
 4646 0102 1F2B     		cmp	r3, #31
 4647 0104 01D9     		bls	.L195
 711:src/modbus.c  **** 			maxCount = 4;
 4648              		.loc 1 711 0
 4649 0106 0423     		movs	r3, #4
 4650 0108 7B61     		str	r3, [r7, #20]
 4651              	.L195:
 712:src/modbus.c  **** 		}
 713:src/modbus.c  **** 
 714:src/modbus.c  **** 		//If not then set
 715:src/modbus.c  **** 		/*else{
 716:src/modbus.c  **** 		 count = 0;
 717:src/modbus.c  **** 		 fromBit = 0;
 718:src/modbus.c  **** 		 toBit = 7;
 719:src/modbus.c  **** 		 flag = 1;
 720:src/modbus.c  **** 		 goto again;
 721:src/modbus.c  **** 		 }*/
 722:src/modbus.c  **** 
 723:src/modbus.c  **** 		//If count reached b i.e. total 4*8 Bit sent (32 bit) then get next value from hash.
 724:src/modbus.c  **** 		if (count == maxCount) {
 4652              		.loc 1 724 0
 4653 010a BA6A     		ldr	r2, [r7, #40]
 4654 010c 7B69     		ldr	r3, [r7, #20]
 4655 010e 9A42     		cmp	r2, r3
 4656 0110 14D1     		bne	.L196
 725:src/modbus.c  **** 			s = getData(firstRequest++);
 4657              		.loc 1 725 0
 4658 0112 114B     		ldr	r3, .L199
 4659 0114 1B68     		ldr	r3, [r3]
 4660 0116 591C     		adds	r1, r3, #1
 4661 0118 0F4A     		ldr	r2, .L199
 4662 011a 1160     		str	r1, [r2]
 4663 011c 1846     		mov	r0, r3
 4664 011e FFF7FEFF 		bl	getData
 4665 0122 0246     		mov	r2, r0
 4666 0124 0F4B     		ldr	r3, .L199+12
 4667 0126 1A60     		str	r2, [r3]
 726:src/modbus.c  **** 			count = 0;
 4668              		.loc 1 726 0
 4669 0128 0023     		movs	r3, #0
 4670 012a BB62     		str	r3, [r7, #40]
 727:src/modbus.c  **** 			fromBit = 0;
 4671              		.loc 1 727 0
 4672 012c 0023     		movs	r3, #0
 4673 012e 7B62     		str	r3, [r7, #36]
 728:src/modbus.c  **** 			toBit = 7;
 4674              		.loc 1 728 0
 4675 0130 0723     		movs	r3, #7
 4676 0132 3B62     		str	r3, [r7, #32]
 729:src/modbus.c  **** 			flag = 1;
 4677              		.loc 1 729 0
 4678 0134 0123     		movs	r3, #1
 4679 0136 BB61     		str	r3, [r7, #24]
 730:src/modbus.c  **** 			goto again;
 4680              		.loc 1 730 0
 4681 0138 00BF     		nop
 4682              	.L187:
 4683              	.LBE17:
 666:src/modbus.c  **** 	again: while (tempTotalRequest > 0) {
 4684              		.loc 1 666 0
 4685 013a 05E0     		b	.L188
 4686              	.L196:
 4687              	.LBB18:
 731:src/modbus.c  **** 		}
 732:src/modbus.c  **** 
 733:src/modbus.c  **** 		//Increase fromBit and toBit to fetch next 8 bit.
 734:src/modbus.c  **** 		fromBit = fromBit + 8;
 4688              		.loc 1 734 0
 4689 013c 7B6A     		ldr	r3, [r7, #36]
 4690 013e 0833     		adds	r3, r3, #8
 4691 0140 7B62     		str	r3, [r7, #36]
 735:src/modbus.c  **** 		toBit = toBit + 8;
 4692              		.loc 1 735 0
 4693 0142 3B6A     		ldr	r3, [r7, #32]
 4694 0144 0833     		adds	r3, r3, #8
 4695 0146 3B62     		str	r3, [r7, #32]
 4696              	.L188:
 4697              	.LBE18:
 666:src/modbus.c  **** 	again: while (tempTotalRequest > 0) {
 4698              		.loc 1 666 0 discriminator 1
 4699 0148 FB6A     		ldr	r3, [r7, #44]
 4700 014a 002B     		cmp	r3, #0
 4701 014c 94DC     		bgt	.L197
 736:src/modbus.c  **** 	}
 737:src/modbus.c  **** /*
 738:src/modbus.c  **** 	for (d = 0; d < (byteStream + 3); d++) {
 739:src/modbus.c  **** 		printf("\n0x%x", arrayResponsePacket[d]);
 740:src/modbus.c  **** 	}
 741:src/modbus.c  **** */
 742:src/modbus.c  **** 	return 0;
 4702              		.loc 1 742 0
 4703 014e 0023     		movs	r3, #0
 743:src/modbus.c  **** 
 744:src/modbus.c  **** }
 4704              		.loc 1 744 0
 4705 0150 1846     		mov	r0, r3
 4706 0152 3037     		adds	r7, r7, #48
 4707 0154 BD46     		mov	sp, r7
 4708              		@ sp needed
 4709 0156 80BD     		pop	{r7, pc}
 4710              	.L200:
 4711              		.align	2
 4712              	.L199:
 4713 0158 00000000 		.word	firstRequest
 4714 015c 00000000 		.word	totalRequest
 4715 0160 00000000 		.word	rPacket
 4716 0164 00000000 		.word	s
 4717              		.cfi_endproc
 4718              	.LFE14:
 4720              		.section	.text.readCoil,"ax",%progbits
 4721              		.align	2
 4722              		.global	readCoil
 4723              		.thumb
 4724              		.thumb_func
 4726              	readCoil:
 4727              	.LFB15:
 745:src/modbus.c  **** 
 746:src/modbus.c  **** uint32_t readCoil(uint32_t *qPacket) {
 4728              		.loc 1 746 0
 4729              		.cfi_startproc
 4730              		@ args = 0, pretend = 0, frame = 48
 4731              		@ frame_needed = 1, uses_anonymous_args = 0
 4732 0000 80B5     		push	{r7, lr}
 4733              	.LCFI45:
 4734              		.cfi_def_cfa_offset 8
 4735              		.cfi_offset 7, -8
 4736              		.cfi_offset 14, -4
 4737 0002 8CB0     		sub	sp, sp, #48
 4738              	.LCFI46:
 4739              		.cfi_def_cfa_offset 56
 4740 0004 00AF     		add	r7, sp, #0
 4741              	.LCFI47:
 4742              		.cfi_def_cfa_register 7
 4743 0006 7860     		str	r0, [r7, #4]
 747:src/modbus.c  **** 
 748:src/modbus.c  **** 	//Point qPacket to first address from where data is to be fetched.
 749:src/modbus.c  **** 	qPacket++;
 4744              		.loc 1 749 0
 4745 0008 7B68     		ldr	r3, [r7, #4]
 4746 000a 0433     		adds	r3, r3, #4
 4747 000c 7B60     		str	r3, [r7, #4]
 750:src/modbus.c  **** 
 751:src/modbus.c  **** 	//Assign first address to firstRequest from qPacket and
 752:src/modbus.c  **** 	//qPacket's next value i.e total bit requested to totalRequest.
 753:src/modbus.c  **** 	firstRequest = 0x0000 + *qPacket++;
 4748              		.loc 1 753 0
 4749 000e 7B68     		ldr	r3, [r7, #4]
 4750 0010 1A1D     		adds	r2, r3, #4
 4751 0012 7A60     		str	r2, [r7, #4]
 4752 0014 1A68     		ldr	r2, [r3]
 4753 0016 4E4B     		ldr	r3, .L214
 4754 0018 1A60     		str	r2, [r3]
 754:src/modbus.c  **** 	totalRequest = *qPacket;
 4755              		.loc 1 754 0
 4756 001a 7B68     		ldr	r3, [r7, #4]
 4757 001c 1A68     		ldr	r2, [r3]
 4758 001e 4D4B     		ldr	r3, .L214+4
 4759 0020 1A60     		str	r2, [r3]
 755:src/modbus.c  **** 
 756:src/modbus.c  **** 	//Calculate no. of byte and assign it to rPacket
 757:src/modbus.c  **** 	unsigned int byteStream = ((totalRequest / 8) + 1);
 4760              		.loc 1 757 0
 4761 0022 4C4B     		ldr	r3, .L214+4
 4762 0024 1B68     		ldr	r3, [r3]
 4763 0026 DB08     		lsrs	r3, r3, #3
 4764 0028 0133     		adds	r3, r3, #1
 4765 002a FB60     		str	r3, [r7, #12]
 758:src/modbus.c  **** 
 759:src/modbus.c  **** 	//Copy no. of byte stream to be sent back to reponse packet
 760:src/modbus.c  **** 	*rPacket = (unsigned int) byteStream;
 4766              		.loc 1 760 0
 4767 002c 4A4B     		ldr	r3, .L214+8
 4768 002e 1B68     		ldr	r3, [r3]
 4769 0030 FA68     		ldr	r2, [r7, #12]
 4770 0032 1A60     		str	r2, [r3]
 761:src/modbus.c  **** 	//printf("%d\n",*rPacket);
 762:src/modbus.c  **** 	rPacket++;
 4771              		.loc 1 762 0
 4772 0034 484B     		ldr	r3, .L214+8
 4773 0036 1B68     		ldr	r3, [r3]
 4774 0038 1A1D     		adds	r2, r3, #4
 4775 003a 474B     		ldr	r3, .L214+8
 4776 003c 1A60     		str	r2, [r3]
 763:src/modbus.c  **** 
 764:src/modbus.c  **** 	//Fetch first address data.
 765:src/modbus.c  **** 	s = getData(firstRequest++);
 4777              		.loc 1 765 0
 4778 003e 444B     		ldr	r3, .L214
 4779 0040 1B68     		ldr	r3, [r3]
 4780 0042 591C     		adds	r1, r3, #1
 4781 0044 424A     		ldr	r2, .L214
 4782 0046 1160     		str	r1, [r2]
 4783 0048 1846     		mov	r0, r3
 4784 004a FFF7FEFF 		bl	getData
 4785 004e 0246     		mov	r2, r0
 4786 0050 424B     		ldr	r3, .L214+12
 4787 0052 1A60     		str	r2, [r3]
 766:src/modbus.c  **** 
 767:src/modbus.c  **** 	int tempTotalRequest = (int) totalRequest;
 4788              		.loc 1 767 0
 4789 0054 3F4B     		ldr	r3, .L214+4
 4790 0056 1B68     		ldr	r3, [r3]
 4791 0058 FB62     		str	r3, [r7, #44]
 768:src/modbus.c  **** 	int count = 0;
 4792              		.loc 1 768 0
 4793 005a 0023     		movs	r3, #0
 4794 005c BB62     		str	r3, [r7, #40]
 769:src/modbus.c  **** 	int fromBit = 0;
 4795              		.loc 1 769 0
 4796 005e 0023     		movs	r3, #0
 4797 0060 7B62     		str	r3, [r7, #36]
 770:src/modbus.c  **** 	int toBit = 7;
 4798              		.loc 1 770 0
 4799 0062 0723     		movs	r3, #7
 4800 0064 3B62     		str	r3, [r7, #32]
 771:src/modbus.c  **** 	int shiftRight;
 772:src/modbus.c  **** 	int flag = 0;
 4801              		.loc 1 772 0
 4802 0066 0023     		movs	r3, #0
 4803 0068 BB61     		str	r3, [r7, #24]
 773:src/modbus.c  **** 	int maxCount = 0;
 4804              		.loc 1 773 0
 4805 006a 0023     		movs	r3, #0
 4806 006c 7B61     		str	r3, [r7, #20]
 774:src/modbus.c  **** 	//int d;
 775:src/modbus.c  **** 
 776:src/modbus.c  **** 	again: while (tempTotalRequest > 0) {
 4807              		.loc 1 776 0
 4808 006e 67E0     		b	.L203
 4809              	.L212:
 4810              	.LBB19:
 777:src/modbus.c  **** 
 778:src/modbus.c  **** 		if (totalRequest < 8) {
 4811              		.loc 1 778 0
 4812 0070 384B     		ldr	r3, .L214+4
 4813 0072 1B68     		ldr	r3, [r3]
 4814 0074 072B     		cmp	r3, #7
 4815 0076 03D8     		bhi	.L204
 779:src/modbus.c  **** 			toBit = totalRequest - 1;
 4816              		.loc 1 779 0
 4817 0078 364B     		ldr	r3, .L214+4
 4818 007a 1B68     		ldr	r3, [r3]
 4819 007c 013B     		subs	r3, r3, #1
 4820 007e 3B62     		str	r3, [r7, #32]
 4821              	.L204:
 780:src/modbus.c  **** 		}
 781:src/modbus.c  **** 
 782:src/modbus.c  **** 		//Check if temp (having totalRequest) has modulus value of totalRequest.
 783:src/modbus.c  **** 		if (tempTotalRequest == (totalRequest % 8) && flag == 1) {
 4822              		.loc 1 783 0
 4823 0080 FA6A     		ldr	r2, [r7, #44]
 4824 0082 344B     		ldr	r3, .L214+4
 4825 0084 1B68     		ldr	r3, [r3]
 4826 0086 03F00703 		and	r3, r3, #7
 4827 008a 9A42     		cmp	r2, r3
 4828 008c 08D1     		bne	.L205
 4829              		.loc 1 783 0 is_stmt 0 discriminator 1
 4830 008e BB69     		ldr	r3, [r7, #24]
 4831 0090 012B     		cmp	r3, #1
 4832 0092 05D1     		bne	.L205
 784:src/modbus.c  **** 			toBit = (totalRequest % 8) - 1; //if true the set toBit to modules minus-1.
 4833              		.loc 1 784 0 is_stmt 1
 4834 0094 2F4B     		ldr	r3, .L214+4
 4835 0096 1B68     		ldr	r3, [r3]
 4836 0098 03F00703 		and	r3, r3, #7
 4837 009c 013B     		subs	r3, r3, #1
 4838 009e 3B62     		str	r3, [r7, #32]
 4839              	.L205:
 785:src/modbus.c  **** 		}
 786:src/modbus.c  **** 
 787:src/modbus.c  **** 		//Call masking function and store value in r.
 788:src/modbus.c  **** 		unsigned int r = getMask(fromBit, toBit);
 4840              		.loc 1 788 0
 4841 00a0 786A     		ldr	r0, [r7, #36]
 4842 00a2 396A     		ldr	r1, [r7, #32]
 4843 00a4 FFF7FEFF 		bl	getMask
 4844 00a8 B860     		str	r0, [r7, #8]
 789:src/modbus.c  **** 
 790:src/modbus.c  **** 		//Get masking done on data from hash and store in result.
 791:src/modbus.c  **** 		unsigned int result = r & s->value;
 4845              		.loc 1 791 0
 4846 00aa 2C4B     		ldr	r3, .L214+12
 4847 00ac 1B68     		ldr	r3, [r3]
 4848 00ae 5B68     		ldr	r3, [r3, #4]
 4849 00b0 1A46     		mov	r2, r3
 4850 00b2 BB68     		ldr	r3, [r7, #8]
 4851 00b4 1340     		ands	r3, r3, r2
 4852 00b6 3B61     		str	r3, [r7, #16]
 792:src/modbus.c  **** 
 793:src/modbus.c  **** 		//Check if first 8 Bit then go to "next" label.
 794:src/modbus.c  **** 		if (toBit == 7) {
 4853              		.loc 1 794 0
 4854 00b8 3B6A     		ldr	r3, [r7, #32]
 4855 00ba 072B     		cmp	r3, #7
 4856 00bc 00D1     		bne	.L206
 795:src/modbus.c  **** 			goto next;
 4857              		.loc 1 795 0
 4858 00be 0BE0     		b	.L207
 4859              	.L206:
 796:src/modbus.c  **** 		}
 797:src/modbus.c  **** 
 798:src/modbus.c  **** 		//Else shift right.
 799:src/modbus.c  **** 		else {
 800:src/modbus.c  **** 			for (shiftRight = fromBit; shiftRight > 0; shiftRight--) {
 4860              		.loc 1 800 0
 4861 00c0 7B6A     		ldr	r3, [r7, #36]
 4862 00c2 FB61     		str	r3, [r7, #28]
 4863 00c4 05E0     		b	.L208
 4864              	.L209:
 801:src/modbus.c  **** 				result = result >> 1;
 4865              		.loc 1 801 0 discriminator 2
 4866 00c6 3B69     		ldr	r3, [r7, #16]
 4867 00c8 5B08     		lsrs	r3, r3, #1
 4868 00ca 3B61     		str	r3, [r7, #16]
 800:src/modbus.c  **** 			for (shiftRight = fromBit; shiftRight > 0; shiftRight--) {
 4869              		.loc 1 800 0 discriminator 2
 4870 00cc FB69     		ldr	r3, [r7, #28]
 4871 00ce 013B     		subs	r3, r3, #1
 4872 00d0 FB61     		str	r3, [r7, #28]
 4873              	.L208:
 800:src/modbus.c  **** 			for (shiftRight = fromBit; shiftRight > 0; shiftRight--) {
 4874              		.loc 1 800 0 is_stmt 0 discriminator 1
 4875 00d2 FB69     		ldr	r3, [r7, #28]
 4876 00d4 002B     		cmp	r3, #0
 4877 00d6 F6DC     		bgt	.L209
 4878              	.L207:
 802:src/modbus.c  **** 			}
 803:src/modbus.c  **** 		}
 804:src/modbus.c  **** 
 805:src/modbus.c  **** 		//Label
 806:src/modbus.c  **** 		next:
 807:src/modbus.c  **** 
 808:src/modbus.c  **** 		//Store the data to be sent in response packet one by one till requested bits reached.
 809:src/modbus.c  **** 		*rPacket = result;
 4879              		.loc 1 809 0 is_stmt 1
 4880 00d8 1F4B     		ldr	r3, .L214+8
 4881 00da 1B68     		ldr	r3, [r3]
 4882 00dc 3A69     		ldr	r2, [r7, #16]
 4883 00de 1A60     		str	r2, [r3]
 810:src/modbus.c  **** 		rPacket++;
 4884              		.loc 1 810 0
 4885 00e0 1D4B     		ldr	r3, .L214+8
 4886 00e2 1B68     		ldr	r3, [r3]
 4887 00e4 1A1D     		adds	r2, r3, #4
 4888 00e6 1C4B     		ldr	r3, .L214+8
 4889 00e8 1A60     		str	r2, [r3]
 811:src/modbus.c  **** //		printf("Data: 0x%x\n", result);
 812:src/modbus.c  **** 
 813:src/modbus.c  **** 		//Increase the countbuffer to check if 32 bit data sent or not
 814:src/modbus.c  **** 		count++;
 4890              		.loc 1 814 0
 4891 00ea BB6A     		ldr	r3, [r7, #40]
 4892 00ec 0133     		adds	r3, r3, #1
 4893 00ee BB62     		str	r3, [r7, #40]
 815:src/modbus.c  **** 
 816:src/modbus.c  **** 		//Decrement the totalReqeust (assigned to temp) by 8 after sending 8 bit.
 817:src/modbus.c  **** 		tempTotalRequest = tempTotalRequest - 8;
 4894              		.loc 1 817 0
 4895 00f0 FB6A     		ldr	r3, [r7, #44]
 4896 00f2 083B     		subs	r3, r3, #8
 4897 00f4 FB62     		str	r3, [r7, #44]
 818:src/modbus.c  **** 
 819:src/modbus.c  **** 		//Check if totalRequest is more than 32 bit or not.
 820:src/modbus.c  **** 		if (totalRequest >= 32) {
 4898              		.loc 1 820 0
 4899 00f6 174B     		ldr	r3, .L214+4
 4900 00f8 1B68     		ldr	r3, [r3]
 4901 00fa 1F2B     		cmp	r3, #31
 4902 00fc 01D9     		bls	.L210
 821:src/modbus.c  **** 			maxCount = 4;
 4903              		.loc 1 821 0
 4904 00fe 0423     		movs	r3, #4
 4905 0100 7B61     		str	r3, [r7, #20]
 4906              	.L210:
 822:src/modbus.c  **** 		}
 823:src/modbus.c  **** 
 824:src/modbus.c  **** 		//If not then set
 825:src/modbus.c  **** 		/*else{
 826:src/modbus.c  **** 		 count = 0;
 827:src/modbus.c  **** 		 fromBit = 0;
 828:src/modbus.c  **** 		 toBit = 7;
 829:src/modbus.c  **** 		 flag = 1;
 830:src/modbus.c  **** 		 goto again;
 831:src/modbus.c  **** 		 }*/
 832:src/modbus.c  **** 
 833:src/modbus.c  **** 		//If count reached b i.e. total 4*8 Bit sent (32 bit) then get next value from hash.
 834:src/modbus.c  **** 		if (count == maxCount) {
 4907              		.loc 1 834 0
 4908 0102 BA6A     		ldr	r2, [r7, #40]
 4909 0104 7B69     		ldr	r3, [r7, #20]
 4910 0106 9A42     		cmp	r2, r3
 4911 0108 14D1     		bne	.L211
 835:src/modbus.c  **** 			s = getData(firstRequest++);
 4912              		.loc 1 835 0
 4913 010a 114B     		ldr	r3, .L214
 4914 010c 1B68     		ldr	r3, [r3]
 4915 010e 591C     		adds	r1, r3, #1
 4916 0110 0F4A     		ldr	r2, .L214
 4917 0112 1160     		str	r1, [r2]
 4918 0114 1846     		mov	r0, r3
 4919 0116 FFF7FEFF 		bl	getData
 4920 011a 0246     		mov	r2, r0
 4921 011c 0F4B     		ldr	r3, .L214+12
 4922 011e 1A60     		str	r2, [r3]
 836:src/modbus.c  **** 			count = 0;
 4923              		.loc 1 836 0
 4924 0120 0023     		movs	r3, #0
 4925 0122 BB62     		str	r3, [r7, #40]
 837:src/modbus.c  **** 			fromBit = 0;
 4926              		.loc 1 837 0
 4927 0124 0023     		movs	r3, #0
 4928 0126 7B62     		str	r3, [r7, #36]
 838:src/modbus.c  **** 			toBit = 7;
 4929              		.loc 1 838 0
 4930 0128 0723     		movs	r3, #7
 4931 012a 3B62     		str	r3, [r7, #32]
 839:src/modbus.c  **** 			flag = 1;
 4932              		.loc 1 839 0
 4933 012c 0123     		movs	r3, #1
 4934 012e BB61     		str	r3, [r7, #24]
 840:src/modbus.c  **** 			goto again;
 4935              		.loc 1 840 0
 4936 0130 00BF     		nop
 4937              	.L202:
 4938              	.LBE19:
 776:src/modbus.c  **** 	again: while (tempTotalRequest > 0) {
 4939              		.loc 1 776 0
 4940 0132 05E0     		b	.L203
 4941              	.L211:
 4942              	.LBB20:
 841:src/modbus.c  **** 		}
 842:src/modbus.c  **** 
 843:src/modbus.c  **** 		//Increase fromBit and toBit to fetch next 8 bit.
 844:src/modbus.c  **** 		fromBit = fromBit + 8;
 4943              		.loc 1 844 0
 4944 0134 7B6A     		ldr	r3, [r7, #36]
 4945 0136 0833     		adds	r3, r3, #8
 4946 0138 7B62     		str	r3, [r7, #36]
 845:src/modbus.c  **** 		toBit = toBit + 8;
 4947              		.loc 1 845 0
 4948 013a 3B6A     		ldr	r3, [r7, #32]
 4949 013c 0833     		adds	r3, r3, #8
 4950 013e 3B62     		str	r3, [r7, #32]
 4951              	.L203:
 4952              	.LBE20:
 776:src/modbus.c  **** 	again: while (tempTotalRequest > 0) {
 4953              		.loc 1 776 0 discriminator 1
 4954 0140 FB6A     		ldr	r3, [r7, #44]
 4955 0142 002B     		cmp	r3, #0
 4956 0144 94DC     		bgt	.L212
 846:src/modbus.c  **** 	}
 847:src/modbus.c  **** 
 848:src/modbus.c  **** /*	for (d = 0; d < (byteStream + 3); d++) {
 849:src/modbus.c  **** 		printf("\n0x%x", arrayResponsePacket[d]);
 850:src/modbus.c  **** 	}
 851:src/modbus.c  **** */
 852:src/modbus.c  **** 	return 0;
 4957              		.loc 1 852 0
 4958 0146 0023     		movs	r3, #0
 853:src/modbus.c  **** }
 4959              		.loc 1 853 0
 4960 0148 1846     		mov	r0, r3
 4961 014a 3037     		adds	r7, r7, #48
 4962 014c BD46     		mov	sp, r7
 4963              		@ sp needed
 4964 014e 80BD     		pop	{r7, pc}
 4965              	.L215:
 4966              		.align	2
 4967              	.L214:
 4968 0150 00000000 		.word	firstRequest
 4969 0154 00000000 		.word	totalRequest
 4970 0158 00000000 		.word	rPacket
 4971 015c 00000000 		.word	s
 4972              		.cfi_endproc
 4973              	.LFE15:
 4975              		.section	.text.getMask,"ax",%progbits
 4976              		.align	2
 4977              		.global	getMask
 4978              		.thumb
 4979              		.thumb_func
 4981              	getMask:
 4982              	.LFB16:
 854:src/modbus.c  **** 
 855:src/modbus.c  **** unsigned int getMask(int a, int b) {
 4983              		.loc 1 855 0
 4984              		.cfi_startproc
 4985              		@ args = 0, pretend = 0, frame = 16
 4986              		@ frame_needed = 1, uses_anonymous_args = 0
 4987              		@ link register save eliminated.
 4988 0000 80B4     		push	{r7}
 4989              	.LCFI48:
 4990              		.cfi_def_cfa_offset 4
 4991              		.cfi_offset 7, -4
 4992 0002 85B0     		sub	sp, sp, #20
 4993              	.LCFI49:
 4994              		.cfi_def_cfa_offset 24
 4995 0004 00AF     		add	r7, sp, #0
 4996              	.LCFI50:
 4997              		.cfi_def_cfa_register 7
 4998 0006 7860     		str	r0, [r7, #4]
 4999 0008 3960     		str	r1, [r7]
 856:src/modbus.c  **** 	unsigned int i;
 857:src/modbus.c  **** 	unsigned int r = 0;
 5000              		.loc 1 857 0
 5001 000a 0023     		movs	r3, #0
 5002 000c BB60     		str	r3, [r7, #8]
 858:src/modbus.c  **** 	for (i = a; i <= b; i++) {
 5003              		.loc 1 858 0
 5004 000e 7B68     		ldr	r3, [r7, #4]
 5005 0010 FB60     		str	r3, [r7, #12]
 5006 0012 09E0     		b	.L217
 5007              	.L218:
 859:src/modbus.c  **** 		r |= 1 << i;
 5008              		.loc 1 859 0 discriminator 2
 5009 0014 FB68     		ldr	r3, [r7, #12]
 5010 0016 0122     		movs	r2, #1
 5011 0018 02FA03F3 		lsl	r3, r2, r3
 5012 001c BA68     		ldr	r2, [r7, #8]
 5013 001e 1343     		orrs	r3, r3, r2
 5014 0020 BB60     		str	r3, [r7, #8]
 858:src/modbus.c  **** 	for (i = a; i <= b; i++) {
 5015              		.loc 1 858 0 discriminator 2
 5016 0022 FB68     		ldr	r3, [r7, #12]
 5017 0024 0133     		adds	r3, r3, #1
 5018 0026 FB60     		str	r3, [r7, #12]
 5019              	.L217:
 858:src/modbus.c  **** 	for (i = a; i <= b; i++) {
 5020              		.loc 1 858 0 is_stmt 0 discriminator 1
 5021 0028 3A68     		ldr	r2, [r7]
 5022 002a FB68     		ldr	r3, [r7, #12]
 5023 002c 9A42     		cmp	r2, r3
 5024 002e F1D2     		bcs	.L218
 860:src/modbus.c  **** 	}
 861:src/modbus.c  **** 	return r;
 5025              		.loc 1 861 0 is_stmt 1
 5026 0030 BB68     		ldr	r3, [r7, #8]
 862:src/modbus.c  **** }
 5027              		.loc 1 862 0
 5028 0032 1846     		mov	r0, r3
 5029 0034 1437     		adds	r7, r7, #20
 5030 0036 BD46     		mov	sp, r7
 5031              		@ sp needed
 5032 0038 5DF8047B 		ldr	r7, [sp], #4
 5033 003c 7047     		bx	lr
 5034              		.cfi_endproc
 5035              	.LFE16:
 5037 003e 00BF     		.text
 5038              	.Letext0:
 5039              		.file 2 "/home/shihyu/data/STM32F4/gcc-arm-none-eabi-4_8-2013q4/lib/gcc/arm-none-eabi/4.8.3/includ
 5040              		.file 3 "/home/shihyu/data/STM32F4/gcc-arm-none-eabi-4_8-2013q4/arm-none-eabi/include/stdint.h"
 5041              		.file 4 "src/uthash.h"
 5042              		.file 5 "src/modbus.h"
DEFINED SYMBOLS
                            *ABS*:00000000 modbus.c
     /tmp/cccZGgMr.s:20     .rodata.crcHi:00000000 $d
     /tmp/cccZGgMr.s:23     .rodata.crcHi:00000000 crcHi
     /tmp/cccZGgMr.s:281    .rodata.crcLo:00000000 $d
     /tmp/cccZGgMr.s:284    .rodata.crcLo:00000000 crcLo
     /tmp/cccZGgMr.s:546    .bss.firstRequest:00000000 firstRequest
     /tmp/cccZGgMr.s:543    .bss.firstRequest:00000000 $d
     /tmp/cccZGgMr.s:553    .bss.totalRequest:00000000 totalRequest
     /tmp/cccZGgMr.s:550    .bss.totalRequest:00000000 $d
     /tmp/cccZGgMr.s:560    .bss.writeRequest:00000000 writeRequest
     /tmp/cccZGgMr.s:557    .bss.writeRequest:00000000 $d
     /tmp/cccZGgMr.s:567    .bss.arrayResponsePacket:00000000 arrayResponsePacket
     /tmp/cccZGgMr.s:564    .bss.arrayResponsePacket:00000000 $d
     /tmp/cccZGgMr.s:574    .data.rPacket:00000000 rPacket
     /tmp/cccZGgMr.s:571    .data.rPacket:00000000 $d
     /tmp/cccZGgMr.s:581    .bss.users:00000000 users
     /tmp/cccZGgMr.s:578    .bss.users:00000000 $d
                            *COM*:00000004 s
     /tmp/cccZGgMr.s:585    .text.addData:00000000 $t
     /tmp/cccZGgMr.s:590    .text.addData:00000000 addData
     /tmp/cccZGgMr.s:839    .text.addData:000001c4 $d
     /tmp/cccZGgMr.s:853    .text.addData:000001f0 $d
     /tmp/cccZGgMr.s:858    .text.addData:000001fc $t
     /tmp/cccZGgMr.s:1329   .text.addData:00000558 $d
     /tmp/cccZGgMr.s:1335   .text.addData:00000568 $t
     /tmp/cccZGgMr.s:1571   .text.addData:0000073c $d
     /tmp/cccZGgMr.s:1584   .text.addData:00000768 $t
     /tmp/cccZGgMr.s:2159   .text.addData:00000b8c $d
     /tmp/cccZGgMr.s:2162   .text.addData:00000b90 $t
     /tmp/cccZGgMr.s:2192   .rodata:00000000 $d
     /tmp/cccZGgMr.s:2196   .text.putData:00000000 $t
     /tmp/cccZGgMr.s:2201   .text.putData:00000000 putData
     /tmp/cccZGgMr.s:2250   .text.putData:00000034 $d
     /tmp/cccZGgMr.s:2256   .text.getData:00000000 $t
     /tmp/cccZGgMr.s:2261   .text.getData:00000000 getData
     /tmp/cccZGgMr.s:2507   .text.getData:000001c0 $d
     /tmp/cccZGgMr.s:2521   .text.getData:000001ec $d
     /tmp/cccZGgMr.s:2526   .text.getData:000001f8 $t
     /tmp/cccZGgMr.s:2841   .text.getData:0000041c $d
     /tmp/cccZGgMr.s:2846   .text.validateSlaveID:00000000 $t
     /tmp/cccZGgMr.s:2851   .text.validateSlaveID:00000000 validateSlaveID
     /tmp/cccZGgMr.s:2905   .text.validateSlaveID:0000003c $d
     /tmp/cccZGgMr.s:2910   .text.validateCrc:00000000 $t
     /tmp/cccZGgMr.s:2915   .text.validateCrc:00000000 validateCrc
     /tmp/cccZGgMr.s:3002   .text.validateCrc:00000070 $d
     /tmp/cccZGgMr.s:3008   .text.calculateOutputCrc:00000000 $t
     /tmp/cccZGgMr.s:3013   .text.calculateOutputCrc:00000000 calculateOutputCrc
     /tmp/cccZGgMr.s:3096   .text.calculateOutputCrc:00000070 $d
     /tmp/cccZGgMr.s:3103   .text.validateFunction:00000000 $t
     /tmp/cccZGgMr.s:3108   .text.validateFunction:00000000 validateFunction
     /tmp/cccZGgMr.s:3152   .text.validateFunction:00000034 $d
     /tmp/cccZGgMr.s:3170   .text.validateFunction:00000074 $t
     /tmp/cccZGgMr.s:4726   .text.readCoil:00000000 readCoil
     /tmp/cccZGgMr.s:4469   .text.readDiscreteInputs:00000000 readDiscreteInputs
     /tmp/cccZGgMr.s:4281   .text.readHoldingRegisters:00000000 readHoldingRegisters
     /tmp/cccZGgMr.s:4024   .text.readInputRegisters:00000000 readInputRegisters
     /tmp/cccZGgMr.s:3864   .text.writeSingleCoil:00000000 writeSingleCoil
     /tmp/cccZGgMr.s:3721   .text.writeSingleRegister:00000000 writeSingleRegister
     /tmp/cccZGgMr.s:3493   .text.writeMultipleCoils:00000000 writeMultipleCoils
     /tmp/cccZGgMr.s:3254   .text.writeMultipleRegisters:00000000 writeMultipleRegisters
     /tmp/cccZGgMr.s:3685   .text.readExceptionStatus:00000000 readExceptionStatus
     /tmp/cccZGgMr.s:3244   .text.validateFunction:000000d8 $d
     /tmp/cccZGgMr.s:3249   .text.writeMultipleRegisters:00000000 $t
     /tmp/cccZGgMr.s:4981   .text.getMask:00000000 getMask
     /tmp/cccZGgMr.s:3476   .text.writeMultipleRegisters:00000140 $d
     /tmp/cccZGgMr.s:3488   .text.writeMultipleCoils:00000000 $t
     /tmp/cccZGgMr.s:3671   .text.writeMultipleCoils:000000fc $d
     /tmp/cccZGgMr.s:3680   .text.readExceptionStatus:00000000 $t
     /tmp/cccZGgMr.s:3716   .text.writeSingleRegister:00000000 $t
     /tmp/cccZGgMr.s:3851   .text.writeSingleRegister:000000b8 $d
     /tmp/cccZGgMr.s:3859   .text.writeSingleCoil:00000000 $t
     /tmp/cccZGgMr.s:4012   .text.writeSingleCoil:000000cc $d
     /tmp/cccZGgMr.s:4019   .text.readInputRegisters:00000000 $t
     /tmp/cccZGgMr.s:4268   .text.readInputRegisters:00000158 $d
     /tmp/cccZGgMr.s:4276   .text.readHoldingRegisters:00000000 $t
     /tmp/cccZGgMr.s:4456   .text.readHoldingRegisters:000000f4 $d
     /tmp/cccZGgMr.s:4464   .text.readDiscreteInputs:00000000 $t
     /tmp/cccZGgMr.s:4713   .text.readDiscreteInputs:00000158 $d
     /tmp/cccZGgMr.s:4721   .text.readCoil:00000000 $t
     /tmp/cccZGgMr.s:4968   .text.readCoil:00000150 $d
     /tmp/cccZGgMr.s:4976   .text.getMask:00000000 $t
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
memcmp
malloc
exit
memset
free
printf
