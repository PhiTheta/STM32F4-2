   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"stm32f4xx_adc.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.ADC_DeInit,"ax",%progbits
  20              		.align	2
  21              		.global	ADC_DeInit
  22              		.thumb
  23              		.thumb_func
  25              	ADC_DeInit:
  26              	.LFB110:
  27              		.file 1 "libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c"
   1:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
   2:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ******************************************************************************
   3:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @file    stm32f4xx_adc.c
   4:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @author  MCD Application Team
   5:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @version V1.0.0RC1
   6:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @date    25-August-2011
   7:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief   This file provides firmware functions to manage the following 
   8:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          functionalities of the Analog to Digital Convertor (ADC) peripheral:
   9:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *           - Initialization and Configuration (in addition to ADC multi mode 
  10:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *             selection)
  11:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *           - Analog Watchdog configuration
  12:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *           - Temperature Sensor & Vrefint (Voltage Reference internal) & VBAT
  13:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *             management 
  14:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *           - Regular Channels Configuration
  15:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *           - Regular Channels DMA Configuration
  16:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *           - Injected channels Configuration
  17:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *           - Interrupts and flags management
  18:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         
  19:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *  @verbatim
  20:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *
  21:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          ===================================================================
  22:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *                                   How to use this driver
  23:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          ===================================================================
  24:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
  25:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          1.  Enable the ADC interface clock using 
  26:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *                  RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADCx, ENABLE); 
  27:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *     
  28:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          2. ADC pins configuration
  29:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *               - Enable the clock for the ADC GPIOs using the following function:
  30:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *                   RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOx, ENABLE);   
  31:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *                - Configure these ADC pins in analog mode using GPIO_Init();  
  32:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *
  33:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          3. Configure the ADC Prescaler, conversion resolution and data 
  34:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *              alignment using the ADC_Init() function.
  35:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          4. Activate the ADC peripheral using ADC_Cmd() function.
  36:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *
  37:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          Regular channels group configuration
  38:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          ====================================    
  39:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            - To configure the ADC regular channels group features, use 
  40:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *              ADC_Init() and ADC_RegularChannelConfig() functions.
  41:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            - To activate the continuous mode, use the ADC_continuousModeCmd()
  42:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *              function.
  43:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            - To configurate and activate the Discontinuous mode, use the 
  44:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *              ADC_DiscModeChannelCountConfig() and ADC_DiscModeCmd() functions.
  45:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            - To read the ADC converted values, use the ADC_GetConversionValue()
  46:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *              function.
  47:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *
  48:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          Multi mode ADCs Regular channels configuration
  49:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          ===============================================
  50:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            - Refer to "Regular channels group configuration" description to
  51:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *              configure the ADC1, ADC2 and ADC3 regular channels.        
  52:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            - Select the Multi mode ADC regular channels features (dual or 
  53:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *              triple mode) using ADC_CommonInit() function and configure 
  54:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *              the DMA mode using ADC_MultiModeDMARequestAfterLastTransferCmd() 
  55:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *              functions.        
  56:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            - Read the ADCs converted values using the 
  57:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *              ADC_GetMultiModeConversionValue() function.
  58:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *
  59:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          DMA for Regular channels group features configuration
  60:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          ====================================================== 
  61:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *           - To enable the DMA mode for regular channels group, use the 
  62:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *             ADC_DMACmd() function.
  63:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *           - To enable the generation of DMA requests continuously at the end
  64:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *             of the last DMA transfer, use the ADC_DMARequestAfterLastTransferCmd() 
  65:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *             function.
  66:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *
  67:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          Injected channels group configuration
  68:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          =====================================    
  69:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            - To configure the ADC Injected channels group features, use 
  70:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *              ADC_InjectedChannelConfig() and  ADC_InjectedSequencerLengthConfig()
  71:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *              functions.
  72:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            - To activate the continuous mode, use the ADC_continuousModeCmd()
  73:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *              function.
  74:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            - To activate the Injected Discontinuous mode, use the 
  75:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *              ADC_InjectedDiscModeCmd() function.  
  76:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            - To activate the AutoInjected mode, use the ADC_AutoInjectedConvCmd() 
  77:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *              function.        
  78:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            - To read the ADC converted values, use the ADC_GetInjectedConversionValue() 
  79:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *              function.
  80:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *
  81:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *  @endverbatim
  82:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *
  83:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ******************************************************************************
  84:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @attention
  85:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *
  86:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
  87:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
  88:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
  89:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
  90:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
  91:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
  92:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *
  93:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
  94:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ******************************************************************************  
  95:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */ 
  96:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
  97:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* Includes ------------------------------------------------------------------*/
  98:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #include "stm32f4xx_adc.h"
  99:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #include "stm32f4xx_rcc.h"
 100:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 101:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
 102:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @{
 103:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 104:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 105:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /** @defgroup ADC 
 106:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief ADC driver modules
 107:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @{
 108:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */ 
 109:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 110:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* Private typedef -----------------------------------------------------------*/
 111:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* Private define ------------------------------------------------------------*/ 
 112:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 113:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* ADC DISCNUM mask */
 114:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define CR1_DISCNUM_RESET         ((uint32_t)0xFFFF1FFF)
 115:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 116:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* ADC AWDCH mask */
 117:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define CR1_AWDCH_RESET           ((uint32_t)0xFFFFFFE0)   
 118:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 119:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* ADC Analog watchdog enable mode mask */
 120:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define CR1_AWDMode_RESET         ((uint32_t)0xFF3FFDFF)   
 121:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 122:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* CR1 register Mask */
 123:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define CR1_CLEAR_MASK            ((uint32_t)0xFCFFFEFF)
 124:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 125:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* ADC EXTEN mask */
 126:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define CR2_EXTEN_RESET           ((uint32_t)0xCFFFFFFF)  
 127:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 128:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* ADC JEXTEN mask */
 129:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define CR2_JEXTEN_RESET          ((uint32_t)0xFFCFFFFF)  
 130:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 131:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* ADC JEXTSEL mask */
 132:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define CR2_JEXTSEL_RESET         ((uint32_t)0xFFF0FFFF)  
 133:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 134:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* CR2 register Mask */
 135:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define CR2_CLEAR_MASK            ((uint32_t)0xC0FFF7FD)
 136:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 137:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* ADC SQx mask */
 138:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define SQR3_SQ_SET               ((uint32_t)0x0000001F)  
 139:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define SQR2_SQ_SET               ((uint32_t)0x0000001F)  
 140:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define SQR1_SQ_SET               ((uint32_t)0x0000001F)  
 141:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 142:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* ADC L Mask */
 143:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define SQR1_L_RESET              ((uint32_t)0xFF0FFFFF) 
 144:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 145:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* ADC JSQx mask */
 146:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define JSQR_JSQ_SET              ((uint32_t)0x0000001F) 
 147:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 148:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* ADC JL mask */
 149:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define JSQR_JL_SET               ((uint32_t)0x00300000) 
 150:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define JSQR_JL_RESET             ((uint32_t)0xFFCFFFFF) 
 151:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 152:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* ADC SMPx mask */
 153:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define SMPR1_SMP_SET             ((uint32_t)0x00000007)  
 154:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define SMPR2_SMP_SET             ((uint32_t)0x00000007) 
 155:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 156:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* ADC JDRx registers offset */
 157:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define JDR_OFFSET                ((uint8_t)0x28) 
 158:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 159:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* ADC CDR register base address */
 160:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define CDR_ADDRESS               ((uint32_t)0x40012308)   
 161:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 162:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* ADC CCR register Mask */
 163:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define CR_CLEAR_MASK             ((uint32_t)0xFFFC30E0)  
 164:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 165:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* Private macro -------------------------------------------------------------*/
 166:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* Private variables ---------------------------------------------------------*/
 167:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* Private function prototypes -----------------------------------------------*/
 168:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* Private functions ---------------------------------------------------------*/
 169:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 170:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /** @defgroup ADC_Private_Functions
 171:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @{
 172:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */ 
 173:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 174:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /** @defgroup ADC_Group1 Initialization and Configuration functions
 175:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  *  @brief    Initialization and Configuration functions 
 176:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  *
 177:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** @verbatim    
 178:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  ===============================================================================
 179:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                       Initialization and Configuration functions
 180:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  ===============================================================================  
 181:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   This section provides functions allowing to:
 182:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    - Initialize and configure the ADC Prescaler
 183:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    - ADC Conversion Resolution (12bit..6bit)
 184:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    - Scan Conversion Mode (multichannels or one channel) for regular group
 185:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    - ADC Continuous Conversion Mode (Continuous or Single conversion) for 
 186:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      regular group
 187:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    - External trigger Edge and source of regular group, 
 188:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    - Converted data alignment (left or right)
 189:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    - The number of ADC conversions that will be done using the sequencer for 
 190:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      regular channel group
 191:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    - Multi ADC mode selection
 192:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    - Direct memory access mode selection for multi ADC mode  
 193:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    - Delay between 2 sampling phases (used in dual or triple interleaved modes)
 194:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    - Enable or disable the ADC peripheral
 195:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    
 196:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** @endverbatim
 197:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @{
 198:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 199:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 200:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 201:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Deinitializes all ADCs peripherals registers to their default reset 
 202:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         values.
 203:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  None
 204:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
 205:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 206:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_DeInit(void)
 207:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
  28              		.loc 1 207 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 1, uses_anonymous_args = 0
  32 0000 80B5     		push	{r7, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 8
  35              		.cfi_offset 7, -8
  36              		.cfi_offset 14, -4
  37 0002 00AF     		add	r7, sp, #0
  38              	.LCFI1:
  39              		.cfi_def_cfa_register 7
 208:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Enable all ADCs reset state */
 209:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC, ENABLE);
  40              		.loc 1 209 0
  41 0004 4FF48070 		mov	r0, #256
  42 0008 0121     		movs	r1, #1
  43 000a FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 210:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 211:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Release all ADCs from reset state */
 212:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC, DISABLE);
  44              		.loc 1 212 0
  45 000e 4FF48070 		mov	r0, #256
  46 0012 0021     		movs	r1, #0
  47 0014 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 213:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
  48              		.loc 1 213 0
  49 0018 80BD     		pop	{r7, pc}
  50              		.cfi_endproc
  51              	.LFE110:
  53 001a 00BF     		.section	.text.ADC_Init,"ax",%progbits
  54              		.align	2
  55              		.global	ADC_Init
  56              		.thumb
  57              		.thumb_func
  59              	ADC_Init:
  60              	.LFB111:
 214:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 215:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 216:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Initializes the ADCx peripheral according to the specified parameters 
 217:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         in the ADC_InitStruct.
 218:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @note   This function is used to configure the global features of the ADC ( 
 219:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         Resolution and Data Alignment), however, the rest of the configuration
 220:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         parameters are specific to the regular channels group (scan mode 
 221:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         activation, continuous mode activation, External trigger source and 
 222:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         edge, number of conversion in the regular channels group sequencer).  
 223:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 224:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains
 225:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         the configuration information for the specified ADC peripheral.
 226:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
 227:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 228:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)
 229:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
  61              		.loc 1 229 0
  62              		.cfi_startproc
  63              		@ args = 0, pretend = 0, frame = 16
  64              		@ frame_needed = 1, uses_anonymous_args = 0
  65              		@ link register save eliminated.
  66 0000 80B4     		push	{r7}
  67              	.LCFI2:
  68              		.cfi_def_cfa_offset 4
  69              		.cfi_offset 7, -4
  70 0002 85B0     		sub	sp, sp, #20
  71              	.LCFI3:
  72              		.cfi_def_cfa_offset 24
  73 0004 00AF     		add	r7, sp, #0
  74              	.LCFI4:
  75              		.cfi_def_cfa_register 7
  76 0006 7860     		str	r0, [r7, #4]
  77 0008 3960     		str	r1, [r7]
 230:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   uint32_t tmpreg1 = 0;
  78              		.loc 1 230 0
  79 000a 0023     		movs	r3, #0
  80 000c FB60     		str	r3, [r7, #12]
 231:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   uint8_t tmpreg2 = 0;
  81              		.loc 1 231 0
  82 000e 0023     		movs	r3, #0
  83 0010 FB72     		strb	r3, [r7, #11]
 232:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
 233:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 234:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_RESOLUTION(ADC_InitStruct->ADC_Resolution)); 
 235:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(ADC_InitStruct->ADC_ScanConvMode));
 236:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(ADC_InitStruct->ADC_ContinuousConvMode)); 
 237:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_EXT_TRIG_EDGE(ADC_InitStruct->ADC_ExternalTrigConvEdge)); 
 238:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_EXT_TRIG(ADC_InitStruct->ADC_ExternalTrigConv));    
 239:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign)); 
 240:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfConversion));
 241:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 242:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /*---------------------------- ADCx CR1 Configuration -----------------*/
 243:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Get the ADCx CR1 value */
 244:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 = ADCx->CR1;
  84              		.loc 1 244 0
  85 0012 7B68     		ldr	r3, [r7, #4]
  86 0014 5B68     		ldr	r3, [r3, #4]
  87 0016 FB60     		str	r3, [r7, #12]
 245:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 246:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Clear RES and SCAN bits */
 247:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 &= CR1_CLEAR_MASK;
  88              		.loc 1 247 0
  89 0018 FB68     		ldr	r3, [r7, #12]
  90 001a 23F04073 		bic	r3, r3, #50331648
  91 001e 23F48073 		bic	r3, r3, #256
  92 0022 FB60     		str	r3, [r7, #12]
 248:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 249:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Configure ADCx: scan conversion mode and resolution */
 250:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set SCAN bit according to ADC_ScanConvMode value */
 251:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set RES bit according to ADC_Resolution value */ 
 252:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
  93              		.loc 1 252 0
  94 0024 3B68     		ldr	r3, [r7]
  95 0026 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
  96 0028 1A02     		lsls	r2, r3, #8
 253:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                                    ADC_InitStruct->ADC_Resolution);
  97              		.loc 1 253 0
  98 002a 3B68     		ldr	r3, [r7]
  99 002c 1B68     		ldr	r3, [r3]
 252:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 100              		.loc 1 252 0
 101 002e 1343     		orrs	r3, r3, r2
 102 0030 FA68     		ldr	r2, [r7, #12]
 103 0032 1343     		orrs	r3, r3, r2
 104 0034 FB60     		str	r3, [r7, #12]
 254:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Write to ADCx CR1 */
 255:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADCx->CR1 = tmpreg1;
 105              		.loc 1 255 0
 106 0036 7B68     		ldr	r3, [r7, #4]
 107 0038 FA68     		ldr	r2, [r7, #12]
 108 003a 5A60     		str	r2, [r3, #4]
 256:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /*---------------------------- ADCx CR2 Configuration -----------------*/
 257:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Get the ADCx CR2 value */
 258:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 = ADCx->CR2;
 109              		.loc 1 258 0
 110 003c 7B68     		ldr	r3, [r7, #4]
 111 003e 9B68     		ldr	r3, [r3, #8]
 112 0040 FB60     		str	r3, [r7, #12]
 259:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 260:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Clear CONT, ALIGN, EXTEN and EXTSEL bits */
 261:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 &= CR2_CLEAR_MASK;
 113              		.loc 1 261 0
 114 0042 FA68     		ldr	r2, [r7, #12]
 115 0044 174B     		ldr	r3, .L3
 116 0046 1340     		ands	r3, r3, r2
 117 0048 FB60     		str	r3, [r7, #12]
 262:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 263:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Configure ADCx: external trigger event and edge, data alignment and 
 264:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      continuous conversion mode */
 265:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set ALIGN bit according to ADC_DataAlign value */
 266:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
 267:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
 268:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set CONT bit according to ADC_ContinuousConvMode value */
 269:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 118              		.loc 1 269 0
 119 004a 3B68     		ldr	r3, [r7]
 120 004c 1A69     		ldr	r2, [r3, #16]
 270:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                         ADC_InitStruct->ADC_ExternalTrigConv | 
 121              		.loc 1 270 0
 122 004e 3B68     		ldr	r3, [r7]
 123 0050 DB68     		ldr	r3, [r3, #12]
 269:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 124              		.loc 1 269 0
 125 0052 1A43     		orrs	r2, r2, r3
 271:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                         ADC_InitStruct->ADC_ExternalTrigConvEdge | \
 126              		.loc 1 271 0
 127 0054 3B68     		ldr	r3, [r7]
 128 0056 9B68     		ldr	r3, [r3, #8]
 270:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                         ADC_InitStruct->ADC_ExternalTrigConv | 
 129              		.loc 1 270 0
 130 0058 1A43     		orrs	r2, r2, r3
 272:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                         ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
 131              		.loc 1 272 0
 132 005a 3B68     		ldr	r3, [r7]
 133 005c 5B79     		ldrb	r3, [r3, #5]	@ zero_extendqisi2
 134 005e 5B00     		lsls	r3, r3, #1
 269:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 135              		.loc 1 269 0
 136 0060 1343     		orrs	r3, r3, r2
 137 0062 FA68     		ldr	r2, [r7, #12]
 138 0064 1343     		orrs	r3, r3, r2
 139 0066 FB60     		str	r3, [r7, #12]
 273:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                         
 274:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Write to ADCx CR2 */
 275:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADCx->CR2 = tmpreg1;
 140              		.loc 1 275 0
 141 0068 7B68     		ldr	r3, [r7, #4]
 142 006a FA68     		ldr	r2, [r7, #12]
 143 006c 9A60     		str	r2, [r3, #8]
 276:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /*---------------------------- ADCx SQR1 Configuration -----------------*/
 277:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Get the ADCx SQR1 value */
 278:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 = ADCx->SQR1;
 144              		.loc 1 278 0
 145 006e 7B68     		ldr	r3, [r7, #4]
 146 0070 DB6A     		ldr	r3, [r3, #44]
 147 0072 FB60     		str	r3, [r7, #12]
 279:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 280:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Clear L bits */
 281:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 &= SQR1_L_RESET;
 148              		.loc 1 281 0
 149 0074 FB68     		ldr	r3, [r7, #12]
 150 0076 23F47003 		bic	r3, r3, #15728640
 151 007a FB60     		str	r3, [r7, #12]
 282:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 283:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Configure ADCx: regular channel sequence length */
 284:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set L bits according to ADC_NbrOfConversion value */
 285:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg2 |= (uint8_t)(ADC_InitStruct->ADC_NbrOfConversion - (uint8_t)1);
 152              		.loc 1 285 0
 153 007c 3B68     		ldr	r3, [r7]
 154 007e 1B7D     		ldrb	r3, [r3, #20]	@ zero_extendqisi2
 155 0080 013B     		subs	r3, r3, #1
 156 0082 DAB2     		uxtb	r2, r3
 157 0084 FB7A     		ldrb	r3, [r7, #11]
 158 0086 1343     		orrs	r3, r3, r2
 159 0088 FB72     		strb	r3, [r7, #11]
 286:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 |= ((uint32_t)tmpreg2 << 20);
 160              		.loc 1 286 0
 161 008a FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 162 008c 1B05     		lsls	r3, r3, #20
 163 008e FA68     		ldr	r2, [r7, #12]
 164 0090 1343     		orrs	r3, r3, r2
 165 0092 FB60     		str	r3, [r7, #12]
 287:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 288:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Write to ADCx SQR1 */
 289:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADCx->SQR1 = tmpreg1;
 166              		.loc 1 289 0
 167 0094 7B68     		ldr	r3, [r7, #4]
 168 0096 FA68     		ldr	r2, [r7, #12]
 169 0098 DA62     		str	r2, [r3, #44]
 290:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 170              		.loc 1 290 0
 171 009a 1437     		adds	r7, r7, #20
 172 009c BD46     		mov	sp, r7
 173              		@ sp needed
 174 009e 5DF8047B 		ldr	r7, [sp], #4
 175 00a2 7047     		bx	lr
 176              	.L4:
 177              		.align	2
 178              	.L3:
 179 00a4 FDF7FFC0 		.word	-1056966659
 180              		.cfi_endproc
 181              	.LFE111:
 183              		.section	.text.ADC_StructInit,"ax",%progbits
 184              		.align	2
 185              		.global	ADC_StructInit
 186              		.thumb
 187              		.thumb_func
 189              	ADC_StructInit:
 190              	.LFB112:
 291:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 292:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 293:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Fills each ADC_InitStruct member with its default value.
 294:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @note   This function is used to initialize the global features of the ADC ( 
 295:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         Resolution and Data Alignment), however, the rest of the configuration
 296:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         parameters are specific to the regular channels group (scan mode 
 297:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         activation, continuous mode activation, External trigger source and 
 298:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         edge, number of conversion in the regular channels group sequencer).  
 299:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure which will 
 300:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         be initialized.
 301:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
 302:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 303:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_StructInit(ADC_InitTypeDef* ADC_InitStruct)
 304:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 191              		.loc 1 304 0
 192              		.cfi_startproc
 193              		@ args = 0, pretend = 0, frame = 8
 194              		@ frame_needed = 1, uses_anonymous_args = 0
 195              		@ link register save eliminated.
 196 0000 80B4     		push	{r7}
 197              	.LCFI5:
 198              		.cfi_def_cfa_offset 4
 199              		.cfi_offset 7, -4
 200 0002 83B0     		sub	sp, sp, #12
 201              	.LCFI6:
 202              		.cfi_def_cfa_offset 16
 203 0004 00AF     		add	r7, sp, #0
 204              	.LCFI7:
 205              		.cfi_def_cfa_register 7
 206 0006 7860     		str	r0, [r7, #4]
 305:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Initialize the ADC_Mode member */
 306:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADC_InitStruct->ADC_Resolution = ADC_Resolution_12b;
 207              		.loc 1 306 0
 208 0008 7B68     		ldr	r3, [r7, #4]
 209 000a 0022     		movs	r2, #0
 210 000c 1A60     		str	r2, [r3]
 307:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 308:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* initialize the ADC_ScanConvMode member */
 309:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADC_InitStruct->ADC_ScanConvMode = DISABLE;
 211              		.loc 1 309 0
 212 000e 7B68     		ldr	r3, [r7, #4]
 213 0010 0022     		movs	r2, #0
 214 0012 1A71     		strb	r2, [r3, #4]
 310:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 311:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Initialize the ADC_ContinuousConvMode member */
 312:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADC_InitStruct->ADC_ContinuousConvMode = DISABLE;
 215              		.loc 1 312 0
 216 0014 7B68     		ldr	r3, [r7, #4]
 217 0016 0022     		movs	r2, #0
 218 0018 5A71     		strb	r2, [r3, #5]
 313:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 314:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Initialize the ADC_ExternalTrigConvEdge member */
 315:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADC_InitStruct->ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;
 219              		.loc 1 315 0
 220 001a 7B68     		ldr	r3, [r7, #4]
 221 001c 0022     		movs	r2, #0
 222 001e 9A60     		str	r2, [r3, #8]
 316:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 317:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Initialize the ADC_ExternalTrigConv member */
 318:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADC_InitStruct->ADC_ExternalTrigConv = ADC_ExternalTrigConv_T1_CC1;
 223              		.loc 1 318 0
 224 0020 7B68     		ldr	r3, [r7, #4]
 225 0022 0022     		movs	r2, #0
 226 0024 DA60     		str	r2, [r3, #12]
 319:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 320:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Initialize the ADC_DataAlign member */
 321:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADC_InitStruct->ADC_DataAlign = ADC_DataAlign_Right;
 227              		.loc 1 321 0
 228 0026 7B68     		ldr	r3, [r7, #4]
 229 0028 0022     		movs	r2, #0
 230 002a 1A61     		str	r2, [r3, #16]
 322:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 323:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Initialize the ADC_NbrOfConversion member */
 324:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADC_InitStruct->ADC_NbrOfConversion = 1;
 231              		.loc 1 324 0
 232 002c 7B68     		ldr	r3, [r7, #4]
 233 002e 0122     		movs	r2, #1
 234 0030 1A75     		strb	r2, [r3, #20]
 325:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 235              		.loc 1 325 0
 236 0032 0C37     		adds	r7, r7, #12
 237 0034 BD46     		mov	sp, r7
 238              		@ sp needed
 239 0036 5DF8047B 		ldr	r7, [sp], #4
 240 003a 7047     		bx	lr
 241              		.cfi_endproc
 242              	.LFE112:
 244              		.section	.text.ADC_CommonInit,"ax",%progbits
 245              		.align	2
 246              		.global	ADC_CommonInit
 247              		.thumb
 248              		.thumb_func
 250              	ADC_CommonInit:
 251              	.LFB113:
 326:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 327:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 328:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Initializes the ADCs peripherals according to the specified parameters 
 329:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         in the ADC_CommonInitStruct.
 330:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_CommonInitStruct: pointer to an ADC_CommonInitTypeDef structure 
 331:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         that contains the configuration information for  All ADCs peripherals.
 332:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
 333:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 334:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_CommonInit(ADC_CommonInitTypeDef* ADC_CommonInitStruct)
 335:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 252              		.loc 1 335 0
 253              		.cfi_startproc
 254              		@ args = 0, pretend = 0, frame = 16
 255              		@ frame_needed = 1, uses_anonymous_args = 0
 256              		@ link register save eliminated.
 257 0000 80B4     		push	{r7}
 258              	.LCFI8:
 259              		.cfi_def_cfa_offset 4
 260              		.cfi_offset 7, -4
 261 0002 85B0     		sub	sp, sp, #20
 262              	.LCFI9:
 263              		.cfi_def_cfa_offset 24
 264 0004 00AF     		add	r7, sp, #0
 265              	.LCFI10:
 266              		.cfi_def_cfa_register 7
 267 0006 7860     		str	r0, [r7, #4]
 336:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   uint32_t tmpreg1 = 0;
 268              		.loc 1 336 0
 269 0008 0023     		movs	r3, #0
 270 000a FB60     		str	r3, [r7, #12]
 337:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
 338:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_MODE(ADC_CommonInitStruct->ADC_Mode));
 339:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_PRESCALER(ADC_CommonInitStruct->ADC_Prescaler));
 340:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_DMA_ACCESS_MODE(ADC_CommonInitStruct->ADC_DMAAccessMode));
 341:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_SAMPLING_DELAY(ADC_CommonInitStruct->ADC_TwoSamplingDelay));
 342:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /*---------------------------- ADC CCR Configuration -----------------*/
 343:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Get the ADC CCR value */
 344:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 = ADC->CCR;
 271              		.loc 1 344 0
 272 000c 0E4B     		ldr	r3, .L7
 273 000e 5B68     		ldr	r3, [r3, #4]
 274 0010 FB60     		str	r3, [r7, #12]
 345:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 346:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Clear MULTI, DELAY, DMA and ADCPRE bits */
 347:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 &= CR_CLEAR_MASK;
 275              		.loc 1 347 0
 276 0012 FA68     		ldr	r2, [r7, #12]
 277 0014 0D4B     		ldr	r3, .L7+4
 278 0016 1340     		ands	r3, r3, r2
 279 0018 FB60     		str	r3, [r7, #12]
 348:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 349:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Configure ADCx: Multi mode, Delay between two sampling time, ADC prescaler,
 350:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      and DMA access mode for multimode */
 351:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set MULTI bits according to ADC_Mode value */
 352:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set ADCPRE bits according to ADC_Prescaler value */
 353:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set DMA bits according to ADC_DMAAccessMode value */
 354:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
 355:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 280              		.loc 1 355 0
 281 001a 7B68     		ldr	r3, [r7, #4]
 282 001c 1A68     		ldr	r2, [r3]
 356:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                         ADC_CommonInitStruct->ADC_Prescaler | 
 283              		.loc 1 356 0
 284 001e 7B68     		ldr	r3, [r7, #4]
 285 0020 5B68     		ldr	r3, [r3, #4]
 355:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 286              		.loc 1 355 0
 287 0022 1A43     		orrs	r2, r2, r3
 357:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                         ADC_CommonInitStruct->ADC_DMAAccessMode | 
 288              		.loc 1 357 0
 289 0024 7B68     		ldr	r3, [r7, #4]
 290 0026 9B68     		ldr	r3, [r3, #8]
 356:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                         ADC_CommonInitStruct->ADC_Prescaler | 
 291              		.loc 1 356 0
 292 0028 1A43     		orrs	r2, r2, r3
 358:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                         ADC_CommonInitStruct->ADC_TwoSamplingDelay);
 293              		.loc 1 358 0
 294 002a 7B68     		ldr	r3, [r7, #4]
 295 002c DB68     		ldr	r3, [r3, #12]
 355:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 296              		.loc 1 355 0
 297 002e 1343     		orrs	r3, r3, r2
 298 0030 FA68     		ldr	r2, [r7, #12]
 299 0032 1343     		orrs	r3, r3, r2
 300 0034 FB60     		str	r3, [r7, #12]
 359:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                         
 360:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Write to ADC CCR */
 361:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADC->CCR = tmpreg1;
 301              		.loc 1 361 0
 302 0036 044B     		ldr	r3, .L7
 303 0038 FA68     		ldr	r2, [r7, #12]
 304 003a 5A60     		str	r2, [r3, #4]
 362:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 305              		.loc 1 362 0
 306 003c 1437     		adds	r7, r7, #20
 307 003e BD46     		mov	sp, r7
 308              		@ sp needed
 309 0040 5DF8047B 		ldr	r7, [sp], #4
 310 0044 7047     		bx	lr
 311              	.L8:
 312 0046 00BF     		.align	2
 313              	.L7:
 314 0048 00230140 		.word	1073816320
 315 004c E030FCFF 		.word	-249632
 316              		.cfi_endproc
 317              	.LFE113:
 319              		.section	.text.ADC_CommonStructInit,"ax",%progbits
 320              		.align	2
 321              		.global	ADC_CommonStructInit
 322              		.thumb
 323              		.thumb_func
 325              	ADC_CommonStructInit:
 326              	.LFB114:
 363:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 364:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 365:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Fills each ADC_CommonInitStruct member with its default value.
 366:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_CommonInitStruct: pointer to an ADC_CommonInitTypeDef structure
 367:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         which will be initialized.
 368:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
 369:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 370:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_CommonStructInit(ADC_CommonInitTypeDef* ADC_CommonInitStruct)
 371:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 327              		.loc 1 371 0
 328              		.cfi_startproc
 329              		@ args = 0, pretend = 0, frame = 8
 330              		@ frame_needed = 1, uses_anonymous_args = 0
 331              		@ link register save eliminated.
 332 0000 80B4     		push	{r7}
 333              	.LCFI11:
 334              		.cfi_def_cfa_offset 4
 335              		.cfi_offset 7, -4
 336 0002 83B0     		sub	sp, sp, #12
 337              	.LCFI12:
 338              		.cfi_def_cfa_offset 16
 339 0004 00AF     		add	r7, sp, #0
 340              	.LCFI13:
 341              		.cfi_def_cfa_register 7
 342 0006 7860     		str	r0, [r7, #4]
 372:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Initialize the ADC_Mode member */
 373:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADC_CommonInitStruct->ADC_Mode = ADC_Mode_Independent;
 343              		.loc 1 373 0
 344 0008 7B68     		ldr	r3, [r7, #4]
 345 000a 0022     		movs	r2, #0
 346 000c 1A60     		str	r2, [r3]
 374:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 375:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* initialize the ADC_Prescaler member */
 376:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADC_CommonInitStruct->ADC_Prescaler = ADC_Prescaler_Div2;
 347              		.loc 1 376 0
 348 000e 7B68     		ldr	r3, [r7, #4]
 349 0010 0022     		movs	r2, #0
 350 0012 5A60     		str	r2, [r3, #4]
 377:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 378:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Initialize the ADC_DMAAccessMode member */
 379:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADC_CommonInitStruct->ADC_DMAAccessMode = ADC_DMAAccessMode_Disabled;
 351              		.loc 1 379 0
 352 0014 7B68     		ldr	r3, [r7, #4]
 353 0016 0022     		movs	r2, #0
 354 0018 9A60     		str	r2, [r3, #8]
 380:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 381:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Initialize the ADC_TwoSamplingDelay member */
 382:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADC_CommonInitStruct->ADC_TwoSamplingDelay = ADC_TwoSamplingDelay_5Cycles;
 355              		.loc 1 382 0
 356 001a 7B68     		ldr	r3, [r7, #4]
 357 001c 0022     		movs	r2, #0
 358 001e DA60     		str	r2, [r3, #12]
 383:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 359              		.loc 1 383 0
 360 0020 0C37     		adds	r7, r7, #12
 361 0022 BD46     		mov	sp, r7
 362              		@ sp needed
 363 0024 5DF8047B 		ldr	r7, [sp], #4
 364 0028 7047     		bx	lr
 365              		.cfi_endproc
 366              	.LFE114:
 368 002a 00BF     		.section	.text.ADC_Cmd,"ax",%progbits
 369              		.align	2
 370              		.global	ADC_Cmd
 371              		.thumb
 372              		.thumb_func
 374              	ADC_Cmd:
 375              	.LFB115:
 384:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 385:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 386:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Enables or disables the specified ADC peripheral.
 387:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 388:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  NewState: new state of the ADCx peripheral. 
 389:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
 390:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
 391:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 392:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
 393:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 376              		.loc 1 393 0
 377              		.cfi_startproc
 378              		@ args = 0, pretend = 0, frame = 8
 379              		@ frame_needed = 1, uses_anonymous_args = 0
 380              		@ link register save eliminated.
 381 0000 80B4     		push	{r7}
 382              	.LCFI14:
 383              		.cfi_def_cfa_offset 4
 384              		.cfi_offset 7, -4
 385 0002 83B0     		sub	sp, sp, #12
 386              	.LCFI15:
 387              		.cfi_def_cfa_offset 16
 388 0004 00AF     		add	r7, sp, #0
 389              	.LCFI16:
 390              		.cfi_def_cfa_register 7
 391 0006 7860     		str	r0, [r7, #4]
 392 0008 0B46     		mov	r3, r1
 393 000a FB70     		strb	r3, [r7, #3]
 394:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
 395:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 396:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 397:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 394              		.loc 1 397 0
 395 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 396 000e 002B     		cmp	r3, #0
 397 0010 06D0     		beq	.L11
 398:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 399:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Set the ADON bit to wake up the ADC from power down mode */
 400:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
 398              		.loc 1 400 0
 399 0012 7B68     		ldr	r3, [r7, #4]
 400 0014 9B68     		ldr	r3, [r3, #8]
 401 0016 43F00102 		orr	r2, r3, #1
 402 001a 7B68     		ldr	r3, [r7, #4]
 403 001c 9A60     		str	r2, [r3, #8]
 404 001e 05E0     		b	.L10
 405              	.L11:
 401:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 402:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
 403:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 404:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Disable the selected ADC peripheral */
 405:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
 406              		.loc 1 405 0
 407 0020 7B68     		ldr	r3, [r7, #4]
 408 0022 9B68     		ldr	r3, [r3, #8]
 409 0024 23F00102 		bic	r2, r3, #1
 410 0028 7B68     		ldr	r3, [r7, #4]
 411 002a 9A60     		str	r2, [r3, #8]
 412              	.L10:
 406:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 407:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 413              		.loc 1 407 0
 414 002c 0C37     		adds	r7, r7, #12
 415 002e BD46     		mov	sp, r7
 416              		@ sp needed
 417 0030 5DF8047B 		ldr	r7, [sp], #4
 418 0034 7047     		bx	lr
 419              		.cfi_endproc
 420              	.LFE115:
 422 0036 00BF     		.section	.text.ADC_AnalogWatchdogCmd,"ax",%progbits
 423              		.align	2
 424              		.global	ADC_AnalogWatchdogCmd
 425              		.thumb
 426              		.thumb_func
 428              	ADC_AnalogWatchdogCmd:
 429              	.LFB116:
 408:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 409:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @}
 410:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 411:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 412:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /** @defgroup ADC_Group2 Analog Watchdog configuration functions
 413:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  *  @brief    Analog Watchdog configuration functions 
 414:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  *
 415:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** @verbatim   
 416:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  ===============================================================================
 417:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                     Analog Watchdog configuration functions
 418:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  ===============================================================================  
 419:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 420:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   This section provides functions allowing to configure the Analog Watchdog
 421:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   (AWD) feature in the ADC.
 422:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 423:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   A typical configuration Analog Watchdog is done following these steps :
 424:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    1. the ADC guarded channel(s) is (are) selected using the 
 425:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****       ADC_AnalogWatchdogSingleChannelConfig() function.
 426:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    2. The Analog watchdog lower and higher threshold are configured using the  
 427:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      ADC_AnalogWatchdogThresholdsConfig() function.
 428:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    3. The Analog watchdog is enabled and configured to enable the check, on one
 429:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****       or more channels, using the  ADC_AnalogWatchdogCmd() function.
 430:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 431:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** @endverbatim
 432:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @{
 433:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 434:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 435:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 436:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Enables or disables the analog watchdog on single/all regular or 
 437:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         injected channels
 438:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 439:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_AnalogWatchdog: the ADC analog watchdog configuration.
 440:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         This parameter can be one of the following values:
 441:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_AnalogWatchdog_SingleRegEnable: Analog watchdog on a single regular channel
 442:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_AnalogWatchdog_SingleInjecEnable: Analog watchdog on a single injected chan
 443:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_AnalogWatchdog_SingleRegOrInjecEnable: Analog watchdog on a single regular 
 444:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_AnalogWatchdog_AllRegEnable: Analog watchdog on all regular channel
 445:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_AnalogWatchdog_AllInjecEnable: Analog watchdog on all injected channel
 446:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_AnalogWatchdog_AllRegAllInjecEnable: Analog watchdog on all regular and inj
 447:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_AnalogWatchdog_None: No channel guarded by the analog watchdog
 448:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None	  
 449:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 450:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_AnalogWatchdogCmd(ADC_TypeDef* ADCx, uint32_t ADC_AnalogWatchdog)
 451:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 430              		.loc 1 451 0
 431              		.cfi_startproc
 432              		@ args = 0, pretend = 0, frame = 16
 433              		@ frame_needed = 1, uses_anonymous_args = 0
 434              		@ link register save eliminated.
 435 0000 80B4     		push	{r7}
 436              	.LCFI17:
 437              		.cfi_def_cfa_offset 4
 438              		.cfi_offset 7, -4
 439 0002 85B0     		sub	sp, sp, #20
 440              	.LCFI18:
 441              		.cfi_def_cfa_offset 24
 442 0004 00AF     		add	r7, sp, #0
 443              	.LCFI19:
 444              		.cfi_def_cfa_register 7
 445 0006 7860     		str	r0, [r7, #4]
 446 0008 3960     		str	r1, [r7]
 452:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   uint32_t tmpreg = 0;
 447              		.loc 1 452 0
 448 000a 0023     		movs	r3, #0
 449 000c FB60     		str	r3, [r7, #12]
 453:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
 454:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 455:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ANALOG_WATCHDOG(ADC_AnalogWatchdog));
 456:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 457:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Get the old register value */
 458:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg = ADCx->CR1;
 450              		.loc 1 458 0
 451 000e 7B68     		ldr	r3, [r7, #4]
 452 0010 5B68     		ldr	r3, [r3, #4]
 453 0012 FB60     		str	r3, [r7, #12]
 459:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 460:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Clear AWDEN, JAWDEN and AWDSGL bits */
 461:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg &= CR1_AWDMode_RESET;
 454              		.loc 1 461 0
 455 0014 FB68     		ldr	r3, [r7, #12]
 456 0016 23F44003 		bic	r3, r3, #12582912
 457 001a 23F40073 		bic	r3, r3, #512
 458 001e FB60     		str	r3, [r7, #12]
 462:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 463:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set the analog watchdog enable mode */
 464:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg |= ADC_AnalogWatchdog;
 459              		.loc 1 464 0
 460 0020 FA68     		ldr	r2, [r7, #12]
 461 0022 3B68     		ldr	r3, [r7]
 462 0024 1343     		orrs	r3, r3, r2
 463 0026 FB60     		str	r3, [r7, #12]
 465:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 466:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Store the new register value */
 467:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADCx->CR1 = tmpreg;
 464              		.loc 1 467 0
 465 0028 7B68     		ldr	r3, [r7, #4]
 466 002a FA68     		ldr	r2, [r7, #12]
 467 002c 5A60     		str	r2, [r3, #4]
 468:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 468              		.loc 1 468 0
 469 002e 1437     		adds	r7, r7, #20
 470 0030 BD46     		mov	sp, r7
 471              		@ sp needed
 472 0032 5DF8047B 		ldr	r7, [sp], #4
 473 0036 7047     		bx	lr
 474              		.cfi_endproc
 475              	.LFE116:
 477              		.section	.text.ADC_AnalogWatchdogThresholdsConfig,"ax",%progbits
 478              		.align	2
 479              		.global	ADC_AnalogWatchdogThresholdsConfig
 480              		.thumb
 481              		.thumb_func
 483              	ADC_AnalogWatchdogThresholdsConfig:
 484              	.LFB117:
 469:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 470:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 471:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Configures the high and low thresholds of the analog watchdog.
 472:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 473:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  HighThreshold: the ADC analog watchdog High threshold value.
 474:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter must be a 12-bit value.
 475:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  LowThreshold:  the ADC analog watchdog Low threshold value.
 476:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter must be a 12-bit value.
 477:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
 478:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 479:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_AnalogWatchdogThresholdsConfig(ADC_TypeDef* ADCx, uint16_t HighThreshold,
 480:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                                         uint16_t LowThreshold)
 481:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 485              		.loc 1 481 0
 486              		.cfi_startproc
 487              		@ args = 0, pretend = 0, frame = 8
 488              		@ frame_needed = 1, uses_anonymous_args = 0
 489              		@ link register save eliminated.
 490 0000 80B4     		push	{r7}
 491              	.LCFI20:
 492              		.cfi_def_cfa_offset 4
 493              		.cfi_offset 7, -4
 494 0002 83B0     		sub	sp, sp, #12
 495              	.LCFI21:
 496              		.cfi_def_cfa_offset 16
 497 0004 00AF     		add	r7, sp, #0
 498              	.LCFI22:
 499              		.cfi_def_cfa_register 7
 500 0006 7860     		str	r0, [r7, #4]
 501 0008 1346     		mov	r3, r2
 502 000a 0A46     		mov	r2, r1	@ movhi
 503 000c 7A80     		strh	r2, [r7, #2]	@ movhi
 504 000e 3B80     		strh	r3, [r7]	@ movhi
 482:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
 483:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 484:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_THRESHOLD(HighThreshold));
 485:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_THRESHOLD(LowThreshold));
 486:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 487:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set the ADCx high threshold */
 488:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADCx->HTR = HighThreshold;
 505              		.loc 1 488 0
 506 0010 7A88     		ldrh	r2, [r7, #2]
 507 0012 7B68     		ldr	r3, [r7, #4]
 508 0014 5A62     		str	r2, [r3, #36]
 489:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 490:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set the ADCx low threshold */
 491:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADCx->LTR = LowThreshold;
 509              		.loc 1 491 0
 510 0016 3A88     		ldrh	r2, [r7]
 511 0018 7B68     		ldr	r3, [r7, #4]
 512 001a 9A62     		str	r2, [r3, #40]
 492:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 513              		.loc 1 492 0
 514 001c 0C37     		adds	r7, r7, #12
 515 001e BD46     		mov	sp, r7
 516              		@ sp needed
 517 0020 5DF8047B 		ldr	r7, [sp], #4
 518 0024 7047     		bx	lr
 519              		.cfi_endproc
 520              	.LFE117:
 522 0026 00BF     		.section	.text.ADC_AnalogWatchdogSingleChannelConfig,"ax",%progbits
 523              		.align	2
 524              		.global	ADC_AnalogWatchdogSingleChannelConfig
 525              		.thumb
 526              		.thumb_func
 528              	ADC_AnalogWatchdogSingleChannelConfig:
 529              	.LFB118:
 493:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 494:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 495:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Configures the analog watchdog guarded single channel
 496:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 497:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_Channel: the ADC channel to configure for the analog watchdog. 
 498:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
 499:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_0: ADC Channel0 selected
 500:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_1: ADC Channel1 selected
 501:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_2: ADC Channel2 selected
 502:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_3: ADC Channel3 selected
 503:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_4: ADC Channel4 selected
 504:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_5: ADC Channel5 selected
 505:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_6: ADC Channel6 selected
 506:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_7: ADC Channel7 selected
 507:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_8: ADC Channel8 selected
 508:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_9: ADC Channel9 selected
 509:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_10: ADC Channel10 selected
 510:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_11: ADC Channel11 selected
 511:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_12: ADC Channel12 selected
 512:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_13: ADC Channel13 selected
 513:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_14: ADC Channel14 selected
 514:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_15: ADC Channel15 selected
 515:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_16: ADC Channel16 selected
 516:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_17: ADC Channel17 selected
 517:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_18: ADC Channel18 selected
 518:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
 519:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 520:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_AnalogWatchdogSingleChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel)
 521:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 530              		.loc 1 521 0
 531              		.cfi_startproc
 532              		@ args = 0, pretend = 0, frame = 16
 533              		@ frame_needed = 1, uses_anonymous_args = 0
 534              		@ link register save eliminated.
 535 0000 80B4     		push	{r7}
 536              	.LCFI23:
 537              		.cfi_def_cfa_offset 4
 538              		.cfi_offset 7, -4
 539 0002 85B0     		sub	sp, sp, #20
 540              	.LCFI24:
 541              		.cfi_def_cfa_offset 24
 542 0004 00AF     		add	r7, sp, #0
 543              	.LCFI25:
 544              		.cfi_def_cfa_register 7
 545 0006 7860     		str	r0, [r7, #4]
 546 0008 0B46     		mov	r3, r1
 547 000a FB70     		strb	r3, [r7, #3]
 522:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   uint32_t tmpreg = 0;
 548              		.loc 1 522 0
 549 000c 0023     		movs	r3, #0
 550 000e FB60     		str	r3, [r7, #12]
 523:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
 524:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 525:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_CHANNEL(ADC_Channel));
 526:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 527:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Get the old register value */
 528:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg = ADCx->CR1;
 551              		.loc 1 528 0
 552 0010 7B68     		ldr	r3, [r7, #4]
 553 0012 5B68     		ldr	r3, [r3, #4]
 554 0014 FB60     		str	r3, [r7, #12]
 529:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 530:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Clear the Analog watchdog channel select bits */
 531:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg &= CR1_AWDCH_RESET;
 555              		.loc 1 531 0
 556 0016 FB68     		ldr	r3, [r7, #12]
 557 0018 23F01F03 		bic	r3, r3, #31
 558 001c FB60     		str	r3, [r7, #12]
 532:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 533:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set the Analog watchdog channel */
 534:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg |= ADC_Channel;
 559              		.loc 1 534 0
 560 001e FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 561 0020 FA68     		ldr	r2, [r7, #12]
 562 0022 1343     		orrs	r3, r3, r2
 563 0024 FB60     		str	r3, [r7, #12]
 535:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 536:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Store the new register value */
 537:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADCx->CR1 = tmpreg;
 564              		.loc 1 537 0
 565 0026 7B68     		ldr	r3, [r7, #4]
 566 0028 FA68     		ldr	r2, [r7, #12]
 567 002a 5A60     		str	r2, [r3, #4]
 538:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 568              		.loc 1 538 0
 569 002c 1437     		adds	r7, r7, #20
 570 002e BD46     		mov	sp, r7
 571              		@ sp needed
 572 0030 5DF8047B 		ldr	r7, [sp], #4
 573 0034 7047     		bx	lr
 574              		.cfi_endproc
 575              	.LFE118:
 577 0036 00BF     		.section	.text.ADC_TempSensorVrefintCmd,"ax",%progbits
 578              		.align	2
 579              		.global	ADC_TempSensorVrefintCmd
 580              		.thumb
 581              		.thumb_func
 583              	ADC_TempSensorVrefintCmd:
 584              	.LFB119:
 539:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 540:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @}
 541:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 542:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 543:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /** @defgroup ADC_Group3 Temperature Sensor, Vrefint (Voltage Reference internal) 
 544:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  *            and VBAT (Voltage BATtery) management functions
 545:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  *  @brief   Temperature Sensor, Vrefint and VBAT management functions 
 546:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  *
 547:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** @verbatim   
 548:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  ===============================================================================
 549:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                Temperature Sensor, Vrefint and VBAT management functions
 550:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  ===============================================================================  
 551:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 552:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   This section provides functions allowing to enable/ disable the internal 
 553:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   connections between the ADC and the Temperature Sensor, the Vrefint and the
 554:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   Vbat sources.
 555:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      
 556:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   A typical configuration to get the Temperature sensor and Vrefint channels 
 557:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   voltages is done following these steps :
 558:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    1. Enable the internal connection of Temperature sensor and Vrefint sources 
 559:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****       with the ADC channels using ADC_TempSensorVrefintCmd() function. 
 560:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    2. Select the ADC_Channel_TempSensor and/or ADC_Channel_Vrefint using 
 561:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****       ADC_RegularChannelConfig() or  ADC_InjectedChannelConfig() functions 
 562:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    3. Get the voltage values, using ADC_GetConversionValue() or  
 563:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****       ADC_GetInjectedConversionValue().
 564:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 565:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   A typical configuration to get the VBAT channel voltage is done following 
 566:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   these steps :
 567:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    1. Enable the internal connection of VBAT source with the ADC channel using 
 568:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****       ADC_VBATCmd() function. 
 569:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    2. Select the ADC_Channel_Vbat using ADC_RegularChannelConfig() or  
 570:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****       ADC_InjectedChannelConfig() functions 
 571:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    3. Get the voltage value, using ADC_GetConversionValue() or  
 572:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****       ADC_GetInjectedConversionValue().
 573:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  
 574:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** @endverbatim
 575:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @{
 576:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 577:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 578:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 579:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 580:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Enables or disables the temperature sensor and Vrefint channels.
 581:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  NewState: new state of the temperature sensor and Vrefint channels.
 582:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
 583:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
 584:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 585:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_TempSensorVrefintCmd(FunctionalState NewState)                
 586:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 585              		.loc 1 586 0
 586              		.cfi_startproc
 587              		@ args = 0, pretend = 0, frame = 8
 588              		@ frame_needed = 1, uses_anonymous_args = 0
 589              		@ link register save eliminated.
 590 0000 80B4     		push	{r7}
 591              	.LCFI26:
 592              		.cfi_def_cfa_offset 4
 593              		.cfi_offset 7, -4
 594 0002 83B0     		sub	sp, sp, #12
 595              	.LCFI27:
 596              		.cfi_def_cfa_offset 16
 597 0004 00AF     		add	r7, sp, #0
 598              	.LCFI28:
 599              		.cfi_def_cfa_register 7
 600 0006 0346     		mov	r3, r0
 601 0008 FB71     		strb	r3, [r7, #7]
 587:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
 588:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 589:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 602              		.loc 1 589 0
 603 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 604 000c 002B     		cmp	r3, #0
 605 000e 06D0     		beq	.L17
 590:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 591:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Enable the temperature sensor and Vrefint channel*/
 592:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADC->CCR |= (uint32_t)ADC_CCR_TSVREFE;
 606              		.loc 1 592 0
 607 0010 084B     		ldr	r3, .L19
 608 0012 084A     		ldr	r2, .L19
 609 0014 5268     		ldr	r2, [r2, #4]
 610 0016 42F40002 		orr	r2, r2, #8388608
 611 001a 5A60     		str	r2, [r3, #4]
 612 001c 05E0     		b	.L16
 613              	.L17:
 593:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 594:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
 595:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 596:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Disable the temperature sensor and Vrefint channel*/
 597:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADC->CCR &= (uint32_t)(~ADC_CCR_TSVREFE);
 614              		.loc 1 597 0
 615 001e 054B     		ldr	r3, .L19
 616 0020 044A     		ldr	r2, .L19
 617 0022 5268     		ldr	r2, [r2, #4]
 618 0024 22F40002 		bic	r2, r2, #8388608
 619 0028 5A60     		str	r2, [r3, #4]
 620              	.L16:
 598:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 599:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 621              		.loc 1 599 0
 622 002a 0C37     		adds	r7, r7, #12
 623 002c BD46     		mov	sp, r7
 624              		@ sp needed
 625 002e 5DF8047B 		ldr	r7, [sp], #4
 626 0032 7047     		bx	lr
 627              	.L20:
 628              		.align	2
 629              	.L19:
 630 0034 00230140 		.word	1073816320
 631              		.cfi_endproc
 632              	.LFE119:
 634              		.section	.text.ADC_VBATCmd,"ax",%progbits
 635              		.align	2
 636              		.global	ADC_VBATCmd
 637              		.thumb
 638              		.thumb_func
 640              	ADC_VBATCmd:
 641              	.LFB120:
 600:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 601:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 602:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Enables or disables the VBAT (Voltage Battery) channel.
 603:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  NewState: new state of the VBAT channel.
 604:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
 605:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
 606:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 607:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_VBATCmd(FunctionalState NewState)                             
 608:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 642              		.loc 1 608 0
 643              		.cfi_startproc
 644              		@ args = 0, pretend = 0, frame = 8
 645              		@ frame_needed = 1, uses_anonymous_args = 0
 646              		@ link register save eliminated.
 647 0000 80B4     		push	{r7}
 648              	.LCFI29:
 649              		.cfi_def_cfa_offset 4
 650              		.cfi_offset 7, -4
 651 0002 83B0     		sub	sp, sp, #12
 652              	.LCFI30:
 653              		.cfi_def_cfa_offset 16
 654 0004 00AF     		add	r7, sp, #0
 655              	.LCFI31:
 656              		.cfi_def_cfa_register 7
 657 0006 0346     		mov	r3, r0
 658 0008 FB71     		strb	r3, [r7, #7]
 609:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
 610:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 611:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 659              		.loc 1 611 0
 660 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 661 000c 002B     		cmp	r3, #0
 662 000e 06D0     		beq	.L22
 612:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 613:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Enable the VBAT channel*/
 614:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADC->CCR |= (uint32_t)ADC_CCR_VBATE;
 663              		.loc 1 614 0
 664 0010 084B     		ldr	r3, .L24
 665 0012 084A     		ldr	r2, .L24
 666 0014 5268     		ldr	r2, [r2, #4]
 667 0016 42F48002 		orr	r2, r2, #4194304
 668 001a 5A60     		str	r2, [r3, #4]
 669 001c 05E0     		b	.L21
 670              	.L22:
 615:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 616:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
 617:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 618:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Disable the VBAT channel*/
 619:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADC->CCR &= (uint32_t)(~ADC_CCR_VBATE);
 671              		.loc 1 619 0
 672 001e 054B     		ldr	r3, .L24
 673 0020 044A     		ldr	r2, .L24
 674 0022 5268     		ldr	r2, [r2, #4]
 675 0024 22F48002 		bic	r2, r2, #4194304
 676 0028 5A60     		str	r2, [r3, #4]
 677              	.L21:
 620:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 621:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 678              		.loc 1 621 0
 679 002a 0C37     		adds	r7, r7, #12
 680 002c BD46     		mov	sp, r7
 681              		@ sp needed
 682 002e 5DF8047B 		ldr	r7, [sp], #4
 683 0032 7047     		bx	lr
 684              	.L25:
 685              		.align	2
 686              	.L24:
 687 0034 00230140 		.word	1073816320
 688              		.cfi_endproc
 689              	.LFE120:
 691              		.section	.text.ADC_RegularChannelConfig,"ax",%progbits
 692              		.align	2
 693              		.global	ADC_RegularChannelConfig
 694              		.thumb
 695              		.thumb_func
 697              	ADC_RegularChannelConfig:
 698              	.LFB121:
 622:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 623:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 624:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @}
 625:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 626:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 627:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /** @defgroup ADC_Group4 Regular Channels Configuration functions
 628:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  *  @brief   Regular Channels Configuration functions 
 629:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  *
 630:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** @verbatim   
 631:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  ===============================================================================
 632:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                   Regular Channels Configuration functions
 633:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  ===============================================================================  
 634:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 635:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   This section provides functions allowing to manage the ADC's regular channels,
 636:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   it is composed of 2 sub sections : 
 637:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 638:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   1. Configuration and management functions for regular channels: This subsection 
 639:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      provides functions allowing to configure the ADC regular channels :    
 640:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****           - Configure the rank in the regular group sequencer for each channel
 641:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****           - Configure the sampling time for each channel
 642:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****           - select the conversion Trigger for regular channels
 643:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****           - select the desired EOC event behavior configuration
 644:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****           - Activate the continuous Mode  (*)
 645:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****           - Activate the Discontinuous Mode 
 646:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      Please Note that the following features for regular channels are configurated
 647:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      using the ADC_Init() function : 
 648:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****           - scan mode activation 
 649:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****           - continuous mode activation (**) 
 650:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****           - External trigger source  
 651:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****           - External trigger edge 
 652:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****           - number of conversion in the regular channels group sequencer.
 653:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      
 654:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      @note (*) and (**) are performing the same configuration
 655:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      
 656:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   2. Get the conversion data: This subsection provides an important function in 
 657:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      the ADC peripheral since it returns the converted data of the current 
 658:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      regular channel. When the Conversion value is read, the EOC Flag is 
 659:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      automatically cleared.
 660:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      
 661:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      @note For multi ADC mode, the last ADC1, ADC2 and ADC3 regular conversions 
 662:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****            results data (in the selected multi mode) can be returned in the same 
 663:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****            time using ADC_GetMultiModeConversionValue() function. 
 664:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****        
 665:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 666:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** @endverbatim
 667:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @{
 668:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 669:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 670:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Configures for the selected ADC regular channel its corresponding
 671:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         rank in the sequencer and its sample time.
 672:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 673:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_Channel: the ADC channel to configure. 
 674:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
 675:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_0: ADC Channel0 selected
 676:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_1: ADC Channel1 selected
 677:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_2: ADC Channel2 selected
 678:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_3: ADC Channel3 selected
 679:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_4: ADC Channel4 selected
 680:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_5: ADC Channel5 selected
 681:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_6: ADC Channel6 selected
 682:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_7: ADC Channel7 selected
 683:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_8: ADC Channel8 selected
 684:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_9: ADC Channel9 selected
 685:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_10: ADC Channel10 selected
 686:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_11: ADC Channel11 selected
 687:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_12: ADC Channel12 selected
 688:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_13: ADC Channel13 selected
 689:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_14: ADC Channel14 selected
 690:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_15: ADC Channel15 selected
 691:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_16: ADC Channel16 selected
 692:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_17: ADC Channel17 selected
 693:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_18: ADC Channel18 selected                       
 694:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  Rank: The rank in the regular group sequencer.
 695:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter must be between 1 to 16.
 696:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_SampleTime: The sample time value to be set for the selected channel. 
 697:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
 698:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_3Cycles: Sample time equal to 3 cycles
 699:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_15Cycles: Sample time equal to 15 cycles
 700:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_28Cycles: Sample time equal to 28 cycles
 701:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_56Cycles: Sample time equal to 56 cycles	
 702:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_84Cycles: Sample time equal to 84 cycles	
 703:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_112Cycles: Sample time equal to 112 cycles	
 704:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_144Cycles: Sample time equal to 144 cycles	
 705:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_480Cycles: Sample time equal to 480 cycles	
 706:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
 707:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 708:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_Sam
 709:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 699              		.loc 1 709 0
 700              		.cfi_startproc
 701              		@ args = 0, pretend = 0, frame = 16
 702              		@ frame_needed = 1, uses_anonymous_args = 0
 703              		@ link register save eliminated.
 704 0000 80B4     		push	{r7}
 705              	.LCFI32:
 706              		.cfi_def_cfa_offset 4
 707              		.cfi_offset 7, -4
 708 0002 85B0     		sub	sp, sp, #20
 709              	.LCFI33:
 710              		.cfi_def_cfa_offset 24
 711 0004 00AF     		add	r7, sp, #0
 712              	.LCFI34:
 713              		.cfi_def_cfa_register 7
 714 0006 7860     		str	r0, [r7, #4]
 715 0008 F970     		strb	r1, [r7, #3]
 716 000a BA70     		strb	r2, [r7, #2]
 717 000c 7B70     		strb	r3, [r7, #1]
 710:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   uint32_t tmpreg1 = 0, tmpreg2 = 0;
 718              		.loc 1 710 0
 719 000e 0023     		movs	r3, #0
 720 0010 FB60     		str	r3, [r7, #12]
 721 0012 0023     		movs	r3, #0
 722 0014 BB60     		str	r3, [r7, #8]
 711:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
 712:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 713:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_CHANNEL(ADC_Channel));
 714:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_REGULAR_RANK(Rank));
 715:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
 716:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 717:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
 718:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (ADC_Channel > ADC_Channel_9)
 723              		.loc 1 718 0
 724 0016 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 725 0018 092B     		cmp	r3, #9
 726 001a 23D9     		bls	.L27
 719:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 720:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Get the old register value */
 721:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 = ADCx->SMPR1;
 727              		.loc 1 721 0
 728 001c 7B68     		ldr	r3, [r7, #4]
 729 001e DB68     		ldr	r3, [r3, #12]
 730 0020 FB60     		str	r3, [r7, #12]
 722:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 723:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Calculate the mask to clear */
 724:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg2 = SMPR1_SMP_SET << (3 * (ADC_Channel - 10));
 731              		.loc 1 724 0
 732 0022 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 733 0024 A3F10A02 		sub	r2, r3, #10
 734 0028 1346     		mov	r3, r2
 735 002a 5B00     		lsls	r3, r3, #1
 736 002c 1344     		add	r3, r3, r2
 737 002e 0722     		movs	r2, #7
 738 0030 02FA03F3 		lsl	r3, r2, r3
 739 0034 BB60     		str	r3, [r7, #8]
 725:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 726:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Clear the old sample time */
 727:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 &= ~tmpreg2;
 740              		.loc 1 727 0
 741 0036 BB68     		ldr	r3, [r7, #8]
 742 0038 DB43     		mvns	r3, r3
 743 003a FA68     		ldr	r2, [r7, #12]
 744 003c 1340     		ands	r3, r3, r2
 745 003e FB60     		str	r3, [r7, #12]
 728:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 729:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Calculate the mask to set */
 730:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 746              		.loc 1 730 0
 747 0040 7978     		ldrb	r1, [r7, #1]	@ zero_extendqisi2
 748 0042 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 749 0044 A3F10A02 		sub	r2, r3, #10
 750 0048 1346     		mov	r3, r2
 751 004a 5B00     		lsls	r3, r3, #1
 752 004c 1344     		add	r3, r3, r2
 753 004e 01FA03F3 		lsl	r3, r1, r3
 754 0052 BB60     		str	r3, [r7, #8]
 731:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 732:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Set the new sample time */
 733:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 |= tmpreg2;
 755              		.loc 1 733 0
 756 0054 FA68     		ldr	r2, [r7, #12]
 757 0056 BB68     		ldr	r3, [r7, #8]
 758 0058 1343     		orrs	r3, r3, r2
 759 005a FB60     		str	r3, [r7, #12]
 734:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 735:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Store the new register value */
 736:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->SMPR1 = tmpreg1;
 760              		.loc 1 736 0
 761 005c 7B68     		ldr	r3, [r7, #4]
 762 005e FA68     		ldr	r2, [r7, #12]
 763 0060 DA60     		str	r2, [r3, #12]
 764 0062 1EE0     		b	.L28
 765              	.L27:
 737:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 738:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else /* ADC_Channel include in ADC_Channel_[0..9] */
 739:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 740:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Get the old register value */
 741:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 = ADCx->SMPR2;
 766              		.loc 1 741 0
 767 0064 7B68     		ldr	r3, [r7, #4]
 768 0066 1B69     		ldr	r3, [r3, #16]
 769 0068 FB60     		str	r3, [r7, #12]
 742:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 743:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Calculate the mask to clear */
 744:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
 770              		.loc 1 744 0
 771 006a FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 772 006c 1346     		mov	r3, r2
 773 006e 5B00     		lsls	r3, r3, #1
 774 0070 1344     		add	r3, r3, r2
 775 0072 0722     		movs	r2, #7
 776 0074 02FA03F3 		lsl	r3, r2, r3
 777 0078 BB60     		str	r3, [r7, #8]
 745:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 746:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Clear the old sample time */
 747:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 &= ~tmpreg2;
 778              		.loc 1 747 0
 779 007a BB68     		ldr	r3, [r7, #8]
 780 007c DB43     		mvns	r3, r3
 781 007e FA68     		ldr	r2, [r7, #12]
 782 0080 1340     		ands	r3, r3, r2
 783 0082 FB60     		str	r3, [r7, #12]
 748:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 749:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Calculate the mask to set */
 750:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 784              		.loc 1 750 0
 785 0084 7978     		ldrb	r1, [r7, #1]	@ zero_extendqisi2
 786 0086 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 787 0088 1346     		mov	r3, r2
 788 008a 5B00     		lsls	r3, r3, #1
 789 008c 1344     		add	r3, r3, r2
 790 008e 01FA03F3 		lsl	r3, r1, r3
 791 0092 BB60     		str	r3, [r7, #8]
 751:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 752:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Set the new sample time */
 753:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 |= tmpreg2;
 792              		.loc 1 753 0
 793 0094 FA68     		ldr	r2, [r7, #12]
 794 0096 BB68     		ldr	r3, [r7, #8]
 795 0098 1343     		orrs	r3, r3, r2
 796 009a FB60     		str	r3, [r7, #12]
 754:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 755:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Store the new register value */
 756:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->SMPR2 = tmpreg1;
 797              		.loc 1 756 0
 798 009c 7B68     		ldr	r3, [r7, #4]
 799 009e FA68     		ldr	r2, [r7, #12]
 800 00a0 1A61     		str	r2, [r3, #16]
 801              	.L28:
 757:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 758:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* For Rank 1 to 6 */
 759:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (Rank < 7)
 802              		.loc 1 759 0
 803 00a2 BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 804 00a4 062B     		cmp	r3, #6
 805 00a6 21D8     		bhi	.L29
 760:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 761:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Get the old register value */
 762:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 = ADCx->SQR3;
 806              		.loc 1 762 0
 807 00a8 7B68     		ldr	r3, [r7, #4]
 808 00aa 5B6B     		ldr	r3, [r3, #52]
 809 00ac FB60     		str	r3, [r7, #12]
 763:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 764:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Calculate the mask to clear */
 765:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg2 = SQR3_SQ_SET << (5 * (Rank - 1));
 810              		.loc 1 765 0
 811 00ae BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 812 00b0 5A1E     		subs	r2, r3, #1
 813 00b2 1346     		mov	r3, r2
 814 00b4 9B00     		lsls	r3, r3, #2
 815 00b6 1344     		add	r3, r3, r2
 816 00b8 1F22     		movs	r2, #31
 817 00ba 02FA03F3 		lsl	r3, r2, r3
 818 00be BB60     		str	r3, [r7, #8]
 766:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 767:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Clear the old SQx bits for the selected rank */
 768:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 &= ~tmpreg2;
 819              		.loc 1 768 0
 820 00c0 BB68     		ldr	r3, [r7, #8]
 821 00c2 DB43     		mvns	r3, r3
 822 00c4 FA68     		ldr	r2, [r7, #12]
 823 00c6 1340     		ands	r3, r3, r2
 824 00c8 FB60     		str	r3, [r7, #12]
 769:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 770:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Calculate the mask to set */
 771:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 1));
 825              		.loc 1 771 0
 826 00ca F978     		ldrb	r1, [r7, #3]	@ zero_extendqisi2
 827 00cc BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 828 00ce 5A1E     		subs	r2, r3, #1
 829 00d0 1346     		mov	r3, r2
 830 00d2 9B00     		lsls	r3, r3, #2
 831 00d4 1344     		add	r3, r3, r2
 832 00d6 01FA03F3 		lsl	r3, r1, r3
 833 00da BB60     		str	r3, [r7, #8]
 772:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 773:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Set the SQx bits for the selected rank */
 774:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 |= tmpreg2;
 834              		.loc 1 774 0
 835 00dc FA68     		ldr	r2, [r7, #12]
 836 00de BB68     		ldr	r3, [r7, #8]
 837 00e0 1343     		orrs	r3, r3, r2
 838 00e2 FB60     		str	r3, [r7, #12]
 775:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 776:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Store the new register value */
 777:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->SQR3 = tmpreg1;
 839              		.loc 1 777 0
 840 00e4 7B68     		ldr	r3, [r7, #4]
 841 00e6 FA68     		ldr	r2, [r7, #12]
 842 00e8 5A63     		str	r2, [r3, #52]
 843 00ea 47E0     		b	.L26
 844              	.L29:
 778:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 779:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* For Rank 7 to 12 */
 780:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else if (Rank < 13)
 845              		.loc 1 780 0
 846 00ec BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 847 00ee 0C2B     		cmp	r3, #12
 848 00f0 21D8     		bhi	.L31
 781:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 782:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Get the old register value */
 783:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 = ADCx->SQR2;
 849              		.loc 1 783 0
 850 00f2 7B68     		ldr	r3, [r7, #4]
 851 00f4 1B6B     		ldr	r3, [r3, #48]
 852 00f6 FB60     		str	r3, [r7, #12]
 784:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 785:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Calculate the mask to clear */
 786:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg2 = SQR2_SQ_SET << (5 * (Rank - 7));
 853              		.loc 1 786 0
 854 00f8 BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 855 00fa DA1F     		subs	r2, r3, #7
 856 00fc 1346     		mov	r3, r2
 857 00fe 9B00     		lsls	r3, r3, #2
 858 0100 1344     		add	r3, r3, r2
 859 0102 1F22     		movs	r2, #31
 860 0104 02FA03F3 		lsl	r3, r2, r3
 861 0108 BB60     		str	r3, [r7, #8]
 787:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 788:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Clear the old SQx bits for the selected rank */
 789:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 &= ~tmpreg2;
 862              		.loc 1 789 0
 863 010a BB68     		ldr	r3, [r7, #8]
 864 010c DB43     		mvns	r3, r3
 865 010e FA68     		ldr	r2, [r7, #12]
 866 0110 1340     		ands	r3, r3, r2
 867 0112 FB60     		str	r3, [r7, #12]
 790:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 791:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Calculate the mask to set */
 792:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 7));
 868              		.loc 1 792 0
 869 0114 F978     		ldrb	r1, [r7, #3]	@ zero_extendqisi2
 870 0116 BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 871 0118 DA1F     		subs	r2, r3, #7
 872 011a 1346     		mov	r3, r2
 873 011c 9B00     		lsls	r3, r3, #2
 874 011e 1344     		add	r3, r3, r2
 875 0120 01FA03F3 		lsl	r3, r1, r3
 876 0124 BB60     		str	r3, [r7, #8]
 793:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 794:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Set the SQx bits for the selected rank */
 795:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 |= tmpreg2;
 877              		.loc 1 795 0
 878 0126 FA68     		ldr	r2, [r7, #12]
 879 0128 BB68     		ldr	r3, [r7, #8]
 880 012a 1343     		orrs	r3, r3, r2
 881 012c FB60     		str	r3, [r7, #12]
 796:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 797:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Store the new register value */
 798:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->SQR2 = tmpreg1;
 882              		.loc 1 798 0
 883 012e 7B68     		ldr	r3, [r7, #4]
 884 0130 FA68     		ldr	r2, [r7, #12]
 885 0132 1A63     		str	r2, [r3, #48]
 886 0134 22E0     		b	.L26
 887              	.L31:
 799:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 800:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* For Rank 13 to 16 */
 801:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
 802:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 803:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Get the old register value */
 804:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 = ADCx->SQR1;
 888              		.loc 1 804 0
 889 0136 7B68     		ldr	r3, [r7, #4]
 890 0138 DB6A     		ldr	r3, [r3, #44]
 891 013a FB60     		str	r3, [r7, #12]
 805:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 806:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Calculate the mask to clear */
 807:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg2 = SQR1_SQ_SET << (5 * (Rank - 13));
 892              		.loc 1 807 0
 893 013c BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 894 013e A3F10D02 		sub	r2, r3, #13
 895 0142 1346     		mov	r3, r2
 896 0144 9B00     		lsls	r3, r3, #2
 897 0146 1344     		add	r3, r3, r2
 898 0148 1F22     		movs	r2, #31
 899 014a 02FA03F3 		lsl	r3, r2, r3
 900 014e BB60     		str	r3, [r7, #8]
 808:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 809:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Clear the old SQx bits for the selected rank */
 810:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 &= ~tmpreg2;
 901              		.loc 1 810 0
 902 0150 BB68     		ldr	r3, [r7, #8]
 903 0152 DB43     		mvns	r3, r3
 904 0154 FA68     		ldr	r2, [r7, #12]
 905 0156 1340     		ands	r3, r3, r2
 906 0158 FB60     		str	r3, [r7, #12]
 811:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 812:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Calculate the mask to set */
 813:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 13));
 907              		.loc 1 813 0
 908 015a F978     		ldrb	r1, [r7, #3]	@ zero_extendqisi2
 909 015c BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 910 015e A3F10D02 		sub	r2, r3, #13
 911 0162 1346     		mov	r3, r2
 912 0164 9B00     		lsls	r3, r3, #2
 913 0166 1344     		add	r3, r3, r2
 914 0168 01FA03F3 		lsl	r3, r1, r3
 915 016c BB60     		str	r3, [r7, #8]
 814:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 815:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Set the SQx bits for the selected rank */
 816:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 |= tmpreg2;
 916              		.loc 1 816 0
 917 016e FA68     		ldr	r2, [r7, #12]
 918 0170 BB68     		ldr	r3, [r7, #8]
 919 0172 1343     		orrs	r3, r3, r2
 920 0174 FB60     		str	r3, [r7, #12]
 817:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 818:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Store the new register value */
 819:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->SQR1 = tmpreg1;
 921              		.loc 1 819 0
 922 0176 7B68     		ldr	r3, [r7, #4]
 923 0178 FA68     		ldr	r2, [r7, #12]
 924 017a DA62     		str	r2, [r3, #44]
 925              	.L26:
 820:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 821:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 926              		.loc 1 821 0
 927 017c 1437     		adds	r7, r7, #20
 928 017e BD46     		mov	sp, r7
 929              		@ sp needed
 930 0180 5DF8047B 		ldr	r7, [sp], #4
 931 0184 7047     		bx	lr
 932              		.cfi_endproc
 933              	.LFE121:
 935 0186 00BF     		.section	.text.ADC_SoftwareStartConv,"ax",%progbits
 936              		.align	2
 937              		.global	ADC_SoftwareStartConv
 938              		.thumb
 939              		.thumb_func
 941              	ADC_SoftwareStartConv:
 942              	.LFB122:
 822:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 823:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 824:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Enables the selected ADC software start conversion of the regular channels.
 825:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 826:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
 827:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 828:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_SoftwareStartConv(ADC_TypeDef* ADCx)
 829:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 943              		.loc 1 829 0
 944              		.cfi_startproc
 945              		@ args = 0, pretend = 0, frame = 8
 946              		@ frame_needed = 1, uses_anonymous_args = 0
 947              		@ link register save eliminated.
 948 0000 80B4     		push	{r7}
 949              	.LCFI35:
 950              		.cfi_def_cfa_offset 4
 951              		.cfi_offset 7, -4
 952 0002 83B0     		sub	sp, sp, #12
 953              	.LCFI36:
 954              		.cfi_def_cfa_offset 16
 955 0004 00AF     		add	r7, sp, #0
 956              	.LCFI37:
 957              		.cfi_def_cfa_register 7
 958 0006 7860     		str	r0, [r7, #4]
 830:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
 831:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 832:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 833:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Enable the selected ADC conversion for regular group */
 834:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADCx->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 959              		.loc 1 834 0
 960 0008 7B68     		ldr	r3, [r7, #4]
 961 000a 9B68     		ldr	r3, [r3, #8]
 962 000c 43F08042 		orr	r2, r3, #1073741824
 963 0010 7B68     		ldr	r3, [r7, #4]
 964 0012 9A60     		str	r2, [r3, #8]
 835:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 965              		.loc 1 835 0
 966 0014 0C37     		adds	r7, r7, #12
 967 0016 BD46     		mov	sp, r7
 968              		@ sp needed
 969 0018 5DF8047B 		ldr	r7, [sp], #4
 970 001c 7047     		bx	lr
 971              		.cfi_endproc
 972              	.LFE122:
 974 001e 00BF     		.section	.text.ADC_GetSoftwareStartConvStatus,"ax",%progbits
 975              		.align	2
 976              		.global	ADC_GetSoftwareStartConvStatus
 977              		.thumb
 978              		.thumb_func
 980              	ADC_GetSoftwareStartConvStatus:
 981              	.LFB123:
 836:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 837:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 838:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Gets the selected ADC Software start regular conversion Status.
 839:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 840:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval The new state of ADC software start conversion (SET or RESET).
 841:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 842:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** FlagStatus ADC_GetSoftwareStartConvStatus(ADC_TypeDef* ADCx)
 843:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 982              		.loc 1 843 0
 983              		.cfi_startproc
 984              		@ args = 0, pretend = 0, frame = 16
 985              		@ frame_needed = 1, uses_anonymous_args = 0
 986              		@ link register save eliminated.
 987 0000 80B4     		push	{r7}
 988              	.LCFI38:
 989              		.cfi_def_cfa_offset 4
 990              		.cfi_offset 7, -4
 991 0002 85B0     		sub	sp, sp, #20
 992              	.LCFI39:
 993              		.cfi_def_cfa_offset 24
 994 0004 00AF     		add	r7, sp, #0
 995              	.LCFI40:
 996              		.cfi_def_cfa_register 7
 997 0006 7860     		str	r0, [r7, #4]
 844:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   FlagStatus bitstatus = RESET;
 998              		.loc 1 844 0
 999 0008 0023     		movs	r3, #0
 1000 000a FB73     		strb	r3, [r7, #15]
 845:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
 846:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 847:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 848:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the status of SWSTART bit */
 849:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if ((ADCx->CR2 & ADC_CR2_JSWSTART) != (uint32_t)RESET)
 1001              		.loc 1 849 0
 1002 000c 7B68     		ldr	r3, [r7, #4]
 1003 000e 9B68     		ldr	r3, [r3, #8]
 1004 0010 03F48003 		and	r3, r3, #4194304
 1005 0014 002B     		cmp	r3, #0
 1006 0016 02D0     		beq	.L34
 850:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 851:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* SWSTART bit is set */
 852:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     bitstatus = SET;
 1007              		.loc 1 852 0
 1008 0018 0123     		movs	r3, #1
 1009 001a FB73     		strb	r3, [r7, #15]
 1010 001c 01E0     		b	.L35
 1011              	.L34:
 853:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 854:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
 855:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 856:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* SWSTART bit is reset */
 857:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     bitstatus = RESET;
 1012              		.loc 1 857 0
 1013 001e 0023     		movs	r3, #0
 1014 0020 FB73     		strb	r3, [r7, #15]
 1015              	.L35:
 858:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 859:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 860:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Return the SWSTART bit status */
 861:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   return  bitstatus;
 1016              		.loc 1 861 0
 1017 0022 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 862:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 1018              		.loc 1 862 0
 1019 0024 1846     		mov	r0, r3
 1020 0026 1437     		adds	r7, r7, #20
 1021 0028 BD46     		mov	sp, r7
 1022              		@ sp needed
 1023 002a 5DF8047B 		ldr	r7, [sp], #4
 1024 002e 7047     		bx	lr
 1025              		.cfi_endproc
 1026              	.LFE123:
 1028              		.section	.text.ADC_EOCOnEachRegularChannelCmd,"ax",%progbits
 1029              		.align	2
 1030              		.global	ADC_EOCOnEachRegularChannelCmd
 1031              		.thumb
 1032              		.thumb_func
 1034              	ADC_EOCOnEachRegularChannelCmd:
 1035              	.LFB124:
 863:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 864:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 865:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 866:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Enables or disables the EOC on each regular channel conversion
 867:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 868:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  NewState: new state of the selected ADC EOC flag rising
 869:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
 870:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
 871:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 872:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_EOCOnEachRegularChannelCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
 873:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 1036              		.loc 1 873 0
 1037              		.cfi_startproc
 1038              		@ args = 0, pretend = 0, frame = 8
 1039              		@ frame_needed = 1, uses_anonymous_args = 0
 1040              		@ link register save eliminated.
 1041 0000 80B4     		push	{r7}
 1042              	.LCFI41:
 1043              		.cfi_def_cfa_offset 4
 1044              		.cfi_offset 7, -4
 1045 0002 83B0     		sub	sp, sp, #12
 1046              	.LCFI42:
 1047              		.cfi_def_cfa_offset 16
 1048 0004 00AF     		add	r7, sp, #0
 1049              	.LCFI43:
 1050              		.cfi_def_cfa_register 7
 1051 0006 7860     		str	r0, [r7, #4]
 1052 0008 0B46     		mov	r3, r1
 1053 000a FB70     		strb	r3, [r7, #3]
 874:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
 875:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 876:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 877:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 878:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 1054              		.loc 1 878 0
 1055 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1056 000e 002B     		cmp	r3, #0
 1057 0010 06D0     		beq	.L38
 879:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 880:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Enable the selected ADC EOC rising on each regular channel conversion */
 881:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR2 |= (uint32_t)ADC_CR2_EOCS;
 1058              		.loc 1 881 0
 1059 0012 7B68     		ldr	r3, [r7, #4]
 1060 0014 9B68     		ldr	r3, [r3, #8]
 1061 0016 43F48062 		orr	r2, r3, #1024
 1062 001a 7B68     		ldr	r3, [r7, #4]
 1063 001c 9A60     		str	r2, [r3, #8]
 1064 001e 05E0     		b	.L37
 1065              	.L38:
 882:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 883:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
 884:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 885:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Disable the selected ADC EOC rising on each regular channel conversion */
 886:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR2 &= (uint32_t)(~ADC_CR2_EOCS);
 1066              		.loc 1 886 0
 1067 0020 7B68     		ldr	r3, [r7, #4]
 1068 0022 9B68     		ldr	r3, [r3, #8]
 1069 0024 23F48062 		bic	r2, r3, #1024
 1070 0028 7B68     		ldr	r3, [r7, #4]
 1071 002a 9A60     		str	r2, [r3, #8]
 1072              	.L37:
 887:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 888:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 1073              		.loc 1 888 0
 1074 002c 0C37     		adds	r7, r7, #12
 1075 002e BD46     		mov	sp, r7
 1076              		@ sp needed
 1077 0030 5DF8047B 		ldr	r7, [sp], #4
 1078 0034 7047     		bx	lr
 1079              		.cfi_endproc
 1080              	.LFE124:
 1082 0036 00BF     		.section	.text.ADC_ContinuousModeCmd,"ax",%progbits
 1083              		.align	2
 1084              		.global	ADC_ContinuousModeCmd
 1085              		.thumb
 1086              		.thumb_func
 1088              	ADC_ContinuousModeCmd:
 1089              	.LFB125:
 889:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 890:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 891:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Enables or disables the ADC continuous conversion mode 
 892:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 893:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  NewState: new state of the selected ADC continuous conversion mode
 894:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
 895:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
 896:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 897:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_ContinuousModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
 898:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 1090              		.loc 1 898 0
 1091              		.cfi_startproc
 1092              		@ args = 0, pretend = 0, frame = 8
 1093              		@ frame_needed = 1, uses_anonymous_args = 0
 1094              		@ link register save eliminated.
 1095 0000 80B4     		push	{r7}
 1096              	.LCFI44:
 1097              		.cfi_def_cfa_offset 4
 1098              		.cfi_offset 7, -4
 1099 0002 83B0     		sub	sp, sp, #12
 1100              	.LCFI45:
 1101              		.cfi_def_cfa_offset 16
 1102 0004 00AF     		add	r7, sp, #0
 1103              	.LCFI46:
 1104              		.cfi_def_cfa_register 7
 1105 0006 7860     		str	r0, [r7, #4]
 1106 0008 0B46     		mov	r3, r1
 1107 000a FB70     		strb	r3, [r7, #3]
 899:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
 900:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 901:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 902:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 903:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 1108              		.loc 1 903 0
 1109 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1110 000e 002B     		cmp	r3, #0
 1111 0010 06D0     		beq	.L41
 904:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 905:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Enable the selected ADC continuous conversion mode */
 906:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR2 |= (uint32_t)ADC_CR2_CONT;
 1112              		.loc 1 906 0
 1113 0012 7B68     		ldr	r3, [r7, #4]
 1114 0014 9B68     		ldr	r3, [r3, #8]
 1115 0016 43F00202 		orr	r2, r3, #2
 1116 001a 7B68     		ldr	r3, [r7, #4]
 1117 001c 9A60     		str	r2, [r3, #8]
 1118 001e 05E0     		b	.L40
 1119              	.L41:
 907:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 908:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
 909:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 910:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Disable the selected ADC continuous conversion mode */
 911:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR2 &= (uint32_t)(~ADC_CR2_CONT);
 1120              		.loc 1 911 0
 1121 0020 7B68     		ldr	r3, [r7, #4]
 1122 0022 9B68     		ldr	r3, [r3, #8]
 1123 0024 23F00202 		bic	r2, r3, #2
 1124 0028 7B68     		ldr	r3, [r7, #4]
 1125 002a 9A60     		str	r2, [r3, #8]
 1126              	.L40:
 912:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 913:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 1127              		.loc 1 913 0
 1128 002c 0C37     		adds	r7, r7, #12
 1129 002e BD46     		mov	sp, r7
 1130              		@ sp needed
 1131 0030 5DF8047B 		ldr	r7, [sp], #4
 1132 0034 7047     		bx	lr
 1133              		.cfi_endproc
 1134              	.LFE125:
 1136 0036 00BF     		.section	.text.ADC_DiscModeChannelCountConfig,"ax",%progbits
 1137              		.align	2
 1138              		.global	ADC_DiscModeChannelCountConfig
 1139              		.thumb
 1140              		.thumb_func
 1142              	ADC_DiscModeChannelCountConfig:
 1143              	.LFB126:
 914:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 915:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 916:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Configures the discontinuous mode for the selected ADC regular group 
 917:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         channel.
 918:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 919:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  Number: specifies the discontinuous mode regular channel count value.
 920:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This number must be between 1 and 8.
 921:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
 922:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 923:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_DiscModeChannelCountConfig(ADC_TypeDef* ADCx, uint8_t Number)
 924:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 1144              		.loc 1 924 0
 1145              		.cfi_startproc
 1146              		@ args = 0, pretend = 0, frame = 16
 1147              		@ frame_needed = 1, uses_anonymous_args = 0
 1148              		@ link register save eliminated.
 1149 0000 80B4     		push	{r7}
 1150              	.LCFI47:
 1151              		.cfi_def_cfa_offset 4
 1152              		.cfi_offset 7, -4
 1153 0002 85B0     		sub	sp, sp, #20
 1154              	.LCFI48:
 1155              		.cfi_def_cfa_offset 24
 1156 0004 00AF     		add	r7, sp, #0
 1157              	.LCFI49:
 1158              		.cfi_def_cfa_register 7
 1159 0006 7860     		str	r0, [r7, #4]
 1160 0008 0B46     		mov	r3, r1
 1161 000a FB70     		strb	r3, [r7, #3]
 925:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   uint32_t tmpreg1 = 0;
 1162              		.loc 1 925 0
 1163 000c 0023     		movs	r3, #0
 1164 000e FB60     		str	r3, [r7, #12]
 926:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   uint32_t tmpreg2 = 0;
 1165              		.loc 1 926 0
 1166 0010 0023     		movs	r3, #0
 1167 0012 BB60     		str	r3, [r7, #8]
 927:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 928:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
 929:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 930:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_REGULAR_DISC_NUMBER(Number));
 931:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 932:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Get the old register value */
 933:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 = ADCx->CR1;
 1168              		.loc 1 933 0
 1169 0014 7B68     		ldr	r3, [r7, #4]
 1170 0016 5B68     		ldr	r3, [r3, #4]
 1171 0018 FB60     		str	r3, [r7, #12]
 934:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 935:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Clear the old discontinuous mode channel count */
 936:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 &= CR1_DISCNUM_RESET;
 1172              		.loc 1 936 0
 1173 001a FB68     		ldr	r3, [r7, #12]
 1174 001c 23F46043 		bic	r3, r3, #57344
 1175 0020 FB60     		str	r3, [r7, #12]
 937:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 938:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set the discontinuous mode channel count */
 939:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg2 = Number - 1;
 1176              		.loc 1 939 0
 1177 0022 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1178 0024 013B     		subs	r3, r3, #1
 1179 0026 BB60     		str	r3, [r7, #8]
 940:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 |= tmpreg2 << 13;
 1180              		.loc 1 940 0
 1181 0028 BB68     		ldr	r3, [r7, #8]
 1182 002a 5B03     		lsls	r3, r3, #13
 1183 002c FA68     		ldr	r2, [r7, #12]
 1184 002e 1343     		orrs	r3, r3, r2
 1185 0030 FB60     		str	r3, [r7, #12]
 941:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 942:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Store the new register value */
 943:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADCx->CR1 = tmpreg1;
 1186              		.loc 1 943 0
 1187 0032 7B68     		ldr	r3, [r7, #4]
 1188 0034 FA68     		ldr	r2, [r7, #12]
 1189 0036 5A60     		str	r2, [r3, #4]
 944:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 1190              		.loc 1 944 0
 1191 0038 1437     		adds	r7, r7, #20
 1192 003a BD46     		mov	sp, r7
 1193              		@ sp needed
 1194 003c 5DF8047B 		ldr	r7, [sp], #4
 1195 0040 7047     		bx	lr
 1196              		.cfi_endproc
 1197              	.LFE126:
 1199 0042 00BF     		.section	.text.ADC_DiscModeCmd,"ax",%progbits
 1200              		.align	2
 1201              		.global	ADC_DiscModeCmd
 1202              		.thumb
 1203              		.thumb_func
 1205              	ADC_DiscModeCmd:
 1206              	.LFB127:
 945:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 946:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 947:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Enables or disables the discontinuous mode on regular group channel 
 948:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         for the specified ADC
 949:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 950:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  NewState: new state of the selected ADC discontinuous mode on 
 951:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         regular group channel.
 952:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
 953:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
 954:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 955:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_DiscModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
 956:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 1207              		.loc 1 956 0
 1208              		.cfi_startproc
 1209              		@ args = 0, pretend = 0, frame = 8
 1210              		@ frame_needed = 1, uses_anonymous_args = 0
 1211              		@ link register save eliminated.
 1212 0000 80B4     		push	{r7}
 1213              	.LCFI50:
 1214              		.cfi_def_cfa_offset 4
 1215              		.cfi_offset 7, -4
 1216 0002 83B0     		sub	sp, sp, #12
 1217              	.LCFI51:
 1218              		.cfi_def_cfa_offset 16
 1219 0004 00AF     		add	r7, sp, #0
 1220              	.LCFI52:
 1221              		.cfi_def_cfa_register 7
 1222 0006 7860     		str	r0, [r7, #4]
 1223 0008 0B46     		mov	r3, r1
 1224 000a FB70     		strb	r3, [r7, #3]
 957:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
 958:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 959:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 960:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 961:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 1225              		.loc 1 961 0
 1226 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1227 000e 002B     		cmp	r3, #0
 1228 0010 06D0     		beq	.L45
 962:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 963:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Enable the selected ADC regular discontinuous mode */
 964:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 1229              		.loc 1 964 0
 1230 0012 7B68     		ldr	r3, [r7, #4]
 1231 0014 5B68     		ldr	r3, [r3, #4]
 1232 0016 43F40062 		orr	r2, r3, #2048
 1233 001a 7B68     		ldr	r3, [r7, #4]
 1234 001c 5A60     		str	r2, [r3, #4]
 1235 001e 05E0     		b	.L44
 1236              	.L45:
 965:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 966:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
 967:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 968:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Disable the selected ADC regular discontinuous mode */
 969:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR1 &= (uint32_t)(~ADC_CR1_DISCEN);
 1237              		.loc 1 969 0
 1238 0020 7B68     		ldr	r3, [r7, #4]
 1239 0022 5B68     		ldr	r3, [r3, #4]
 1240 0024 23F40062 		bic	r2, r3, #2048
 1241 0028 7B68     		ldr	r3, [r7, #4]
 1242 002a 5A60     		str	r2, [r3, #4]
 1243              	.L44:
 970:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 971:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 1244              		.loc 1 971 0
 1245 002c 0C37     		adds	r7, r7, #12
 1246 002e BD46     		mov	sp, r7
 1247              		@ sp needed
 1248 0030 5DF8047B 		ldr	r7, [sp], #4
 1249 0034 7047     		bx	lr
 1250              		.cfi_endproc
 1251              	.LFE127:
 1253 0036 00BF     		.section	.text.ADC_GetConversionValue,"ax",%progbits
 1254              		.align	2
 1255              		.global	ADC_GetConversionValue
 1256              		.thumb
 1257              		.thumb_func
 1259              	ADC_GetConversionValue:
 1260              	.LFB128:
 972:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 973:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 974:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Returns the last ADCx conversion result data for regular channel.
 975:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 976:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval The Data conversion value.
 977:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 978:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** uint16_t ADC_GetConversionValue(ADC_TypeDef* ADCx)
 979:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 1261              		.loc 1 979 0
 1262              		.cfi_startproc
 1263              		@ args = 0, pretend = 0, frame = 8
 1264              		@ frame_needed = 1, uses_anonymous_args = 0
 1265              		@ link register save eliminated.
 1266 0000 80B4     		push	{r7}
 1267              	.LCFI53:
 1268              		.cfi_def_cfa_offset 4
 1269              		.cfi_offset 7, -4
 1270 0002 83B0     		sub	sp, sp, #12
 1271              	.LCFI54:
 1272              		.cfi_def_cfa_offset 16
 1273 0004 00AF     		add	r7, sp, #0
 1274              	.LCFI55:
 1275              		.cfi_def_cfa_register 7
 1276 0006 7860     		str	r0, [r7, #4]
 980:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
 981:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 982:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 983:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Return the selected ADC conversion value */
 984:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   return (uint16_t) ADCx->DR;
 1277              		.loc 1 984 0
 1278 0008 7B68     		ldr	r3, [r7, #4]
 1279 000a DB6C     		ldr	r3, [r3, #76]
 1280 000c 9BB2     		uxth	r3, r3
 985:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 1281              		.loc 1 985 0
 1282 000e 1846     		mov	r0, r3
 1283 0010 0C37     		adds	r7, r7, #12
 1284 0012 BD46     		mov	sp, r7
 1285              		@ sp needed
 1286 0014 5DF8047B 		ldr	r7, [sp], #4
 1287 0018 7047     		bx	lr
 1288              		.cfi_endproc
 1289              	.LFE128:
 1291 001a 00BF     		.section	.text.ADC_GetMultiModeConversionValue,"ax",%progbits
 1292              		.align	2
 1293              		.global	ADC_GetMultiModeConversionValue
 1294              		.thumb
 1295              		.thumb_func
 1297              	ADC_GetMultiModeConversionValue:
 1298              	.LFB129:
 986:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 987:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 988:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Returns the last ADC1, ADC2 and ADC3 regular conversions results 
 989:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         data in the selected multi mode.
 990:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  None  
 991:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval The Data conversion value.
 992:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @note   In dual mode, the value returned by this function is as following
 993:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *           Data[15:0] : these bits contain the regular data of ADC1.
 994:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *           Data[31:16]: these bits contain the regular data of ADC2.
 995:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @note   In triple mode, the value returned by this function is as following
 996:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *           Data[15:0] : these bits contain alternatively the regular data of ADC1, ADC3 and ADC2
 997:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *           Data[31:16]: these bits contain alternatively the regular data of ADC2, ADC1 and ADC3
 998:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 999:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** uint32_t ADC_GetMultiModeConversionValue(void)
1000:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 1299              		.loc 1 1000 0
 1300              		.cfi_startproc
 1301              		@ args = 0, pretend = 0, frame = 0
 1302              		@ frame_needed = 1, uses_anonymous_args = 0
 1303              		@ link register save eliminated.
 1304 0000 80B4     		push	{r7}
 1305              	.LCFI56:
 1306              		.cfi_def_cfa_offset 4
 1307              		.cfi_offset 7, -4
 1308 0002 00AF     		add	r7, sp, #0
 1309              	.LCFI57:
 1310              		.cfi_def_cfa_register 7
1001:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Return the multi mode conversion value */
1002:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   return (*(__IO uint32_t *) CDR_ADDRESS);
 1311              		.loc 1 1002 0
 1312 0004 034B     		ldr	r3, .L51
 1313 0006 1B68     		ldr	r3, [r3]
1003:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 1314              		.loc 1 1003 0
 1315 0008 1846     		mov	r0, r3
 1316 000a BD46     		mov	sp, r7
 1317              		@ sp needed
 1318 000c 5DF8047B 		ldr	r7, [sp], #4
 1319 0010 7047     		bx	lr
 1320              	.L52:
 1321 0012 00BF     		.align	2
 1322              	.L51:
 1323 0014 08230140 		.word	1073816328
 1324              		.cfi_endproc
 1325              	.LFE129:
 1327              		.section	.text.ADC_DMACmd,"ax",%progbits
 1328              		.align	2
 1329              		.global	ADC_DMACmd
 1330              		.thumb
 1331              		.thumb_func
 1333              	ADC_DMACmd:
 1334              	.LFB130:
1004:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1005:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @}
1006:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1007:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1008:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /** @defgroup ADC_Group5 Regular Channels DMA Configuration functions
1009:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  *  @brief   Regular Channels DMA Configuration functions 
1010:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  *
1011:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** @verbatim   
1012:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  ===============================================================================
1013:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                    Regular Channels DMA Configuration functions
1014:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  ===============================================================================  
1015:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1016:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   This section provides functions allowing to configure the DMA for ADC regular 
1017:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   channels.
1018:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   Since converted regular channel values are stored into a unique data register, 
1019:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   it is useful to use DMA for conversion of more than one regular channel. This 
1020:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   avoids the loss of the data already stored in the ADC Data register. 
1021:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1022:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   When the DMA mode is enabled (using the ADC_DMACmd() function), after each
1023:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   conversion of a regular channel, a DMA request is generated.
1024:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1025:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   Depending on the "DMA disable selection for Independent ADC mode" 
1026:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   configuration (using the ADC_DMARequestAfterLastTransferCmd() function), 
1027:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   at the end of the last DMA transfer, two possibilities are allowed:
1028:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   - No new DMA request is issued to the DMA controller (feature DISABLED) 
1029:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   - Requests can continue to be generated (feature ENABLED).
1030:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1031:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   Depending on the "DMA disable selection for multi ADC mode" configuration 
1032:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   (using the void ADC_MultiModeDMARequestAfterLastTransferCmd() function), 
1033:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   at the end of the last DMA transfer, two possibilities are allowed:
1034:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   - No new DMA request is issued to the DMA controller (feature DISABLED) 
1035:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   - Requests can continue to be generated (feature ENABLED).
1036:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1037:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** @endverbatim
1038:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @{
1039:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1040:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1041:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  /**
1042:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Enables or disables the specified ADC DMA request.
1043:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1044:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  NewState: new state of the selected ADC DMA transfer.
1045:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
1046:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
1047:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1048:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_DMACmd(ADC_TypeDef* ADCx, FunctionalState NewState)
1049:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 1335              		.loc 1 1049 0
 1336              		.cfi_startproc
 1337              		@ args = 0, pretend = 0, frame = 8
 1338              		@ frame_needed = 1, uses_anonymous_args = 0
 1339              		@ link register save eliminated.
 1340 0000 80B4     		push	{r7}
 1341              	.LCFI58:
 1342              		.cfi_def_cfa_offset 4
 1343              		.cfi_offset 7, -4
 1344 0002 83B0     		sub	sp, sp, #12
 1345              	.LCFI59:
 1346              		.cfi_def_cfa_offset 16
 1347 0004 00AF     		add	r7, sp, #0
 1348              	.LCFI60:
 1349              		.cfi_def_cfa_register 7
 1350 0006 7860     		str	r0, [r7, #4]
 1351 0008 0B46     		mov	r3, r1
 1352 000a FB70     		strb	r3, [r7, #3]
1050:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1051:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1052:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1053:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 1353              		.loc 1 1053 0
 1354 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1355 000e 002B     		cmp	r3, #0
 1356 0010 06D0     		beq	.L54
1054:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1055:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Enable the selected ADC DMA request */
1056:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR2 |= (uint32_t)ADC_CR2_DMA;
 1357              		.loc 1 1056 0
 1358 0012 7B68     		ldr	r3, [r7, #4]
 1359 0014 9B68     		ldr	r3, [r3, #8]
 1360 0016 43F48072 		orr	r2, r3, #256
 1361 001a 7B68     		ldr	r3, [r7, #4]
 1362 001c 9A60     		str	r2, [r3, #8]
 1363 001e 05E0     		b	.L53
 1364              	.L54:
1057:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1058:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
1059:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1060:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Disable the selected ADC DMA request */
1061:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR2 &= (uint32_t)(~ADC_CR2_DMA);
 1365              		.loc 1 1061 0
 1366 0020 7B68     		ldr	r3, [r7, #4]
 1367 0022 9B68     		ldr	r3, [r3, #8]
 1368 0024 23F48072 		bic	r2, r3, #256
 1369 0028 7B68     		ldr	r3, [r7, #4]
 1370 002a 9A60     		str	r2, [r3, #8]
 1371              	.L53:
1062:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1063:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 1372              		.loc 1 1063 0
 1373 002c 0C37     		adds	r7, r7, #12
 1374 002e BD46     		mov	sp, r7
 1375              		@ sp needed
 1376 0030 5DF8047B 		ldr	r7, [sp], #4
 1377 0034 7047     		bx	lr
 1378              		.cfi_endproc
 1379              	.LFE130:
 1381 0036 00BF     		.section	.text.ADC_DMARequestAfterLastTransferCmd,"ax",%progbits
 1382              		.align	2
 1383              		.global	ADC_DMARequestAfterLastTransferCmd
 1384              		.thumb
 1385              		.thumb_func
 1387              	ADC_DMARequestAfterLastTransferCmd:
 1388              	.LFB131:
1064:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1065:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1066:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Enables or disables the ADC DMA request after last transfer (Single-ADC mode)  
1067:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1068:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  NewState: new state of the selected ADC DMA request after last transfer.
1069:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
1070:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
1071:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1072:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_DMARequestAfterLastTransferCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
1073:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 1389              		.loc 1 1073 0
 1390              		.cfi_startproc
 1391              		@ args = 0, pretend = 0, frame = 8
 1392              		@ frame_needed = 1, uses_anonymous_args = 0
 1393              		@ link register save eliminated.
 1394 0000 80B4     		push	{r7}
 1395              	.LCFI61:
 1396              		.cfi_def_cfa_offset 4
 1397              		.cfi_offset 7, -4
 1398 0002 83B0     		sub	sp, sp, #12
 1399              	.LCFI62:
 1400              		.cfi_def_cfa_offset 16
 1401 0004 00AF     		add	r7, sp, #0
 1402              	.LCFI63:
 1403              		.cfi_def_cfa_register 7
 1404 0006 7860     		str	r0, [r7, #4]
 1405 0008 0B46     		mov	r3, r1
 1406 000a FB70     		strb	r3, [r7, #3]
1074:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1075:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1076:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1077:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 1407              		.loc 1 1077 0
 1408 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1409 000e 002B     		cmp	r3, #0
 1410 0010 06D0     		beq	.L57
1078:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1079:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Enable the selected ADC DMA request after last transfer */
1080:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR2 |= (uint32_t)ADC_CR2_DDS;
 1411              		.loc 1 1080 0
 1412 0012 7B68     		ldr	r3, [r7, #4]
 1413 0014 9B68     		ldr	r3, [r3, #8]
 1414 0016 43F40072 		orr	r2, r3, #512
 1415 001a 7B68     		ldr	r3, [r7, #4]
 1416 001c 9A60     		str	r2, [r3, #8]
 1417 001e 05E0     		b	.L56
 1418              	.L57:
1081:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1082:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
1083:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1084:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Disable the selected ADC DMA request after last transfer */
1085:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR2 &= (uint32_t)(~ADC_CR2_DDS);
 1419              		.loc 1 1085 0
 1420 0020 7B68     		ldr	r3, [r7, #4]
 1421 0022 9B68     		ldr	r3, [r3, #8]
 1422 0024 23F40072 		bic	r2, r3, #512
 1423 0028 7B68     		ldr	r3, [r7, #4]
 1424 002a 9A60     		str	r2, [r3, #8]
 1425              	.L56:
1086:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1087:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 1426              		.loc 1 1087 0
 1427 002c 0C37     		adds	r7, r7, #12
 1428 002e BD46     		mov	sp, r7
 1429              		@ sp needed
 1430 0030 5DF8047B 		ldr	r7, [sp], #4
 1431 0034 7047     		bx	lr
 1432              		.cfi_endproc
 1433              	.LFE131:
 1435 0036 00BF     		.section	.text.ADC_MultiModeDMARequestAfterLastTransferCmd,"ax",%progbits
 1436              		.align	2
 1437              		.global	ADC_MultiModeDMARequestAfterLastTransferCmd
 1438              		.thumb
 1439              		.thumb_func
 1441              	ADC_MultiModeDMARequestAfterLastTransferCmd:
 1442              	.LFB132:
1088:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1089:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1090:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Enables or disables the ADC DMA request after last transfer in multi ADC mode       
1091:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  NewState: new state of the selected ADC DMA request after last transfer.
1092:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
1093:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @note   if Enabled, DMA requests are issued as long as data are converted and 
1094:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         DMA mode for multi ADC mode (selected using ADC_CommonInit() function 
1095:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         by ADC_CommonInitStruct.ADC_DMAAccessMode structure member) is 
1096:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          ADC_DMAAccessMode_1, ADC_DMAAccessMode_2 or ADC_DMAAccessMode_3.     
1097:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
1098:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1099:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_MultiModeDMARequestAfterLastTransferCmd(FunctionalState NewState)
1100:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 1443              		.loc 1 1100 0
 1444              		.cfi_startproc
 1445              		@ args = 0, pretend = 0, frame = 8
 1446              		@ frame_needed = 1, uses_anonymous_args = 0
 1447              		@ link register save eliminated.
 1448 0000 80B4     		push	{r7}
 1449              	.LCFI64:
 1450              		.cfi_def_cfa_offset 4
 1451              		.cfi_offset 7, -4
 1452 0002 83B0     		sub	sp, sp, #12
 1453              	.LCFI65:
 1454              		.cfi_def_cfa_offset 16
 1455 0004 00AF     		add	r7, sp, #0
 1456              	.LCFI66:
 1457              		.cfi_def_cfa_register 7
 1458 0006 0346     		mov	r3, r0
 1459 0008 FB71     		strb	r3, [r7, #7]
1101:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1102:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1103:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 1460              		.loc 1 1103 0
 1461 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1462 000c 002B     		cmp	r3, #0
 1463 000e 06D0     		beq	.L60
1104:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1105:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Enable the selected ADC DMA request after last transfer */
1106:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADC->CCR |= (uint32_t)ADC_CCR_DDS;
 1464              		.loc 1 1106 0
 1465 0010 084B     		ldr	r3, .L62
 1466 0012 084A     		ldr	r2, .L62
 1467 0014 5268     		ldr	r2, [r2, #4]
 1468 0016 42F40052 		orr	r2, r2, #8192
 1469 001a 5A60     		str	r2, [r3, #4]
 1470 001c 05E0     		b	.L59
 1471              	.L60:
1107:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1108:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
1109:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1110:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Disable the selected ADC DMA request after last transfer */
1111:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADC->CCR &= (uint32_t)(~ADC_CCR_DDS);
 1472              		.loc 1 1111 0
 1473 001e 054B     		ldr	r3, .L62
 1474 0020 044A     		ldr	r2, .L62
 1475 0022 5268     		ldr	r2, [r2, #4]
 1476 0024 22F40052 		bic	r2, r2, #8192
 1477 0028 5A60     		str	r2, [r3, #4]
 1478              	.L59:
1112:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1113:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 1479              		.loc 1 1113 0
 1480 002a 0C37     		adds	r7, r7, #12
 1481 002c BD46     		mov	sp, r7
 1482              		@ sp needed
 1483 002e 5DF8047B 		ldr	r7, [sp], #4
 1484 0032 7047     		bx	lr
 1485              	.L63:
 1486              		.align	2
 1487              	.L62:
 1488 0034 00230140 		.word	1073816320
 1489              		.cfi_endproc
 1490              	.LFE132:
 1492              		.section	.text.ADC_InjectedChannelConfig,"ax",%progbits
 1493              		.align	2
 1494              		.global	ADC_InjectedChannelConfig
 1495              		.thumb
 1496              		.thumb_func
 1498              	ADC_InjectedChannelConfig:
 1499              	.LFB133:
1114:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1115:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @}
1116:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1117:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1118:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /** @defgroup ADC_Group6 Injected channels Configuration functions
1119:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  *  @brief   Injected channels Configuration functions 
1120:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  *
1121:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** @verbatim   
1122:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  ===============================================================================
1123:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                      Injected channels Configuration functions
1124:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  ===============================================================================  
1125:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1126:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   This section provide functions allowing to configure the ADC Injected channels,
1127:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   it is composed of 2 sub sections : 
1128:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
1129:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   1. Configuration functions for Injected channels: This subsection provides 
1130:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      functions allowing to configure the ADC injected channels :    
1131:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     - Configure the rank in the injected group sequencer for each channel
1132:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     - Configure the sampling time for each channel    
1133:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     - Activate the Auto injected Mode  
1134:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     - Activate the Discontinuous Mode 
1135:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     - scan mode activation  
1136:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     - External/software trigger source   
1137:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     - External trigger edge 
1138:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     - injected channels sequencer.
1139:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
1140:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    2. Get the Specified Injected channel conversion data: This subsection 
1141:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****       provides an important function in the ADC peripheral since it returns the 
1142:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****       converted data of the specific injected channel.
1143:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1144:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** @endverbatim
1145:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @{
1146:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */ 
1147:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1148:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Configures for the selected ADC injected channel its corresponding
1149:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         rank in the sequencer and its sample time.
1150:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1151:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_Channel: the ADC channel to configure. 
1152:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
1153:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_0: ADC Channel0 selected
1154:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_1: ADC Channel1 selected
1155:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_2: ADC Channel2 selected
1156:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_3: ADC Channel3 selected
1157:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_4: ADC Channel4 selected
1158:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_5: ADC Channel5 selected
1159:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_6: ADC Channel6 selected
1160:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_7: ADC Channel7 selected
1161:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_8: ADC Channel8 selected
1162:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_9: ADC Channel9 selected
1163:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_10: ADC Channel10 selected
1164:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_11: ADC Channel11 selected
1165:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_12: ADC Channel12 selected
1166:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_13: ADC Channel13 selected
1167:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_14: ADC Channel14 selected
1168:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_15: ADC Channel15 selected
1169:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_16: ADC Channel16 selected
1170:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_17: ADC Channel17 selected
1171:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_18: ADC Channel18 selected                       
1172:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  Rank: The rank in the injected group sequencer. 
1173:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter must be between 1 to 4.
1174:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_SampleTime: The sample time value to be set for the selected channel. 
1175:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
1176:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_3Cycles: Sample time equal to 3 cycles
1177:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_15Cycles: Sample time equal to 15 cycles
1178:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_28Cycles: Sample time equal to 28 cycles
1179:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_56Cycles: Sample time equal to 56 cycles	
1180:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_84Cycles: Sample time equal to 84 cycles	
1181:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_112Cycles: Sample time equal to 112 cycles	
1182:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_144Cycles: Sample time equal to 144 cycles	
1183:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_480Cycles: Sample time equal to 480 cycles	
1184:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
1185:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1186:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_InjectedChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_Sa
1187:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 1500              		.loc 1 1187 0
 1501              		.cfi_startproc
 1502              		@ args = 0, pretend = 0, frame = 24
 1503              		@ frame_needed = 1, uses_anonymous_args = 0
 1504              		@ link register save eliminated.
 1505 0000 80B4     		push	{r7}
 1506              	.LCFI67:
 1507              		.cfi_def_cfa_offset 4
 1508              		.cfi_offset 7, -4
 1509 0002 87B0     		sub	sp, sp, #28
 1510              	.LCFI68:
 1511              		.cfi_def_cfa_offset 32
 1512 0004 00AF     		add	r7, sp, #0
 1513              	.LCFI69:
 1514              		.cfi_def_cfa_register 7
 1515 0006 7860     		str	r0, [r7, #4]
 1516 0008 F970     		strb	r1, [r7, #3]
 1517 000a BA70     		strb	r2, [r7, #2]
 1518 000c 7B70     		strb	r3, [r7, #1]
1188:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   uint32_t tmpreg1 = 0, tmpreg2 = 0, tmpreg3 = 0;
 1519              		.loc 1 1188 0
 1520 000e 0023     		movs	r3, #0
 1521 0010 7B61     		str	r3, [r7, #20]
 1522 0012 0023     		movs	r3, #0
 1523 0014 3B61     		str	r3, [r7, #16]
 1524 0016 0023     		movs	r3, #0
 1525 0018 FB60     		str	r3, [r7, #12]
1189:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1190:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1191:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_CHANNEL(ADC_Channel));
1192:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_INJECTED_RANK(Rank));
1193:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
1194:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
1195:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (ADC_Channel > ADC_Channel_9)
 1526              		.loc 1 1195 0
 1527 001a FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1528 001c 092B     		cmp	r3, #9
 1529 001e 23D9     		bls	.L65
1196:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1197:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Get the old register value */
1198:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 = ADCx->SMPR1;
 1530              		.loc 1 1198 0
 1531 0020 7B68     		ldr	r3, [r7, #4]
 1532 0022 DB68     		ldr	r3, [r3, #12]
 1533 0024 7B61     		str	r3, [r7, #20]
1199:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Calculate the mask to clear */
1200:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg2 = SMPR1_SMP_SET << (3*(ADC_Channel - 10));
 1534              		.loc 1 1200 0
 1535 0026 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1536 0028 A3F10A02 		sub	r2, r3, #10
 1537 002c 1346     		mov	r3, r2
 1538 002e 5B00     		lsls	r3, r3, #1
 1539 0030 1344     		add	r3, r3, r2
 1540 0032 0722     		movs	r2, #7
 1541 0034 02FA03F3 		lsl	r3, r2, r3
 1542 0038 3B61     		str	r3, [r7, #16]
1201:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Clear the old sample time */
1202:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 &= ~tmpreg2;
 1543              		.loc 1 1202 0
 1544 003a 3B69     		ldr	r3, [r7, #16]
 1545 003c DB43     		mvns	r3, r3
 1546 003e 7A69     		ldr	r2, [r7, #20]
 1547 0040 1340     		ands	r3, r3, r2
 1548 0042 7B61     		str	r3, [r7, #20]
1203:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Calculate the mask to set */
1204:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg2 = (uint32_t)ADC_SampleTime << (3*(ADC_Channel - 10));
 1549              		.loc 1 1204 0
 1550 0044 7978     		ldrb	r1, [r7, #1]	@ zero_extendqisi2
 1551 0046 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1552 0048 A3F10A02 		sub	r2, r3, #10
 1553 004c 1346     		mov	r3, r2
 1554 004e 5B00     		lsls	r3, r3, #1
 1555 0050 1344     		add	r3, r3, r2
 1556 0052 01FA03F3 		lsl	r3, r1, r3
 1557 0056 3B61     		str	r3, [r7, #16]
1205:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Set the new sample time */
1206:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 |= tmpreg2;
 1558              		.loc 1 1206 0
 1559 0058 7A69     		ldr	r2, [r7, #20]
 1560 005a 3B69     		ldr	r3, [r7, #16]
 1561 005c 1343     		orrs	r3, r3, r2
 1562 005e 7B61     		str	r3, [r7, #20]
1207:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Store the new register value */
1208:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->SMPR1 = tmpreg1;
 1563              		.loc 1 1208 0
 1564 0060 7B68     		ldr	r3, [r7, #4]
 1565 0062 7A69     		ldr	r2, [r7, #20]
 1566 0064 DA60     		str	r2, [r3, #12]
 1567 0066 1EE0     		b	.L66
 1568              	.L65:
1209:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1210:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else /* ADC_Channel include in ADC_Channel_[0..9] */
1211:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1212:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Get the old register value */
1213:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 = ADCx->SMPR2;
 1569              		.loc 1 1213 0
 1570 0068 7B68     		ldr	r3, [r7, #4]
 1571 006a 1B69     		ldr	r3, [r3, #16]
 1572 006c 7B61     		str	r3, [r7, #20]
1214:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Calculate the mask to clear */
1215:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
 1573              		.loc 1 1215 0
 1574 006e FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 1575 0070 1346     		mov	r3, r2
 1576 0072 5B00     		lsls	r3, r3, #1
 1577 0074 1344     		add	r3, r3, r2
 1578 0076 0722     		movs	r2, #7
 1579 0078 02FA03F3 		lsl	r3, r2, r3
 1580 007c 3B61     		str	r3, [r7, #16]
1216:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Clear the old sample time */
1217:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 &= ~tmpreg2;
 1581              		.loc 1 1217 0
 1582 007e 3B69     		ldr	r3, [r7, #16]
 1583 0080 DB43     		mvns	r3, r3
 1584 0082 7A69     		ldr	r2, [r7, #20]
 1585 0084 1340     		ands	r3, r3, r2
 1586 0086 7B61     		str	r3, [r7, #20]
1218:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Calculate the mask to set */
1219:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 1587              		.loc 1 1219 0
 1588 0088 7978     		ldrb	r1, [r7, #1]	@ zero_extendqisi2
 1589 008a FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 1590 008c 1346     		mov	r3, r2
 1591 008e 5B00     		lsls	r3, r3, #1
 1592 0090 1344     		add	r3, r3, r2
 1593 0092 01FA03F3 		lsl	r3, r1, r3
 1594 0096 3B61     		str	r3, [r7, #16]
1220:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Set the new sample time */
1221:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 |= tmpreg2;
 1595              		.loc 1 1221 0
 1596 0098 7A69     		ldr	r2, [r7, #20]
 1597 009a 3B69     		ldr	r3, [r7, #16]
 1598 009c 1343     		orrs	r3, r3, r2
 1599 009e 7B61     		str	r3, [r7, #20]
1222:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Store the new register value */
1223:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->SMPR2 = tmpreg1;
 1600              		.loc 1 1223 0
 1601 00a0 7B68     		ldr	r3, [r7, #4]
 1602 00a2 7A69     		ldr	r2, [r7, #20]
 1603 00a4 1A61     		str	r2, [r3, #16]
 1604              	.L66:
1224:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1225:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Rank configuration */
1226:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Get the old register value */
1227:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 = ADCx->JSQR;
 1605              		.loc 1 1227 0
 1606 00a6 7B68     		ldr	r3, [r7, #4]
 1607 00a8 9B6B     		ldr	r3, [r3, #56]
 1608 00aa 7B61     		str	r3, [r7, #20]
1228:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Get JL value: Number = JL+1 */
1229:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg3 =  (tmpreg1 & JSQR_JL_SET)>> 20;
 1609              		.loc 1 1229 0
 1610 00ac 7B69     		ldr	r3, [r7, #20]
 1611 00ae 03F44013 		and	r3, r3, #3145728
 1612 00b2 1B0D     		lsrs	r3, r3, #20
 1613 00b4 FB60     		str	r3, [r7, #12]
1230:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Calculate the mask to clear: ((Rank-1)+(4-JL-1)) */
1231:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg2 = JSQR_JSQ_SET << (5 * (uint8_t)((Rank + 3) - (tmpreg3 + 1)));
 1614              		.loc 1 1231 0
 1615 00b6 FB68     		ldr	r3, [r7, #12]
 1616 00b8 DBB2     		uxtb	r3, r3
 1617 00ba BA78     		ldrb	r2, [r7, #2]
 1618 00bc D31A     		subs	r3, r2, r3
 1619 00be DBB2     		uxtb	r3, r3
 1620 00c0 0233     		adds	r3, r3, #2
 1621 00c2 DBB2     		uxtb	r3, r3
 1622 00c4 1A46     		mov	r2, r3
 1623 00c6 1346     		mov	r3, r2
 1624 00c8 9B00     		lsls	r3, r3, #2
 1625 00ca 1344     		add	r3, r3, r2
 1626 00cc 1F22     		movs	r2, #31
 1627 00ce 02FA03F3 		lsl	r3, r2, r3
 1628 00d2 3B61     		str	r3, [r7, #16]
1232:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Clear the old JSQx bits for the selected rank */
1233:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 &= ~tmpreg2;
 1629              		.loc 1 1233 0
 1630 00d4 3B69     		ldr	r3, [r7, #16]
 1631 00d6 DB43     		mvns	r3, r3
 1632 00d8 7A69     		ldr	r2, [r7, #20]
 1633 00da 1340     		ands	r3, r3, r2
 1634 00dc 7B61     		str	r3, [r7, #20]
1234:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Calculate the mask to set: ((Rank-1)+(4-JL-1)) */
1235:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg2 = (uint32_t)ADC_Channel << (5 * (uint8_t)((Rank + 3) - (tmpreg3 + 1)));
 1635              		.loc 1 1235 0
 1636 00de F978     		ldrb	r1, [r7, #3]	@ zero_extendqisi2
 1637 00e0 FB68     		ldr	r3, [r7, #12]
 1638 00e2 DBB2     		uxtb	r3, r3
 1639 00e4 BA78     		ldrb	r2, [r7, #2]
 1640 00e6 D31A     		subs	r3, r2, r3
 1641 00e8 DBB2     		uxtb	r3, r3
 1642 00ea 0233     		adds	r3, r3, #2
 1643 00ec DBB2     		uxtb	r3, r3
 1644 00ee 1A46     		mov	r2, r3
 1645 00f0 1346     		mov	r3, r2
 1646 00f2 9B00     		lsls	r3, r3, #2
 1647 00f4 1344     		add	r3, r3, r2
 1648 00f6 01FA03F3 		lsl	r3, r1, r3
 1649 00fa 3B61     		str	r3, [r7, #16]
1236:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set the JSQx bits for the selected rank */
1237:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 |= tmpreg2;
 1650              		.loc 1 1237 0
 1651 00fc 7A69     		ldr	r2, [r7, #20]
 1652 00fe 3B69     		ldr	r3, [r7, #16]
 1653 0100 1343     		orrs	r3, r3, r2
 1654 0102 7B61     		str	r3, [r7, #20]
1238:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Store the new register value */
1239:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADCx->JSQR = tmpreg1;
 1655              		.loc 1 1239 0
 1656 0104 7B68     		ldr	r3, [r7, #4]
 1657 0106 7A69     		ldr	r2, [r7, #20]
 1658 0108 9A63     		str	r2, [r3, #56]
1240:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 1659              		.loc 1 1240 0
 1660 010a 1C37     		adds	r7, r7, #28
 1661 010c BD46     		mov	sp, r7
 1662              		@ sp needed
 1663 010e 5DF8047B 		ldr	r7, [sp], #4
 1664 0112 7047     		bx	lr
 1665              		.cfi_endproc
 1666              	.LFE133:
 1668              		.section	.text.ADC_InjectedSequencerLengthConfig,"ax",%progbits
 1669              		.align	2
 1670              		.global	ADC_InjectedSequencerLengthConfig
 1671              		.thumb
 1672              		.thumb_func
 1674              	ADC_InjectedSequencerLengthConfig:
 1675              	.LFB134:
1241:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1242:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1243:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Configures the sequencer length for injected channels
1244:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1245:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  Length: The sequencer length. 
1246:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter must be a number between 1 to 4.
1247:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
1248:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1249:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_InjectedSequencerLengthConfig(ADC_TypeDef* ADCx, uint8_t Length)
1250:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 1676              		.loc 1 1250 0
 1677              		.cfi_startproc
 1678              		@ args = 0, pretend = 0, frame = 16
 1679              		@ frame_needed = 1, uses_anonymous_args = 0
 1680              		@ link register save eliminated.
 1681 0000 80B4     		push	{r7}
 1682              	.LCFI70:
 1683              		.cfi_def_cfa_offset 4
 1684              		.cfi_offset 7, -4
 1685 0002 85B0     		sub	sp, sp, #20
 1686              	.LCFI71:
 1687              		.cfi_def_cfa_offset 24
 1688 0004 00AF     		add	r7, sp, #0
 1689              	.LCFI72:
 1690              		.cfi_def_cfa_register 7
 1691 0006 7860     		str	r0, [r7, #4]
 1692 0008 0B46     		mov	r3, r1
 1693 000a FB70     		strb	r3, [r7, #3]
1251:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   uint32_t tmpreg1 = 0;
 1694              		.loc 1 1251 0
 1695 000c 0023     		movs	r3, #0
 1696 000e FB60     		str	r3, [r7, #12]
1252:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   uint32_t tmpreg2 = 0;
 1697              		.loc 1 1252 0
 1698 0010 0023     		movs	r3, #0
 1699 0012 BB60     		str	r3, [r7, #8]
1253:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1254:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1255:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_INJECTED_LENGTH(Length));
1256:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1257:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Get the old register value */
1258:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 = ADCx->JSQR;
 1700              		.loc 1 1258 0
 1701 0014 7B68     		ldr	r3, [r7, #4]
 1702 0016 9B6B     		ldr	r3, [r3, #56]
 1703 0018 FB60     		str	r3, [r7, #12]
1259:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1260:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Clear the old injected sequence length JL bits */
1261:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 &= JSQR_JL_RESET;
 1704              		.loc 1 1261 0
 1705 001a FB68     		ldr	r3, [r7, #12]
 1706 001c 23F44013 		bic	r3, r3, #3145728
 1707 0020 FB60     		str	r3, [r7, #12]
1262:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1263:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set the injected sequence length JL bits */
1264:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg2 = Length - 1; 
 1708              		.loc 1 1264 0
 1709 0022 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1710 0024 013B     		subs	r3, r3, #1
 1711 0026 BB60     		str	r3, [r7, #8]
1265:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 |= tmpreg2 << 20;
 1712              		.loc 1 1265 0
 1713 0028 BB68     		ldr	r3, [r7, #8]
 1714 002a 1B05     		lsls	r3, r3, #20
 1715 002c FA68     		ldr	r2, [r7, #12]
 1716 002e 1343     		orrs	r3, r3, r2
 1717 0030 FB60     		str	r3, [r7, #12]
1266:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1267:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Store the new register value */
1268:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADCx->JSQR = tmpreg1;
 1718              		.loc 1 1268 0
 1719 0032 7B68     		ldr	r3, [r7, #4]
 1720 0034 FA68     		ldr	r2, [r7, #12]
 1721 0036 9A63     		str	r2, [r3, #56]
1269:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 1722              		.loc 1 1269 0
 1723 0038 1437     		adds	r7, r7, #20
 1724 003a BD46     		mov	sp, r7
 1725              		@ sp needed
 1726 003c 5DF8047B 		ldr	r7, [sp], #4
 1727 0040 7047     		bx	lr
 1728              		.cfi_endproc
 1729              	.LFE134:
 1731 0042 00BF     		.section	.text.ADC_SetInjectedOffset,"ax",%progbits
 1732              		.align	2
 1733              		.global	ADC_SetInjectedOffset
 1734              		.thumb
 1735              		.thumb_func
 1737              	ADC_SetInjectedOffset:
 1738              	.LFB135:
1270:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1271:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1272:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Set the injected channels conversion value offset
1273:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1274:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_InjectedChannel: the ADC injected channel to set its offset. 
1275:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
1276:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_InjectedChannel_1: Injected Channel1 selected
1277:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_InjectedChannel_2: Injected Channel2 selected
1278:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_InjectedChannel_3: Injected Channel3 selected
1279:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_InjectedChannel_4: Injected Channel4 selected
1280:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  Offset: the offset value for the selected ADC injected channel
1281:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter must be a 12bit value.
1282:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
1283:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1284:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_SetInjectedOffset(ADC_TypeDef* ADCx, uint8_t ADC_InjectedChannel, uint16_t Offset)
1285:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 1739              		.loc 1 1285 0
 1740              		.cfi_startproc
 1741              		@ args = 0, pretend = 0, frame = 16
 1742              		@ frame_needed = 1, uses_anonymous_args = 0
 1743              		@ link register save eliminated.
 1744 0000 80B4     		push	{r7}
 1745              	.LCFI73:
 1746              		.cfi_def_cfa_offset 4
 1747              		.cfi_offset 7, -4
 1748 0002 85B0     		sub	sp, sp, #20
 1749              	.LCFI74:
 1750              		.cfi_def_cfa_offset 24
 1751 0004 00AF     		add	r7, sp, #0
 1752              	.LCFI75:
 1753              		.cfi_def_cfa_register 7
 1754 0006 7860     		str	r0, [r7, #4]
 1755 0008 1346     		mov	r3, r2
 1756 000a 0A46     		mov	r2, r1
 1757 000c FA70     		strb	r2, [r7, #3]
 1758 000e 3B80     		strh	r3, [r7]	@ movhi
1286:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     __IO uint32_t tmp = 0;
 1759              		.loc 1 1286 0
 1760 0010 0023     		movs	r3, #0
 1761 0012 FB60     		str	r3, [r7, #12]
1287:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1288:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1289:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_INJECTED_CHANNEL(ADC_InjectedChannel));
1290:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_OFFSET(Offset));
1291:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1292:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmp = (uint32_t)ADCx;
 1762              		.loc 1 1292 0
 1763 0014 7B68     		ldr	r3, [r7, #4]
 1764 0016 FB60     		str	r3, [r7, #12]
1293:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmp += ADC_InjectedChannel;
 1765              		.loc 1 1293 0
 1766 0018 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 1767 001a FB68     		ldr	r3, [r7, #12]
 1768 001c 1344     		add	r3, r3, r2
 1769 001e FB60     		str	r3, [r7, #12]
1294:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1295:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set the selected injected channel data offset */
1296:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  *(__IO uint32_t *) tmp = (uint32_t)Offset;
 1770              		.loc 1 1296 0
 1771 0020 FB68     		ldr	r3, [r7, #12]
 1772 0022 3A88     		ldrh	r2, [r7]
 1773 0024 1A60     		str	r2, [r3]
1297:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 1774              		.loc 1 1297 0
 1775 0026 1437     		adds	r7, r7, #20
 1776 0028 BD46     		mov	sp, r7
 1777              		@ sp needed
 1778 002a 5DF8047B 		ldr	r7, [sp], #4
 1779 002e 7047     		bx	lr
 1780              		.cfi_endproc
 1781              	.LFE135:
 1783              		.section	.text.ADC_ExternalTrigInjectedConvConfig,"ax",%progbits
 1784              		.align	2
 1785              		.global	ADC_ExternalTrigInjectedConvConfig
 1786              		.thumb
 1787              		.thumb_func
 1789              	ADC_ExternalTrigInjectedConvConfig:
 1790              	.LFB136:
1298:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1299:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  /**
1300:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Configures the ADCx external trigger for injected channels conversion.
1301:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1302:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_ExternalTrigInjecConv: specifies the ADC trigger to start injected conversion.
1303:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:                    
1304:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T1_CC4: Timer1 capture compare4 selected 
1305:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T1_TRGO: Timer1 TRGO event selected 
1306:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T2_CC1: Timer2 capture compare1 selected 
1307:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T2_TRGO: Timer2 TRGO event selected 
1308:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T3_CC2: Timer3 capture compare2 selected 
1309:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T3_CC4: Timer3 capture compare4 selected 
1310:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T4_CC1: Timer4 capture compare1 selected             
1311:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T4_CC2: Timer4 capture compare2 selected 
1312:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T4_CC3: Timer4 capture compare3 selected             
1313:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T4_TRGO: Timer4 TRGO event selected 
1314:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T5_CC4: Timer5 capture compare4 selected             
1315:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T5_TRGO: Timer5 TRGO event selected                  
1316:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T8_CC2: Timer8 capture compare2 selected
1317:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T8_CC3: Timer8 capture compare3 selected             
1318:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T8_CC4: Timer8 capture compare4 selected 
1319:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_Ext_IT15: External interrupt line 15 event selected  
1320:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
1321:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1322:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_ExternalTrigInjectedConvConfig(ADC_TypeDef* ADCx, uint32_t ADC_ExternalTrigInjecConv)
1323:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 1791              		.loc 1 1323 0
 1792              		.cfi_startproc
 1793              		@ args = 0, pretend = 0, frame = 16
 1794              		@ frame_needed = 1, uses_anonymous_args = 0
 1795              		@ link register save eliminated.
 1796 0000 80B4     		push	{r7}
 1797              	.LCFI76:
 1798              		.cfi_def_cfa_offset 4
 1799              		.cfi_offset 7, -4
 1800 0002 85B0     		sub	sp, sp, #20
 1801              	.LCFI77:
 1802              		.cfi_def_cfa_offset 24
 1803 0004 00AF     		add	r7, sp, #0
 1804              	.LCFI78:
 1805              		.cfi_def_cfa_register 7
 1806 0006 7860     		str	r0, [r7, #4]
 1807 0008 3960     		str	r1, [r7]
1324:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   uint32_t tmpreg = 0;
 1808              		.loc 1 1324 0
 1809 000a 0023     		movs	r3, #0
 1810 000c FB60     		str	r3, [r7, #12]
1325:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1326:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1327:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_EXT_INJEC_TRIG(ADC_ExternalTrigInjecConv));
1328:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1329:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Get the old register value */
1330:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg = ADCx->CR2;
 1811              		.loc 1 1330 0
 1812 000e 7B68     		ldr	r3, [r7, #4]
 1813 0010 9B68     		ldr	r3, [r3, #8]
 1814 0012 FB60     		str	r3, [r7, #12]
1331:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1332:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Clear the old external event selection for injected group */
1333:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg &= CR2_JEXTSEL_RESET;
 1815              		.loc 1 1333 0
 1816 0014 FB68     		ldr	r3, [r7, #12]
 1817 0016 23F47023 		bic	r3, r3, #983040
 1818 001a FB60     		str	r3, [r7, #12]
1334:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1335:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set the external event selection for injected group */
1336:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg |= ADC_ExternalTrigInjecConv;
 1819              		.loc 1 1336 0
 1820 001c FA68     		ldr	r2, [r7, #12]
 1821 001e 3B68     		ldr	r3, [r7]
 1822 0020 1343     		orrs	r3, r3, r2
 1823 0022 FB60     		str	r3, [r7, #12]
1337:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1338:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Store the new register value */
1339:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADCx->CR2 = tmpreg;
 1824              		.loc 1 1339 0
 1825 0024 7B68     		ldr	r3, [r7, #4]
 1826 0026 FA68     		ldr	r2, [r7, #12]
 1827 0028 9A60     		str	r2, [r3, #8]
1340:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 1828              		.loc 1 1340 0
 1829 002a 1437     		adds	r7, r7, #20
 1830 002c BD46     		mov	sp, r7
 1831              		@ sp needed
 1832 002e 5DF8047B 		ldr	r7, [sp], #4
 1833 0032 7047     		bx	lr
 1834              		.cfi_endproc
 1835              	.LFE136:
 1837              		.section	.text.ADC_ExternalTrigInjectedConvEdgeConfig,"ax",%progbits
 1838              		.align	2
 1839              		.global	ADC_ExternalTrigInjectedConvEdgeConfig
 1840              		.thumb
 1841              		.thumb_func
 1843              	ADC_ExternalTrigInjectedConvEdgeConfig:
 1844              	.LFB137:
1341:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1342:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1343:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Configures the ADCx external trigger edge for injected channels conversion.
1344:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1345:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_ExternalTrigInjecConvEdge: specifies the ADC external trigger edge
1346:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         to start injected conversion. 
1347:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
1348:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConvEdge_None: external trigger disabled for 
1349:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *                                                     injected conversion
1350:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConvEdge_Rising: detection on rising edge
1351:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConvEdge_Falling: detection on falling edge
1352:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConvEdge_RisingFalling: detection on both rising 
1353:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *                                                               and falling edge
1354:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
1355:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1356:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_ExternalTrigInjectedConvEdgeConfig(ADC_TypeDef* ADCx, uint32_t ADC_ExternalTrigInjecConvEd
1357:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 1845              		.loc 1 1357 0
 1846              		.cfi_startproc
 1847              		@ args = 0, pretend = 0, frame = 16
 1848              		@ frame_needed = 1, uses_anonymous_args = 0
 1849              		@ link register save eliminated.
 1850 0000 80B4     		push	{r7}
 1851              	.LCFI79:
 1852              		.cfi_def_cfa_offset 4
 1853              		.cfi_offset 7, -4
 1854 0002 85B0     		sub	sp, sp, #20
 1855              	.LCFI80:
 1856              		.cfi_def_cfa_offset 24
 1857 0004 00AF     		add	r7, sp, #0
 1858              	.LCFI81:
 1859              		.cfi_def_cfa_register 7
 1860 0006 7860     		str	r0, [r7, #4]
 1861 0008 3960     		str	r1, [r7]
1358:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   uint32_t tmpreg = 0;
 1862              		.loc 1 1358 0
 1863 000a 0023     		movs	r3, #0
 1864 000c FB60     		str	r3, [r7, #12]
1359:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1360:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1361:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(ADC_ExternalTrigInjecConvEdge));
1362:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Get the old register value */
1363:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg = ADCx->CR2;
 1865              		.loc 1 1363 0
 1866 000e 7B68     		ldr	r3, [r7, #4]
 1867 0010 9B68     		ldr	r3, [r3, #8]
 1868 0012 FB60     		str	r3, [r7, #12]
1364:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Clear the old external trigger edge for injected group */
1365:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg &= CR2_JEXTEN_RESET;
 1869              		.loc 1 1365 0
 1870 0014 FB68     		ldr	r3, [r7, #12]
 1871 0016 23F44013 		bic	r3, r3, #3145728
 1872 001a FB60     		str	r3, [r7, #12]
1366:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set the new external trigger edge for injected group */
1367:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg |= ADC_ExternalTrigInjecConvEdge;
 1873              		.loc 1 1367 0
 1874 001c FA68     		ldr	r2, [r7, #12]
 1875 001e 3B68     		ldr	r3, [r7]
 1876 0020 1343     		orrs	r3, r3, r2
 1877 0022 FB60     		str	r3, [r7, #12]
1368:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Store the new register value */
1369:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADCx->CR2 = tmpreg;
 1878              		.loc 1 1369 0
 1879 0024 7B68     		ldr	r3, [r7, #4]
 1880 0026 FA68     		ldr	r2, [r7, #12]
 1881 0028 9A60     		str	r2, [r3, #8]
1370:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 1882              		.loc 1 1370 0
 1883 002a 1437     		adds	r7, r7, #20
 1884 002c BD46     		mov	sp, r7
 1885              		@ sp needed
 1886 002e 5DF8047B 		ldr	r7, [sp], #4
 1887 0032 7047     		bx	lr
 1888              		.cfi_endproc
 1889              	.LFE137:
 1891              		.section	.text.ADC_SoftwareStartInjectedConv,"ax",%progbits
 1892              		.align	2
 1893              		.global	ADC_SoftwareStartInjectedConv
 1894              		.thumb
 1895              		.thumb_func
 1897              	ADC_SoftwareStartInjectedConv:
 1898              	.LFB138:
1371:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1372:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1373:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Enables the selected ADC software start conversion of the injected channels.
1374:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1375:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
1376:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1377:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_SoftwareStartInjectedConv(ADC_TypeDef* ADCx)
1378:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 1899              		.loc 1 1378 0
 1900              		.cfi_startproc
 1901              		@ args = 0, pretend = 0, frame = 8
 1902              		@ frame_needed = 1, uses_anonymous_args = 0
 1903              		@ link register save eliminated.
 1904 0000 80B4     		push	{r7}
 1905              	.LCFI82:
 1906              		.cfi_def_cfa_offset 4
 1907              		.cfi_offset 7, -4
 1908 0002 83B0     		sub	sp, sp, #12
 1909              	.LCFI83:
 1910              		.cfi_def_cfa_offset 16
 1911 0004 00AF     		add	r7, sp, #0
 1912              	.LCFI84:
 1913              		.cfi_def_cfa_register 7
 1914 0006 7860     		str	r0, [r7, #4]
1379:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1380:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1381:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Enable the selected ADC conversion for injected group */
1382:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADCx->CR2 |= (uint32_t)ADC_CR2_JSWSTART;
 1915              		.loc 1 1382 0
 1916 0008 7B68     		ldr	r3, [r7, #4]
 1917 000a 9B68     		ldr	r3, [r3, #8]
 1918 000c 43F48002 		orr	r2, r3, #4194304
 1919 0010 7B68     		ldr	r3, [r7, #4]
 1920 0012 9A60     		str	r2, [r3, #8]
1383:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 1921              		.loc 1 1383 0
 1922 0014 0C37     		adds	r7, r7, #12
 1923 0016 BD46     		mov	sp, r7
 1924              		@ sp needed
 1925 0018 5DF8047B 		ldr	r7, [sp], #4
 1926 001c 7047     		bx	lr
 1927              		.cfi_endproc
 1928              	.LFE138:
 1930 001e 00BF     		.section	.text.ADC_GetSoftwareStartInjectedConvCmdStatus,"ax",%progbits
 1931              		.align	2
 1932              		.global	ADC_GetSoftwareStartInjectedConvCmdStatus
 1933              		.thumb
 1934              		.thumb_func
 1936              	ADC_GetSoftwareStartInjectedConvCmdStatus:
 1937              	.LFB139:
1384:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1385:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1386:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Gets the selected ADC Software start injected conversion Status.
1387:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1388:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval The new state of ADC software start injected conversion (SET or RESET).
1389:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1390:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** FlagStatus ADC_GetSoftwareStartInjectedConvCmdStatus(ADC_TypeDef* ADCx)
1391:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 1938              		.loc 1 1391 0
 1939              		.cfi_startproc
 1940              		@ args = 0, pretend = 0, frame = 16
 1941              		@ frame_needed = 1, uses_anonymous_args = 0
 1942              		@ link register save eliminated.
 1943 0000 80B4     		push	{r7}
 1944              	.LCFI85:
 1945              		.cfi_def_cfa_offset 4
 1946              		.cfi_offset 7, -4
 1947 0002 85B0     		sub	sp, sp, #20
 1948              	.LCFI86:
 1949              		.cfi_def_cfa_offset 24
 1950 0004 00AF     		add	r7, sp, #0
 1951              	.LCFI87:
 1952              		.cfi_def_cfa_register 7
 1953 0006 7860     		str	r0, [r7, #4]
1392:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   FlagStatus bitstatus = RESET;
 1954              		.loc 1 1392 0
 1955 0008 0023     		movs	r3, #0
 1956 000a FB73     		strb	r3, [r7, #15]
1393:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1394:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1395:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1396:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the status of JSWSTART bit */
1397:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if ((ADCx->CR2 & ADC_CR2_JSWSTART) != (uint32_t)RESET)
 1957              		.loc 1 1397 0
 1958 000c 7B68     		ldr	r3, [r7, #4]
 1959 000e 9B68     		ldr	r3, [r3, #8]
 1960 0010 03F48003 		and	r3, r3, #4194304
 1961 0014 002B     		cmp	r3, #0
 1962 0016 02D0     		beq	.L73
1398:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1399:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* JSWSTART bit is set */
1400:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     bitstatus = SET;
 1963              		.loc 1 1400 0
 1964 0018 0123     		movs	r3, #1
 1965 001a FB73     		strb	r3, [r7, #15]
 1966 001c 01E0     		b	.L74
 1967              	.L73:
1401:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1402:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
1403:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1404:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* JSWSTART bit is reset */
1405:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     bitstatus = RESET;
 1968              		.loc 1 1405 0
 1969 001e 0023     		movs	r3, #0
 1970 0020 FB73     		strb	r3, [r7, #15]
 1971              	.L74:
1406:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1407:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Return the JSWSTART bit status */
1408:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   return  bitstatus;
 1972              		.loc 1 1408 0
 1973 0022 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
1409:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 1974              		.loc 1 1409 0
 1975 0024 1846     		mov	r0, r3
 1976 0026 1437     		adds	r7, r7, #20
 1977 0028 BD46     		mov	sp, r7
 1978              		@ sp needed
 1979 002a 5DF8047B 		ldr	r7, [sp], #4
 1980 002e 7047     		bx	lr
 1981              		.cfi_endproc
 1982              	.LFE139:
 1984              		.section	.text.ADC_AutoInjectedConvCmd,"ax",%progbits
 1985              		.align	2
 1986              		.global	ADC_AutoInjectedConvCmd
 1987              		.thumb
 1988              		.thumb_func
 1990              	ADC_AutoInjectedConvCmd:
 1991              	.LFB140:
1410:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1411:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1412:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Enables or disables the selected ADC automatic injected group 
1413:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         conversion after regular one.
1414:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1415:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  NewState: new state of the selected ADC auto injected conversion
1416:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
1417:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
1418:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1419:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_AutoInjectedConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
1420:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 1992              		.loc 1 1420 0
 1993              		.cfi_startproc
 1994              		@ args = 0, pretend = 0, frame = 8
 1995              		@ frame_needed = 1, uses_anonymous_args = 0
 1996              		@ link register save eliminated.
 1997 0000 80B4     		push	{r7}
 1998              	.LCFI88:
 1999              		.cfi_def_cfa_offset 4
 2000              		.cfi_offset 7, -4
 2001 0002 83B0     		sub	sp, sp, #12
 2002              	.LCFI89:
 2003              		.cfi_def_cfa_offset 16
 2004 0004 00AF     		add	r7, sp, #0
 2005              	.LCFI90:
 2006              		.cfi_def_cfa_register 7
 2007 0006 7860     		str	r0, [r7, #4]
 2008 0008 0B46     		mov	r3, r1
 2009 000a FB70     		strb	r3, [r7, #3]
1421:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1422:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1423:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1424:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 2010              		.loc 1 1424 0
 2011 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2012 000e 002B     		cmp	r3, #0
 2013 0010 06D0     		beq	.L77
1425:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1426:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Enable the selected ADC automatic injected group conversion */
1427:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR1 |= (uint32_t)ADC_CR1_JAUTO;
 2014              		.loc 1 1427 0
 2015 0012 7B68     		ldr	r3, [r7, #4]
 2016 0014 5B68     		ldr	r3, [r3, #4]
 2017 0016 43F48062 		orr	r2, r3, #1024
 2018 001a 7B68     		ldr	r3, [r7, #4]
 2019 001c 5A60     		str	r2, [r3, #4]
 2020 001e 05E0     		b	.L76
 2021              	.L77:
1428:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1429:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
1430:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1431:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Disable the selected ADC automatic injected group conversion */
1432:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR1 &= (uint32_t)(~ADC_CR1_JAUTO);
 2022              		.loc 1 1432 0
 2023 0020 7B68     		ldr	r3, [r7, #4]
 2024 0022 5B68     		ldr	r3, [r3, #4]
 2025 0024 23F48062 		bic	r2, r3, #1024
 2026 0028 7B68     		ldr	r3, [r7, #4]
 2027 002a 5A60     		str	r2, [r3, #4]
 2028              	.L76:
1433:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1434:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 2029              		.loc 1 1434 0
 2030 002c 0C37     		adds	r7, r7, #12
 2031 002e BD46     		mov	sp, r7
 2032              		@ sp needed
 2033 0030 5DF8047B 		ldr	r7, [sp], #4
 2034 0034 7047     		bx	lr
 2035              		.cfi_endproc
 2036              	.LFE140:
 2038 0036 00BF     		.section	.text.ADC_InjectedDiscModeCmd,"ax",%progbits
 2039              		.align	2
 2040              		.global	ADC_InjectedDiscModeCmd
 2041              		.thumb
 2042              		.thumb_func
 2044              	ADC_InjectedDiscModeCmd:
 2045              	.LFB141:
1435:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1436:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1437:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Enables or disables the discontinuous mode for injected group 
1438:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         channel for the specified ADC
1439:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1440:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  NewState: new state of the selected ADC discontinuous mode on injected
1441:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         group channel.
1442:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
1443:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
1444:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1445:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_InjectedDiscModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
1446:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 2046              		.loc 1 1446 0
 2047              		.cfi_startproc
 2048              		@ args = 0, pretend = 0, frame = 8
 2049              		@ frame_needed = 1, uses_anonymous_args = 0
 2050              		@ link register save eliminated.
 2051 0000 80B4     		push	{r7}
 2052              	.LCFI91:
 2053              		.cfi_def_cfa_offset 4
 2054              		.cfi_offset 7, -4
 2055 0002 83B0     		sub	sp, sp, #12
 2056              	.LCFI92:
 2057              		.cfi_def_cfa_offset 16
 2058 0004 00AF     		add	r7, sp, #0
 2059              	.LCFI93:
 2060              		.cfi_def_cfa_register 7
 2061 0006 7860     		str	r0, [r7, #4]
 2062 0008 0B46     		mov	r3, r1
 2063 000a FB70     		strb	r3, [r7, #3]
1447:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1448:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1449:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1450:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 2064              		.loc 1 1450 0
 2065 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2066 000e 002B     		cmp	r3, #0
 2067 0010 06D0     		beq	.L80
1451:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1452:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Enable the selected ADC injected discontinuous mode */
1453:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR1 |= (uint32_t)ADC_CR1_JDISCEN;
 2068              		.loc 1 1453 0
 2069 0012 7B68     		ldr	r3, [r7, #4]
 2070 0014 5B68     		ldr	r3, [r3, #4]
 2071 0016 43F48052 		orr	r2, r3, #4096
 2072 001a 7B68     		ldr	r3, [r7, #4]
 2073 001c 5A60     		str	r2, [r3, #4]
 2074 001e 05E0     		b	.L79
 2075              	.L80:
1454:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1455:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
1456:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1457:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Disable the selected ADC injected discontinuous mode */
1458:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR1 &= (uint32_t)(~ADC_CR1_JDISCEN);
 2076              		.loc 1 1458 0
 2077 0020 7B68     		ldr	r3, [r7, #4]
 2078 0022 5B68     		ldr	r3, [r3, #4]
 2079 0024 23F48052 		bic	r2, r3, #4096
 2080 0028 7B68     		ldr	r3, [r7, #4]
 2081 002a 5A60     		str	r2, [r3, #4]
 2082              	.L79:
1459:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1460:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 2083              		.loc 1 1460 0
 2084 002c 0C37     		adds	r7, r7, #12
 2085 002e BD46     		mov	sp, r7
 2086              		@ sp needed
 2087 0030 5DF8047B 		ldr	r7, [sp], #4
 2088 0034 7047     		bx	lr
 2089              		.cfi_endproc
 2090              	.LFE141:
 2092 0036 00BF     		.section	.text.ADC_GetInjectedConversionValue,"ax",%progbits
 2093              		.align	2
 2094              		.global	ADC_GetInjectedConversionValue
 2095              		.thumb
 2096              		.thumb_func
 2098              	ADC_GetInjectedConversionValue:
 2099              	.LFB142:
1461:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1462:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1463:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Returns the ADC injected channel conversion result
1464:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1465:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_InjectedChannel: the converted ADC injected channel.
1466:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
1467:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_InjectedChannel_1: Injected Channel1 selected
1468:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_InjectedChannel_2: Injected Channel2 selected
1469:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_InjectedChannel_3: Injected Channel3 selected
1470:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_InjectedChannel_4: Injected Channel4 selected
1471:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval The Data conversion value.
1472:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1473:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** uint16_t ADC_GetInjectedConversionValue(ADC_TypeDef* ADCx, uint8_t ADC_InjectedChannel)
1474:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 2100              		.loc 1 1474 0
 2101              		.cfi_startproc
 2102              		@ args = 0, pretend = 0, frame = 16
 2103              		@ frame_needed = 1, uses_anonymous_args = 0
 2104              		@ link register save eliminated.
 2105 0000 80B4     		push	{r7}
 2106              	.LCFI94:
 2107              		.cfi_def_cfa_offset 4
 2108              		.cfi_offset 7, -4
 2109 0002 85B0     		sub	sp, sp, #20
 2110              	.LCFI95:
 2111              		.cfi_def_cfa_offset 24
 2112 0004 00AF     		add	r7, sp, #0
 2113              	.LCFI96:
 2114              		.cfi_def_cfa_register 7
 2115 0006 7860     		str	r0, [r7, #4]
 2116 0008 0B46     		mov	r3, r1
 2117 000a FB70     		strb	r3, [r7, #3]
1475:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   __IO uint32_t tmp = 0;
 2118              		.loc 1 1475 0
 2119 000c 0023     		movs	r3, #0
 2120 000e FB60     		str	r3, [r7, #12]
1476:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1477:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1478:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1479:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_INJECTED_CHANNEL(ADC_InjectedChannel));
1480:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1481:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmp = (uint32_t)ADCx;
 2121              		.loc 1 1481 0
 2122 0010 7B68     		ldr	r3, [r7, #4]
 2123 0012 FB60     		str	r3, [r7, #12]
1482:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmp += ADC_InjectedChannel + JDR_OFFSET;
 2124              		.loc 1 1482 0
 2125 0014 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 2126 0016 FB68     		ldr	r3, [r7, #12]
 2127 0018 1344     		add	r3, r3, r2
 2128 001a 2833     		adds	r3, r3, #40
 2129 001c FB60     		str	r3, [r7, #12]
1483:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1484:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Returns the selected injected channel conversion data value */
1485:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   return (uint16_t) (*(__IO uint32_t*)  tmp); 
 2130              		.loc 1 1485 0
 2131 001e FB68     		ldr	r3, [r7, #12]
 2132 0020 1B68     		ldr	r3, [r3]
 2133 0022 9BB2     		uxth	r3, r3
1486:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 2134              		.loc 1 1486 0
 2135 0024 1846     		mov	r0, r3
 2136 0026 1437     		adds	r7, r7, #20
 2137 0028 BD46     		mov	sp, r7
 2138              		@ sp needed
 2139 002a 5DF8047B 		ldr	r7, [sp], #4
 2140 002e 7047     		bx	lr
 2141              		.cfi_endproc
 2142              	.LFE142:
 2144              		.section	.text.ADC_ITConfig,"ax",%progbits
 2145              		.align	2
 2146              		.global	ADC_ITConfig
 2147              		.thumb
 2148              		.thumb_func
 2150              	ADC_ITConfig:
 2151              	.LFB143:
1487:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1488:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @}
1489:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1490:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1491:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /** @defgroup ADC_Group7 Interrupts and flags management functions
1492:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  *  @brief   Interrupts and flags management functions
1493:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  *
1494:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** @verbatim   
1495:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  ===============================================================================
1496:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                    Interrupts and flags management functions
1497:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  ===============================================================================  
1498:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1499:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   This section provides functions allowing to configure the ADC Interrupts and 
1500:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   to get the status and clear flags and Interrupts pending bits.
1501:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1502:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   Each ADC provides 4 Interrupts sources and 6 Flags which can be divided into 
1503:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   3 groups:
1504:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1505:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   I. Flags and Interrupts for ADC regular channels
1506:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   =================================================
1507:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   Flags :
1508:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ---------- 
1509:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      1. ADC_FLAG_OVR : Overrun detection when regular converted data are lost
1510:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1511:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      2. ADC_FLAG_EOC : Regular channel end of conversion ==> to indicate (depending 
1512:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****               on EOCS bit, managed by ADC_EOCOnEachRegularChannelCmd() ) the end of:
1513:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                ==> a regular CHANNEL conversion 
1514:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                ==> sequence of regular GROUP conversions .
1515:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1516:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      3. ADC_FLAG_STRT: Regular channel start ==> to indicate when regular CHANNEL 
1517:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****               conversion starts.
1518:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1519:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   Interrupts :
1520:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ------------
1521:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      1. ADC_IT_OVR : specifies the interrupt source for Overrun detection event.  
1522:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      2. ADC_IT_EOC : specifies the interrupt source for Regular channel end of 
1523:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                      conversion event.
1524:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1525:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1526:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   II. Flags and Interrupts for ADC Injected channels
1527:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   =================================================
1528:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   Flags :
1529:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ---------- 
1530:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      1. ADC_FLAG_JEOC : Injected channel end of conversion ==> to indicate at 
1531:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                the end of injected GROUP conversion  
1532:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****               
1533:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      2. ADC_FLAG_JSTRT: Injected channel start ==> to indicate hardware when 
1534:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                injected GROUP conversion starts.
1535:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1536:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   Interrupts :
1537:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ------------
1538:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      1. ADC_IT_JEOC : specifies the interrupt source for Injected channel end of 
1539:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                       conversion event.     
1540:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1541:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   III. General Flags and Interrupts for the ADC
1542:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ================================================= 
1543:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   Flags :
1544:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ---------- 
1545:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      1. ADC_FLAG_AWD: Analog watchdog ==> to indicate if the converted voltage 
1546:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****               crosses the programmed thresholds values.
1547:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****               
1548:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   Interrupts :
1549:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ------------
1550:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      1. ADC_IT_AWD : specifies the interrupt source for Analog watchdog event. 
1551:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1552:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1553:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   The user should identify which mode will be used in his application to manage 
1554:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   the ADC controller events: Polling mode or Interrupt mode.
1555:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1556:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   In the Polling Mode it is advised to use the following functions:
1557:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****       - ADC_GetFlagStatus() : to check if flags events occur. 
1558:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****       - ADC_ClearFlag()     : to clear the flags events.
1559:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****       
1560:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   In the Interrupt Mode it is advised to use the following functions:
1561:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      - ADC_ITConfig()          : to enable or disable the interrupt source.
1562:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      - ADC_GetITStatus()       : to check if Interrupt occurs.
1563:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      - ADC_ClearITPendingBit() : to clear the Interrupt pending Bit 
1564:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                                  (corresponding Flag). 
1565:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** @endverbatim
1566:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @{
1567:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */ 
1568:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1569:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Enables or disables the specified ADC interrupts.
1570:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1571:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_IT: specifies the ADC interrupt sources to be enabled or disabled. 
1572:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
1573:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_IT_EOC: End of conversion interrupt mask
1574:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_IT_AWD: Analog watchdog interrupt mask
1575:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_IT_JEOC: End of injected conversion interrupt mask
1576:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_IT_OVR: Overrun interrupt enable                       
1577:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  NewState: new state of the specified ADC interrupts.
1578:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
1579:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
1580:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1581:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_ITConfig(ADC_TypeDef* ADCx, uint16_t ADC_IT, FunctionalState NewState)  
1582:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 2152              		.loc 1 1582 0
 2153              		.cfi_startproc
 2154              		@ args = 0, pretend = 0, frame = 16
 2155              		@ frame_needed = 1, uses_anonymous_args = 0
 2156              		@ link register save eliminated.
 2157 0000 80B4     		push	{r7}
 2158              	.LCFI97:
 2159              		.cfi_def_cfa_offset 4
 2160              		.cfi_offset 7, -4
 2161 0002 85B0     		sub	sp, sp, #20
 2162              	.LCFI98:
 2163              		.cfi_def_cfa_offset 24
 2164 0004 00AF     		add	r7, sp, #0
 2165              	.LCFI99:
 2166              		.cfi_def_cfa_register 7
 2167 0006 7860     		str	r0, [r7, #4]
 2168 0008 1346     		mov	r3, r2
 2169 000a 0A46     		mov	r2, r1	@ movhi
 2170 000c 7A80     		strh	r2, [r7, #2]	@ movhi
 2171 000e 7B70     		strb	r3, [r7, #1]
1583:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   uint32_t itmask = 0;
 2172              		.loc 1 1583 0
 2173 0010 0023     		movs	r3, #0
 2174 0012 FB60     		str	r3, [r7, #12]
1584:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1585:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1586:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1587:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_IT(ADC_IT)); 
1588:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1589:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Get the ADC IT index */
1590:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   itmask = (uint8_t)ADC_IT;
 2175              		.loc 1 1590 0
 2176 0014 7B88     		ldrh	r3, [r7, #2]	@ movhi
 2177 0016 DBB2     		uxtb	r3, r3
 2178 0018 FB60     		str	r3, [r7, #12]
1591:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   itmask = (uint32_t)0x01 << itmask;    
 2179              		.loc 1 1591 0
 2180 001a FB68     		ldr	r3, [r7, #12]
 2181 001c 0122     		movs	r2, #1
 2182 001e 02FA03F3 		lsl	r3, r2, r3
 2183 0022 FB60     		str	r3, [r7, #12]
1592:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1593:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 2184              		.loc 1 1593 0
 2185 0024 7B78     		ldrb	r3, [r7, #1]	@ zero_extendqisi2
 2186 0026 002B     		cmp	r3, #0
 2187 0028 06D0     		beq	.L85
1594:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1595:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Enable the selected ADC interrupts */
1596:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR1 |= itmask;
 2188              		.loc 1 1596 0
 2189 002a 7B68     		ldr	r3, [r7, #4]
 2190 002c 5A68     		ldr	r2, [r3, #4]
 2191 002e FB68     		ldr	r3, [r7, #12]
 2192 0030 1A43     		orrs	r2, r2, r3
 2193 0032 7B68     		ldr	r3, [r7, #4]
 2194 0034 5A60     		str	r2, [r3, #4]
 2195 0036 06E0     		b	.L84
 2196              	.L85:
1597:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1598:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
1599:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1600:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Disable the selected ADC interrupts */
1601:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR1 &= (~(uint32_t)itmask);
 2197              		.loc 1 1601 0
 2198 0038 7B68     		ldr	r3, [r7, #4]
 2199 003a 5A68     		ldr	r2, [r3, #4]
 2200 003c FB68     		ldr	r3, [r7, #12]
 2201 003e DB43     		mvns	r3, r3
 2202 0040 1A40     		ands	r2, r2, r3
 2203 0042 7B68     		ldr	r3, [r7, #4]
 2204 0044 5A60     		str	r2, [r3, #4]
 2205              	.L84:
1602:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1603:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 2206              		.loc 1 1603 0
 2207 0046 1437     		adds	r7, r7, #20
 2208 0048 BD46     		mov	sp, r7
 2209              		@ sp needed
 2210 004a 5DF8047B 		ldr	r7, [sp], #4
 2211 004e 7047     		bx	lr
 2212              		.cfi_endproc
 2213              	.LFE143:
 2215              		.section	.text.ADC_GetFlagStatus,"ax",%progbits
 2216              		.align	2
 2217              		.global	ADC_GetFlagStatus
 2218              		.thumb
 2219              		.thumb_func
 2221              	ADC_GetFlagStatus:
 2222              	.LFB144:
1604:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1605:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1606:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Checks whether the specified ADC flag is set or not.
1607:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1608:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_FLAG: specifies the flag to check. 
1609:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
1610:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_AWD: Analog watchdog flag
1611:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_EOC: End of conversion flag
1612:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_JEOC: End of injected group conversion flag
1613:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_JSTRT: Start of injected group conversion flag
1614:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_STRT: Start of regular group conversion flag
1615:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_OVR: Overrun flag                                                 
1616:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval The new state of ADC_FLAG (SET or RESET).
1617:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1618:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** FlagStatus ADC_GetFlagStatus(ADC_TypeDef* ADCx, uint8_t ADC_FLAG)
1619:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 2223              		.loc 1 1619 0
 2224              		.cfi_startproc
 2225              		@ args = 0, pretend = 0, frame = 16
 2226              		@ frame_needed = 1, uses_anonymous_args = 0
 2227              		@ link register save eliminated.
 2228 0000 80B4     		push	{r7}
 2229              	.LCFI100:
 2230              		.cfi_def_cfa_offset 4
 2231              		.cfi_offset 7, -4
 2232 0002 85B0     		sub	sp, sp, #20
 2233              	.LCFI101:
 2234              		.cfi_def_cfa_offset 24
 2235 0004 00AF     		add	r7, sp, #0
 2236              	.LCFI102:
 2237              		.cfi_def_cfa_register 7
 2238 0006 7860     		str	r0, [r7, #4]
 2239 0008 0B46     		mov	r3, r1
 2240 000a FB70     		strb	r3, [r7, #3]
1620:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   FlagStatus bitstatus = RESET;
 2241              		.loc 1 1620 0
 2242 000c 0023     		movs	r3, #0
 2243 000e FB73     		strb	r3, [r7, #15]
1621:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1622:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1623:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_GET_FLAG(ADC_FLAG));
1624:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1625:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the status of the specified ADC flag */
1626:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if ((ADCx->SR & ADC_FLAG) != (uint8_t)RESET)
 2244              		.loc 1 1626 0
 2245 0010 7B68     		ldr	r3, [r7, #4]
 2246 0012 1A68     		ldr	r2, [r3]
 2247 0014 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2248 0016 1340     		ands	r3, r3, r2
 2249 0018 002B     		cmp	r3, #0
 2250 001a 02D0     		beq	.L88
1627:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1628:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* ADC_FLAG is set */
1629:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     bitstatus = SET;
 2251              		.loc 1 1629 0
 2252 001c 0123     		movs	r3, #1
 2253 001e FB73     		strb	r3, [r7, #15]
 2254 0020 01E0     		b	.L89
 2255              	.L88:
1630:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1631:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
1632:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1633:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* ADC_FLAG is reset */
1634:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     bitstatus = RESET;
 2256              		.loc 1 1634 0
 2257 0022 0023     		movs	r3, #0
 2258 0024 FB73     		strb	r3, [r7, #15]
 2259              	.L89:
1635:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1636:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Return the ADC_FLAG status */
1637:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   return  bitstatus;
 2260              		.loc 1 1637 0
 2261 0026 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
1638:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 2262              		.loc 1 1638 0
 2263 0028 1846     		mov	r0, r3
 2264 002a 1437     		adds	r7, r7, #20
 2265 002c BD46     		mov	sp, r7
 2266              		@ sp needed
 2267 002e 5DF8047B 		ldr	r7, [sp], #4
 2268 0032 7047     		bx	lr
 2269              		.cfi_endproc
 2270              	.LFE144:
 2272              		.section	.text.ADC_ClearFlag,"ax",%progbits
 2273              		.align	2
 2274              		.global	ADC_ClearFlag
 2275              		.thumb
 2276              		.thumb_func
 2278              	ADC_ClearFlag:
 2279              	.LFB145:
1639:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1640:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1641:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Clears the ADCx's pending flags.
1642:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1643:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_FLAG: specifies the flag to clear. 
1644:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be any combination of the following values:
1645:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_AWD: Analog watchdog flag
1646:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_EOC: End of conversion flag
1647:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_JEOC: End of injected group conversion flag
1648:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_JSTRT: Start of injected group conversion flag
1649:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_STRT: Start of regular group conversion flag
1650:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_OVR: Overrun flag                          
1651:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
1652:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1653:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_ClearFlag(ADC_TypeDef* ADCx, uint8_t ADC_FLAG)
1654:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 2280              		.loc 1 1654 0
 2281              		.cfi_startproc
 2282              		@ args = 0, pretend = 0, frame = 8
 2283              		@ frame_needed = 1, uses_anonymous_args = 0
 2284              		@ link register save eliminated.
 2285 0000 80B4     		push	{r7}
 2286              	.LCFI103:
 2287              		.cfi_def_cfa_offset 4
 2288              		.cfi_offset 7, -4
 2289 0002 83B0     		sub	sp, sp, #12
 2290              	.LCFI104:
 2291              		.cfi_def_cfa_offset 16
 2292 0004 00AF     		add	r7, sp, #0
 2293              	.LCFI105:
 2294              		.cfi_def_cfa_register 7
 2295 0006 7860     		str	r0, [r7, #4]
 2296 0008 0B46     		mov	r3, r1
 2297 000a FB70     		strb	r3, [r7, #3]
1655:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1656:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1657:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_CLEAR_FLAG(ADC_FLAG));
1658:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1659:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Clear the selected ADC flags */
1660:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADCx->SR = ~(uint32_t)ADC_FLAG;
 2298              		.loc 1 1660 0
 2299 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2300 000e DA43     		mvns	r2, r3
 2301 0010 7B68     		ldr	r3, [r7, #4]
 2302 0012 1A60     		str	r2, [r3]
1661:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 2303              		.loc 1 1661 0
 2304 0014 0C37     		adds	r7, r7, #12
 2305 0016 BD46     		mov	sp, r7
 2306              		@ sp needed
 2307 0018 5DF8047B 		ldr	r7, [sp], #4
 2308 001c 7047     		bx	lr
 2309              		.cfi_endproc
 2310              	.LFE145:
 2312 001e 00BF     		.section	.text.ADC_GetITStatus,"ax",%progbits
 2313              		.align	2
 2314              		.global	ADC_GetITStatus
 2315              		.thumb
 2316              		.thumb_func
 2318              	ADC_GetITStatus:
 2319              	.LFB146:
1662:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1663:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1664:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Checks whether the specified ADC interrupt has occurred or not.
1665:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx:   where x can be 1, 2 or 3 to select the ADC peripheral.
1666:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_IT: specifies the ADC interrupt source to check. 
1667:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
1668:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_IT_EOC: End of conversion interrupt mask
1669:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_IT_AWD: Analog watchdog interrupt mask
1670:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_IT_JEOC: End of injected conversion interrupt mask
1671:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_IT_OVR: Overrun interrupt mask                        
1672:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval The new state of ADC_IT (SET or RESET).
1673:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1674:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** ITStatus ADC_GetITStatus(ADC_TypeDef* ADCx, uint16_t ADC_IT)
1675:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 2320              		.loc 1 1675 0
 2321              		.cfi_startproc
 2322              		@ args = 0, pretend = 0, frame = 24
 2323              		@ frame_needed = 1, uses_anonymous_args = 0
 2324              		@ link register save eliminated.
 2325 0000 80B4     		push	{r7}
 2326              	.LCFI106:
 2327              		.cfi_def_cfa_offset 4
 2328              		.cfi_offset 7, -4
 2329 0002 87B0     		sub	sp, sp, #28
 2330              	.LCFI107:
 2331              		.cfi_def_cfa_offset 32
 2332 0004 00AF     		add	r7, sp, #0
 2333              	.LCFI108:
 2334              		.cfi_def_cfa_register 7
 2335 0006 7860     		str	r0, [r7, #4]
 2336 0008 0B46     		mov	r3, r1
 2337 000a 7B80     		strh	r3, [r7, #2]	@ movhi
1676:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ITStatus bitstatus = RESET;
 2338              		.loc 1 1676 0
 2339 000c 0023     		movs	r3, #0
 2340 000e FB75     		strb	r3, [r7, #23]
1677:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   uint32_t itmask = 0, enablestatus = 0;
 2341              		.loc 1 1677 0
 2342 0010 0023     		movs	r3, #0
 2343 0012 3B61     		str	r3, [r7, #16]
 2344 0014 0023     		movs	r3, #0
 2345 0016 FB60     		str	r3, [r7, #12]
1678:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1679:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1680:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1681:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_IT(ADC_IT));
1682:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1683:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Get the ADC IT index */
1684:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   itmask = ADC_IT >> 8;
 2346              		.loc 1 1684 0
 2347 0018 7B88     		ldrh	r3, [r7, #2]
 2348 001a 1B0A     		lsrs	r3, r3, #8
 2349 001c 9BB2     		uxth	r3, r3
 2350 001e 3B61     		str	r3, [r7, #16]
1685:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1686:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Get the ADC_IT enable bit status */
1687:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   enablestatus = (ADCx->CR1 & ((uint32_t)0x01 << (uint8_t)ADC_IT)) ;
 2351              		.loc 1 1687 0
 2352 0020 7B68     		ldr	r3, [r7, #4]
 2353 0022 5A68     		ldr	r2, [r3, #4]
 2354 0024 7B88     		ldrh	r3, [r7, #2]	@ movhi
 2355 0026 DBB2     		uxtb	r3, r3
 2356 0028 0121     		movs	r1, #1
 2357 002a 01FA03F3 		lsl	r3, r1, r3
 2358 002e 1340     		ands	r3, r3, r2
 2359 0030 FB60     		str	r3, [r7, #12]
1688:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1689:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the status of the specified ADC interrupt */
1690:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (((ADCx->SR & itmask) != (uint32_t)RESET) && enablestatus)
 2360              		.loc 1 1690 0
 2361 0032 7B68     		ldr	r3, [r7, #4]
 2362 0034 1A68     		ldr	r2, [r3]
 2363 0036 3B69     		ldr	r3, [r7, #16]
 2364 0038 1340     		ands	r3, r3, r2
 2365 003a 002B     		cmp	r3, #0
 2366 003c 05D0     		beq	.L93
 2367              		.loc 1 1690 0 is_stmt 0 discriminator 1
 2368 003e FB68     		ldr	r3, [r7, #12]
 2369 0040 002B     		cmp	r3, #0
 2370 0042 02D0     		beq	.L93
1691:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1692:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* ADC_IT is set */
1693:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     bitstatus = SET;
 2371              		.loc 1 1693 0 is_stmt 1
 2372 0044 0123     		movs	r3, #1
 2373 0046 FB75     		strb	r3, [r7, #23]
 2374 0048 01E0     		b	.L94
 2375              	.L93:
1694:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1695:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
1696:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1697:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* ADC_IT is reset */
1698:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     bitstatus = RESET;
 2376              		.loc 1 1698 0
 2377 004a 0023     		movs	r3, #0
 2378 004c FB75     		strb	r3, [r7, #23]
 2379              	.L94:
1699:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1700:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Return the ADC_IT status */
1701:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   return  bitstatus;
 2380              		.loc 1 1701 0
 2381 004e FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
1702:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 2382              		.loc 1 1702 0
 2383 0050 1846     		mov	r0, r3
 2384 0052 1C37     		adds	r7, r7, #28
 2385 0054 BD46     		mov	sp, r7
 2386              		@ sp needed
 2387 0056 5DF8047B 		ldr	r7, [sp], #4
 2388 005a 7047     		bx	lr
 2389              		.cfi_endproc
 2390              	.LFE146:
 2392              		.section	.text.ADC_ClearITPendingBit,"ax",%progbits
 2393              		.align	2
 2394              		.global	ADC_ClearITPendingBit
 2395              		.thumb
 2396              		.thumb_func
 2398              	ADC_ClearITPendingBit:
 2399              	.LFB147:
1703:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1704:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1705:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Clears the ADCx's interrupt pending bits.
1706:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1707:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_IT: specifies the ADC interrupt pending bit to clear.
1708:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
1709:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_IT_EOC: End of conversion interrupt mask
1710:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_IT_AWD: Analog watchdog interrupt mask
1711:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_IT_JEOC: End of injected conversion interrupt mask
1712:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_IT_OVR: Overrun interrupt mask                         
1713:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
1714:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1715:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_ClearITPendingBit(ADC_TypeDef* ADCx, uint16_t ADC_IT)
1716:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 2400              		.loc 1 1716 0
 2401              		.cfi_startproc
 2402              		@ args = 0, pretend = 0, frame = 16
 2403              		@ frame_needed = 1, uses_anonymous_args = 0
 2404              		@ link register save eliminated.
 2405 0000 80B4     		push	{r7}
 2406              	.LCFI109:
 2407              		.cfi_def_cfa_offset 4
 2408              		.cfi_offset 7, -4
 2409 0002 85B0     		sub	sp, sp, #20
 2410              	.LCFI110:
 2411              		.cfi_def_cfa_offset 24
 2412 0004 00AF     		add	r7, sp, #0
 2413              	.LCFI111:
 2414              		.cfi_def_cfa_register 7
 2415 0006 7860     		str	r0, [r7, #4]
 2416 0008 0B46     		mov	r3, r1
 2417 000a 7B80     		strh	r3, [r7, #2]	@ movhi
1717:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   uint8_t itmask = 0;
 2418              		.loc 1 1717 0
 2419 000c 0023     		movs	r3, #0
 2420 000e FB73     		strb	r3, [r7, #15]
1718:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1719:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1720:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_IT(ADC_IT)); 
1721:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Get the ADC IT index */
1722:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   itmask = (uint8_t)(ADC_IT >> 8);
 2421              		.loc 1 1722 0
 2422 0010 7B88     		ldrh	r3, [r7, #2]
 2423 0012 1B0A     		lsrs	r3, r3, #8
 2424 0014 9BB2     		uxth	r3, r3
 2425 0016 FB73     		strb	r3, [r7, #15]
1723:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Clear the selected ADC interrupt pending bits */
1724:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADCx->SR = ~(uint32_t)itmask;
 2426              		.loc 1 1724 0
 2427 0018 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2428 001a DA43     		mvns	r2, r3
 2429 001c 7B68     		ldr	r3, [r7, #4]
 2430 001e 1A60     		str	r2, [r3]
1725:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }                    
 2431              		.loc 1 1725 0
 2432 0020 1437     		adds	r7, r7, #20
 2433 0022 BD46     		mov	sp, r7
 2434              		@ sp needed
 2435 0024 5DF8047B 		ldr	r7, [sp], #4
 2436 0028 7047     		bx	lr
 2437              		.cfi_endproc
 2438              	.LFE147:
 2440 002a 00BF     		.text
 2441              	.Letext0:
 2442              		.file 2 "/home/shihyu/data/STM32F4/gcc-arm-none-eabi-4_8-2013q4/arm-none-eabi/include/stdint.h"
 2443              		.file 3 "libs/Device/STM32F4xx/Include/stm32f4xx.h"
 2444              		.file 4 "libs/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_adc.h"
 2445              		.file 5 "libs/CMSIS/Include/core_cm4.h"
DEFINED SYMBOLS
                            *ABS*:00000000 stm32f4xx_adc.c
     /tmp/ccBz7mIa.s:20     .text.ADC_DeInit:00000000 $t
     /tmp/ccBz7mIa.s:25     .text.ADC_DeInit:00000000 ADC_DeInit
     /tmp/ccBz7mIa.s:54     .text.ADC_Init:00000000 $t
     /tmp/ccBz7mIa.s:59     .text.ADC_Init:00000000 ADC_Init
     /tmp/ccBz7mIa.s:179    .text.ADC_Init:000000a4 $d
     /tmp/ccBz7mIa.s:184    .text.ADC_StructInit:00000000 $t
     /tmp/ccBz7mIa.s:189    .text.ADC_StructInit:00000000 ADC_StructInit
     /tmp/ccBz7mIa.s:245    .text.ADC_CommonInit:00000000 $t
     /tmp/ccBz7mIa.s:250    .text.ADC_CommonInit:00000000 ADC_CommonInit
     /tmp/ccBz7mIa.s:314    .text.ADC_CommonInit:00000048 $d
     /tmp/ccBz7mIa.s:320    .text.ADC_CommonStructInit:00000000 $t
     /tmp/ccBz7mIa.s:325    .text.ADC_CommonStructInit:00000000 ADC_CommonStructInit
     /tmp/ccBz7mIa.s:369    .text.ADC_Cmd:00000000 $t
     /tmp/ccBz7mIa.s:374    .text.ADC_Cmd:00000000 ADC_Cmd
     /tmp/ccBz7mIa.s:423    .text.ADC_AnalogWatchdogCmd:00000000 $t
     /tmp/ccBz7mIa.s:428    .text.ADC_AnalogWatchdogCmd:00000000 ADC_AnalogWatchdogCmd
     /tmp/ccBz7mIa.s:478    .text.ADC_AnalogWatchdogThresholdsConfig:00000000 $t
     /tmp/ccBz7mIa.s:483    .text.ADC_AnalogWatchdogThresholdsConfig:00000000 ADC_AnalogWatchdogThresholdsConfig
     /tmp/ccBz7mIa.s:523    .text.ADC_AnalogWatchdogSingleChannelConfig:00000000 $t
     /tmp/ccBz7mIa.s:528    .text.ADC_AnalogWatchdogSingleChannelConfig:00000000 ADC_AnalogWatchdogSingleChannelConfig
     /tmp/ccBz7mIa.s:578    .text.ADC_TempSensorVrefintCmd:00000000 $t
     /tmp/ccBz7mIa.s:583    .text.ADC_TempSensorVrefintCmd:00000000 ADC_TempSensorVrefintCmd
     /tmp/ccBz7mIa.s:630    .text.ADC_TempSensorVrefintCmd:00000034 $d
     /tmp/ccBz7mIa.s:635    .text.ADC_VBATCmd:00000000 $t
     /tmp/ccBz7mIa.s:640    .text.ADC_VBATCmd:00000000 ADC_VBATCmd
     /tmp/ccBz7mIa.s:687    .text.ADC_VBATCmd:00000034 $d
     /tmp/ccBz7mIa.s:692    .text.ADC_RegularChannelConfig:00000000 $t
     /tmp/ccBz7mIa.s:697    .text.ADC_RegularChannelConfig:00000000 ADC_RegularChannelConfig
     /tmp/ccBz7mIa.s:936    .text.ADC_SoftwareStartConv:00000000 $t
     /tmp/ccBz7mIa.s:941    .text.ADC_SoftwareStartConv:00000000 ADC_SoftwareStartConv
     /tmp/ccBz7mIa.s:975    .text.ADC_GetSoftwareStartConvStatus:00000000 $t
     /tmp/ccBz7mIa.s:980    .text.ADC_GetSoftwareStartConvStatus:00000000 ADC_GetSoftwareStartConvStatus
     /tmp/ccBz7mIa.s:1029   .text.ADC_EOCOnEachRegularChannelCmd:00000000 $t
     /tmp/ccBz7mIa.s:1034   .text.ADC_EOCOnEachRegularChannelCmd:00000000 ADC_EOCOnEachRegularChannelCmd
     /tmp/ccBz7mIa.s:1083   .text.ADC_ContinuousModeCmd:00000000 $t
     /tmp/ccBz7mIa.s:1088   .text.ADC_ContinuousModeCmd:00000000 ADC_ContinuousModeCmd
     /tmp/ccBz7mIa.s:1137   .text.ADC_DiscModeChannelCountConfig:00000000 $t
     /tmp/ccBz7mIa.s:1142   .text.ADC_DiscModeChannelCountConfig:00000000 ADC_DiscModeChannelCountConfig
     /tmp/ccBz7mIa.s:1200   .text.ADC_DiscModeCmd:00000000 $t
     /tmp/ccBz7mIa.s:1205   .text.ADC_DiscModeCmd:00000000 ADC_DiscModeCmd
     /tmp/ccBz7mIa.s:1254   .text.ADC_GetConversionValue:00000000 $t
     /tmp/ccBz7mIa.s:1259   .text.ADC_GetConversionValue:00000000 ADC_GetConversionValue
     /tmp/ccBz7mIa.s:1292   .text.ADC_GetMultiModeConversionValue:00000000 $t
     /tmp/ccBz7mIa.s:1297   .text.ADC_GetMultiModeConversionValue:00000000 ADC_GetMultiModeConversionValue
     /tmp/ccBz7mIa.s:1323   .text.ADC_GetMultiModeConversionValue:00000014 $d
     /tmp/ccBz7mIa.s:1328   .text.ADC_DMACmd:00000000 $t
     /tmp/ccBz7mIa.s:1333   .text.ADC_DMACmd:00000000 ADC_DMACmd
     /tmp/ccBz7mIa.s:1382   .text.ADC_DMARequestAfterLastTransferCmd:00000000 $t
     /tmp/ccBz7mIa.s:1387   .text.ADC_DMARequestAfterLastTransferCmd:00000000 ADC_DMARequestAfterLastTransferCmd
     /tmp/ccBz7mIa.s:1436   .text.ADC_MultiModeDMARequestAfterLastTransferCmd:00000000 $t
     /tmp/ccBz7mIa.s:1441   .text.ADC_MultiModeDMARequestAfterLastTransferCmd:00000000 ADC_MultiModeDMARequestAfterLastTransferCmd
     /tmp/ccBz7mIa.s:1488   .text.ADC_MultiModeDMARequestAfterLastTransferCmd:00000034 $d
     /tmp/ccBz7mIa.s:1493   .text.ADC_InjectedChannelConfig:00000000 $t
     /tmp/ccBz7mIa.s:1498   .text.ADC_InjectedChannelConfig:00000000 ADC_InjectedChannelConfig
     /tmp/ccBz7mIa.s:1669   .text.ADC_InjectedSequencerLengthConfig:00000000 $t
     /tmp/ccBz7mIa.s:1674   .text.ADC_InjectedSequencerLengthConfig:00000000 ADC_InjectedSequencerLengthConfig
     /tmp/ccBz7mIa.s:1732   .text.ADC_SetInjectedOffset:00000000 $t
     /tmp/ccBz7mIa.s:1737   .text.ADC_SetInjectedOffset:00000000 ADC_SetInjectedOffset
     /tmp/ccBz7mIa.s:1784   .text.ADC_ExternalTrigInjectedConvConfig:00000000 $t
     /tmp/ccBz7mIa.s:1789   .text.ADC_ExternalTrigInjectedConvConfig:00000000 ADC_ExternalTrigInjectedConvConfig
     /tmp/ccBz7mIa.s:1838   .text.ADC_ExternalTrigInjectedConvEdgeConfig:00000000 $t
     /tmp/ccBz7mIa.s:1843   .text.ADC_ExternalTrigInjectedConvEdgeConfig:00000000 ADC_ExternalTrigInjectedConvEdgeConfig
     /tmp/ccBz7mIa.s:1892   .text.ADC_SoftwareStartInjectedConv:00000000 $t
     /tmp/ccBz7mIa.s:1897   .text.ADC_SoftwareStartInjectedConv:00000000 ADC_SoftwareStartInjectedConv
     /tmp/ccBz7mIa.s:1931   .text.ADC_GetSoftwareStartInjectedConvCmdStatus:00000000 $t
     /tmp/ccBz7mIa.s:1936   .text.ADC_GetSoftwareStartInjectedConvCmdStatus:00000000 ADC_GetSoftwareStartInjectedConvCmdStatus
     /tmp/ccBz7mIa.s:1985   .text.ADC_AutoInjectedConvCmd:00000000 $t
     /tmp/ccBz7mIa.s:1990   .text.ADC_AutoInjectedConvCmd:00000000 ADC_AutoInjectedConvCmd
     /tmp/ccBz7mIa.s:2039   .text.ADC_InjectedDiscModeCmd:00000000 $t
     /tmp/ccBz7mIa.s:2044   .text.ADC_InjectedDiscModeCmd:00000000 ADC_InjectedDiscModeCmd
     /tmp/ccBz7mIa.s:2093   .text.ADC_GetInjectedConversionValue:00000000 $t
     /tmp/ccBz7mIa.s:2098   .text.ADC_GetInjectedConversionValue:00000000 ADC_GetInjectedConversionValue
     /tmp/ccBz7mIa.s:2145   .text.ADC_ITConfig:00000000 $t
     /tmp/ccBz7mIa.s:2150   .text.ADC_ITConfig:00000000 ADC_ITConfig
     /tmp/ccBz7mIa.s:2216   .text.ADC_GetFlagStatus:00000000 $t
     /tmp/ccBz7mIa.s:2221   .text.ADC_GetFlagStatus:00000000 ADC_GetFlagStatus
     /tmp/ccBz7mIa.s:2273   .text.ADC_ClearFlag:00000000 $t
     /tmp/ccBz7mIa.s:2278   .text.ADC_ClearFlag:00000000 ADC_ClearFlag
     /tmp/ccBz7mIa.s:2313   .text.ADC_GetITStatus:00000000 $t
     /tmp/ccBz7mIa.s:2318   .text.ADC_GetITStatus:00000000 ADC_GetITStatus
     /tmp/ccBz7mIa.s:2393   .text.ADC_ClearITPendingBit:00000000 $t
     /tmp/ccBz7mIa.s:2398   .text.ADC_ClearITPendingBit:00000000 ADC_ClearITPendingBit
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
RCC_APB2PeriphResetCmd
