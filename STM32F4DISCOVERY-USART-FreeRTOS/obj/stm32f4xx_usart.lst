   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"stm32f4xx_usart.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.USART_DeInit,"ax",%progbits
  20              		.align	2
  21              		.global	USART_DeInit
  22              		.thumb
  23              		.thumb_func
  25              	USART_DeInit:
  26              	.LFB110:
  27              		.file 1 "libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c"
   1:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
   2:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   ******************************************************************************
   3:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @file    stm32f4xx_usart.c
   4:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @author  MCD Application Team
   5:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @version V1.0.0RC1
   6:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @date    25-August-2011
   7:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief   This file provides firmware functions to manage the following 
   8:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          functionalities of the Universal synchronous asynchronous receiver
   9:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          transmitter (USART):           
  10:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *           - Initialization and Configuration
  11:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *           - Data transfers
  12:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *           - Multi-Processor Communication
  13:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *           - LIN mode
  14:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *           - Half-duplex mode
  15:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *           - Smartcard mode
  16:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *           - IrDA mode
  17:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *           - DMA transfers management
  18:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *           - Interrupts and flags management 
  19:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *           
  20:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *  @verbatim
  21:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *      
  22:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          ===================================================================
  23:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *                                 How to use this driver
  24:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          ===================================================================
  25:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          1. Enable peripheral clock using the follwoing functions
  26:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *             RCC_APB2PeriphClockCmd(RCC_APB2Periph_USARTx, ENABLE) for USART1 and USART6 
  27:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *             RCC_APB1PeriphClockCmd(RCC_APB1Periph_USARTx, ENABLE) for USART2, USART3, UART4 or 
  28:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *
  29:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          2.  According to the USART mode, enable the GPIO clocks using 
  30:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *              RCC_AHB1PeriphClockCmd() function. (The I/O can be TX, RX, CTS, 
  31:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *              or/and SCLK). 
  32:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *
  33:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          3. Peripheral's alternate function: 
  34:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *                 - Connect the pin to the desired peripherals' Alternate 
  35:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *                   Function (AF) using GPIO_PinAFConfig() function
  36:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *                 - Configure the desired pin in alternate function by:
  37:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *                   GPIO_InitStruct->GPIO_Mode = GPIO_Mode_AF
  38:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *                 - Select the type, pull-up/pull-down and output speed via 
  39:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *                   GPIO_PuPd, GPIO_OType and GPIO_Speed members
  40:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *                 - Call GPIO_Init() function
  41:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *        
  42:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          4. Program the Baud Rate, Word Length , Stop Bit, Parity, Hardware 
  43:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *             flow control and Mode(Receiver/Transmitter) using the USART_Init()
  44:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *             function.
  45:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *
  46:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          5. For synchronous mode, enable the clock and program the polarity,
  47:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *             phase and last bit using the USART_ClockInit() function.
  48:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *
  49:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          5. Enable the NVIC and the corresponding interrupt using the function 
  50:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *             USART_ITConfig() if you need to use interrupt mode. 
  51:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *
  52:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          6. When using the DMA mode 
  53:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *                   - Configure the DMA using DMA_Init() function
  54:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *                   - Active the needed channel Request using USART_DMACmd() function
  55:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * 
  56:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          7. Enable the USART using the USART_Cmd() function.
  57:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * 
  58:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          8. Enable the DMA using the DMA_Cmd() function, when using DMA mode. 
  59:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *
  60:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          Refer to Multi-Processor, LIN, half-duplex, Smartcard, IrDA sub-sections
  61:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          for more details
  62:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          
  63:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          In order to reach higher communication baudrates, it is possible to
  64:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          enable the oversampling by 8 mode using the function USART_OverSampling8Cmd().
  65:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This function should be called after enabling the USART clock (RCC_APBxPeriphClockCmd(
  66:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          and before calling the function USART_Init().
  67:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          
  68:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *  @endverbatim
  69:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *        
  70:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   ******************************************************************************
  71:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @attention
  72:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *
  73:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
  74:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
  75:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
  76:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
  77:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
  78:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
  79:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *
  80:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
  81:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   ******************************************************************************  
  82:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */ 
  83:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
  84:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /* Includes ------------------------------------------------------------------*/
  85:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** #include "stm32f4xx_usart.h"
  86:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** #include "stm32f4xx_rcc.h"
  87:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
  88:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
  89:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @{
  90:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
  91:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
  92:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /** @defgroup USART 
  93:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief USART driver modules
  94:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @{
  95:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
  96:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
  97:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /* Private typedef -----------------------------------------------------------*/
  98:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /* Private define ------------------------------------------------------------*/
  99:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 100:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /*!< USART CR1 register clear Mask ((~(uint16_t)0xE9F3)) */
 101:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** #define CR1_CLEAR_MASK            ((uint16_t)(USART_CR1_M | USART_CR1_PCE | \
 102:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                                               USART_CR1_PS | USART_CR1_TE | \
 103:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                                               USART_CR1_RE))
 104:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 105:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /*!< USART CR2 register clock bits clear Mask ((~(uint16_t)0xF0FF)) */
 106:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** #define CR2_CLOCK_CLEAR_MASK      ((uint16_t)(USART_CR2_CLKEN | USART_CR2_CPOL | \
 107:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                                               USART_CR2_CPHA | USART_CR2_LBCL))
 108:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 109:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /*!< USART CR3 register clear Mask ((~(uint16_t)0xFCFF)) */
 110:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** #define CR3_CLEAR_MASK            ((uint16_t)(USART_CR3_RTSE | USART_CR3_CTSE))
 111:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 112:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /*!< USART Interrupts mask */
 113:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** #define IT_MASK                   ((uint16_t)0x001F)
 114:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 115:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /* Private macro -------------------------------------------------------------*/
 116:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /* Private variables ---------------------------------------------------------*/
 117:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /* Private function prototypes -----------------------------------------------*/
 118:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /* Private functions ---------------------------------------------------------*/
 119:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 120:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /** @defgroup USART_Private_Functions
 121:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @{
 122:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 123:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 124:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /** @defgroup USART_Group1 Initialization and Configuration functions
 125:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *  @brief   Initialization and Configuration functions 
 126:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *
 127:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @verbatim   
 128:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================
 129:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                   Initialization and Configuration functions
 130:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================  
 131:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 132:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   This subsection provides a set of functions allowing to initialize the USART 
 133:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   in asynchronous and in synchronous modes.
 134:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****    - For the asynchronous mode only these parameters can be configured: 
 135:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - Baud Rate
 136:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - Word Length 
 137:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - Stop Bit
 138:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - Parity: If the parity is enabled, then the MSB bit of the data written
 139:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****           in the data register is transmitted but is changed by the parity bit.
 140:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****           Depending on the frame length defined by the M bit (8-bits or 9-bits),
 141:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****           the possible USART frame formats are as listed in the following table:
 142:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****    +-------------------------------------------------------------+     
 143:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****    |   M bit |  PCE bit  |            USART frame                |
 144:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****    |---------------------|---------------------------------------|             
 145:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****    |    0    |    0      |    | SB | 8 bit data | STB |          |
 146:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****    |---------|-----------|---------------------------------------|  
 147:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****    |    0    |    1      |    | SB | 7 bit data | PB | STB |     |
 148:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****    |---------|-----------|---------------------------------------|  
 149:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****    |    1    |    0      |    | SB | 9 bit data | STB |          |
 150:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****    |---------|-----------|---------------------------------------|  
 151:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****    |    1    |    1      |    | SB | 8 bit data | PB | STB |     |
 152:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****    +-------------------------------------------------------------+            
 153:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - Hardware flow control
 154:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - Receiver/transmitter modes
 155:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 156:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   The USART_Init() function follows the USART  asynchronous configuration procedure
 157:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   (details for the procedure are available in reference manual (RM0090)).
 158:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 159:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   - For the synchronous mode in addition to the asynchronous mode parameters these 
 160:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     parameters should be also configured:
 161:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - USART Clock Enabled
 162:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - USART polarity
 163:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - USART phase
 164:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - USART LastBit
 165:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 166:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   These parameters can be configured using the USART_ClockInit() function.
 167:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 168:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @endverbatim
 169:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @{
 170:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 171:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 172:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 173:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Deinitializes the USARTx peripheral registers to their default reset values.
 174:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 175:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 176:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 177:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 178:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_DeInit(USART_TypeDef* USARTx)
 179:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
  28              		.loc 1 179 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 8
  31              		@ frame_needed = 1, uses_anonymous_args = 0
  32 0000 80B5     		push	{r7, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 8
  35              		.cfi_offset 7, -8
  36              		.cfi_offset 14, -4
  37 0002 82B0     		sub	sp, sp, #8
  38              	.LCFI1:
  39              		.cfi_def_cfa_offset 16
  40 0004 00AF     		add	r7, sp, #0
  41              	.LCFI2:
  42              		.cfi_def_cfa_register 7
  43 0006 7860     		str	r0, [r7, #4]
 180:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 181:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 182:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 183:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (USARTx == USART1)
  44              		.loc 1 183 0
  45 0008 7A68     		ldr	r2, [r7, #4]
  46 000a 2B4B     		ldr	r3, .L8
  47 000c 9A42     		cmp	r2, r3
  48 000e 08D1     		bne	.L2
 184:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 185:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
  49              		.loc 1 185 0
  50 0010 1020     		movs	r0, #16
  51 0012 0121     		movs	r1, #1
  52 0014 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 186:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
  53              		.loc 1 186 0
  54 0018 1020     		movs	r0, #16
  55 001a 0021     		movs	r1, #0
  56 001c FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
  57 0020 47E0     		b	.L1
  58              	.L2:
 187:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 188:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else if (USARTx == USART2)
  59              		.loc 1 188 0
  60 0022 7A68     		ldr	r2, [r7, #4]
  61 0024 254B     		ldr	r3, .L8+4
  62 0026 9A42     		cmp	r2, r3
  63 0028 0AD1     		bne	.L4
 189:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 190:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
  64              		.loc 1 190 0
  65 002a 4FF40030 		mov	r0, #131072
  66 002e 0121     		movs	r1, #1
  67 0030 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 191:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
  68              		.loc 1 191 0
  69 0034 4FF40030 		mov	r0, #131072
  70 0038 0021     		movs	r1, #0
  71 003a FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  72 003e 38E0     		b	.L1
  73              	.L4:
 192:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 193:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else if (USARTx == USART3)
  74              		.loc 1 193 0
  75 0040 7A68     		ldr	r2, [r7, #4]
  76 0042 1F4B     		ldr	r3, .L8+8
  77 0044 9A42     		cmp	r2, r3
  78 0046 0AD1     		bne	.L5
 194:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 195:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
  79              		.loc 1 195 0
  80 0048 4FF48020 		mov	r0, #262144
  81 004c 0121     		movs	r1, #1
  82 004e FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 196:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
  83              		.loc 1 196 0
  84 0052 4FF48020 		mov	r0, #262144
  85 0056 0021     		movs	r1, #0
  86 0058 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  87 005c 29E0     		b	.L1
  88              	.L5:
 197:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }    
 198:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else if (USARTx == UART4)
  89              		.loc 1 198 0
  90 005e 7A68     		ldr	r2, [r7, #4]
  91 0060 184B     		ldr	r3, .L8+12
  92 0062 9A42     		cmp	r2, r3
  93 0064 0AD1     		bne	.L6
 199:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 200:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
  94              		.loc 1 200 0
  95 0066 4FF40020 		mov	r0, #524288
  96 006a 0121     		movs	r1, #1
  97 006c FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 201:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
  98              		.loc 1 201 0
  99 0070 4FF40020 		mov	r0, #524288
 100 0074 0021     		movs	r1, #0
 101 0076 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 102 007a 1AE0     		b	.L1
 103              	.L6:
 202:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 203:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else if (USARTx == UART5)
 104              		.loc 1 203 0
 105 007c 7A68     		ldr	r2, [r7, #4]
 106 007e 124B     		ldr	r3, .L8+16
 107 0080 9A42     		cmp	r2, r3
 108 0082 0AD1     		bne	.L7
 204:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 205:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
 109              		.loc 1 205 0
 110 0084 4FF48010 		mov	r0, #1048576
 111 0088 0121     		movs	r1, #1
 112 008a FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 206:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
 113              		.loc 1 206 0
 114 008e 4FF48010 		mov	r0, #1048576
 115 0092 0021     		movs	r1, #0
 116 0094 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 117 0098 0BE0     		b	.L1
 118              	.L7:
 207:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }     
 208:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
 209:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 210:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     if (USARTx == USART6)
 119              		.loc 1 210 0
 120 009a 7A68     		ldr	r2, [r7, #4]
 121 009c 0B4B     		ldr	r3, .L8+20
 122 009e 9A42     		cmp	r2, r3
 123 00a0 07D1     		bne	.L1
 211:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     { 
 212:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
 124              		.loc 1 212 0
 125 00a2 2020     		movs	r0, #32
 126 00a4 0121     		movs	r1, #1
 127 00a6 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 213:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
 128              		.loc 1 213 0
 129 00aa 2020     		movs	r0, #32
 130 00ac 0021     		movs	r1, #0
 131 00ae FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 132              	.L1:
 214:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     }
 215:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 216:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 133              		.loc 1 216 0
 134 00b2 0837     		adds	r7, r7, #8
 135 00b4 BD46     		mov	sp, r7
 136              		@ sp needed
 137 00b6 80BD     		pop	{r7, pc}
 138              	.L9:
 139              		.align	2
 140              	.L8:
 141 00b8 00100140 		.word	1073811456
 142 00bc 00440040 		.word	1073759232
 143 00c0 00480040 		.word	1073760256
 144 00c4 004C0040 		.word	1073761280
 145 00c8 00500040 		.word	1073762304
 146 00cc 00140140 		.word	1073812480
 147              		.cfi_endproc
 148              	.LFE110:
 150              		.section	.text.USART_Init,"ax",%progbits
 151              		.align	2
 152              		.global	USART_Init
 153              		.thumb
 154              		.thumb_func
 156              	USART_Init:
 157              	.LFB111:
 217:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 218:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 219:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Initializes the USARTx peripheral according to the specified
 220:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         parameters in the USART_InitStruct .
 221:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 222:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 223:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
 224:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         the configuration information for the specified USART peripheral.
 225:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 226:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 227:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
 228:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 158              		.loc 1 228 0
 159              		.cfi_startproc
 160              		@ args = 0, pretend = 0, frame = 40
 161              		@ frame_needed = 1, uses_anonymous_args = 0
 162 0000 80B5     		push	{r7, lr}
 163              	.LCFI3:
 164              		.cfi_def_cfa_offset 8
 165              		.cfi_offset 7, -8
 166              		.cfi_offset 14, -4
 167 0002 8AB0     		sub	sp, sp, #40
 168              	.LCFI4:
 169              		.cfi_def_cfa_offset 48
 170 0004 00AF     		add	r7, sp, #0
 171              	.LCFI5:
 172              		.cfi_def_cfa_register 7
 173 0006 7860     		str	r0, [r7, #4]
 174 0008 3960     		str	r1, [r7]
 229:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   uint32_t tmpreg = 0x00, apbclock = 0x00;
 175              		.loc 1 229 0
 176 000a 0023     		movs	r3, #0
 177 000c 7B62     		str	r3, [r7, #36]
 178 000e 0023     		movs	r3, #0
 179 0010 3B62     		str	r3, [r7, #32]
 230:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   uint32_t integerdivider = 0x00;
 180              		.loc 1 230 0
 181 0012 0023     		movs	r3, #0
 182 0014 FB61     		str	r3, [r7, #28]
 231:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   uint32_t fractionaldivider = 0x00;
 183              		.loc 1 231 0
 184 0016 0023     		movs	r3, #0
 185 0018 BB61     		str	r3, [r7, #24]
 232:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   RCC_ClocksTypeDef RCC_ClocksStatus;
 233:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 234:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 235:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 236:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_BAUDRATE(USART_InitStruct->USART_BaudRate));  
 237:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_WORD_LENGTH(USART_InitStruct->USART_WordLength));
 238:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_STOPBITS(USART_InitStruct->USART_StopBits));
 239:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_PARITY(USART_InitStruct->USART_Parity));
 240:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_MODE(USART_InitStruct->USART_Mode));
 241:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_HARDWARE_FLOW_CONTROL(USART_InitStruct->USART_HardwareFlowControl));
 242:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 243:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* The hardware flow control is available only for USART1, USART2, USART3 and USART6 */
 244:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
 245:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 246:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     assert_param(IS_USART_1236_PERIPH(USARTx));
 247:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 248:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 249:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /*---------------------------- USART CR2 Configuration -----------------------*/
 250:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg = USARTx->CR2;
 186              		.loc 1 250 0
 187 001a 7B68     		ldr	r3, [r7, #4]
 188 001c 1B8A     		ldrh	r3, [r3, #16]	@ movhi
 189 001e 9BB2     		uxth	r3, r3
 190 0020 7B62     		str	r3, [r7, #36]
 251:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 252:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Clear STOP[13:12] bits */
 253:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 191              		.loc 1 253 0
 192 0022 7B6A     		ldr	r3, [r7, #36]
 193 0024 23F44053 		bic	r3, r3, #12288
 194 0028 7B62     		str	r3, [r7, #36]
 254:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 255:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
 256:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       Set STOP[13:12] bits according to USART_StopBits value */
 257:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 195              		.loc 1 257 0
 196 002a 3B68     		ldr	r3, [r7]
 197 002c DB88     		ldrh	r3, [r3, #6]
 198 002e 7A6A     		ldr	r2, [r7, #36]
 199 0030 1343     		orrs	r3, r3, r2
 200 0032 7B62     		str	r3, [r7, #36]
 258:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 259:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Write to USART CR2 */
 260:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->CR2 = (uint16_t)tmpreg;
 201              		.loc 1 260 0
 202 0034 7B6A     		ldr	r3, [r7, #36]
 203 0036 9AB2     		uxth	r2, r3
 204 0038 7B68     		ldr	r3, [r7, #4]
 205 003a 1A82     		strh	r2, [r3, #16]	@ movhi
 261:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 262:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /*---------------------------- USART CR1 Configuration -----------------------*/
 263:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg = USARTx->CR1;
 206              		.loc 1 263 0
 207 003c 7B68     		ldr	r3, [r7, #4]
 208 003e 9B89     		ldrh	r3, [r3, #12]	@ movhi
 209 0040 9BB2     		uxth	r3, r3
 210 0042 7B62     		str	r3, [r7, #36]
 264:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 265:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Clear M, PCE, PS, TE and RE bits */
 266:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 211              		.loc 1 266 0
 212 0044 7B6A     		ldr	r3, [r7, #36]
 213 0046 23F4B053 		bic	r3, r3, #5632
 214 004a 23F00C03 		bic	r3, r3, #12
 215 004e 7B62     		str	r3, [r7, #36]
 267:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 268:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Configure the USART Word Length, Parity and mode: 
 269:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      Set the M bits according to USART_WordLength value 
 270:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      Set PCE and PS bits according to USART_Parity value
 271:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      Set TE and RE bits according to USART_Mode value */
 272:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 216              		.loc 1 272 0
 217 0050 3B68     		ldr	r3, [r7]
 218 0052 9A88     		ldrh	r2, [r3, #4]
 219 0054 3B68     		ldr	r3, [r7]
 220 0056 1B89     		ldrh	r3, [r3, #8]
 221 0058 1343     		orrs	r3, r3, r2
 222 005a 9AB2     		uxth	r2, r3
 273:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****             USART_InitStruct->USART_Mode;
 223              		.loc 1 273 0
 224 005c 3B68     		ldr	r3, [r7]
 225 005e 5B89     		ldrh	r3, [r3, #10]
 272:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 226              		.loc 1 272 0
 227 0060 1343     		orrs	r3, r3, r2
 228 0062 9BB2     		uxth	r3, r3
 229 0064 7A6A     		ldr	r2, [r7, #36]
 230 0066 1343     		orrs	r3, r3, r2
 231 0068 7B62     		str	r3, [r7, #36]
 274:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 275:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Write to USART CR1 */
 276:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->CR1 = (uint16_t)tmpreg;
 232              		.loc 1 276 0
 233 006a 7B6A     		ldr	r3, [r7, #36]
 234 006c 9AB2     		uxth	r2, r3
 235 006e 7B68     		ldr	r3, [r7, #4]
 236 0070 9A81     		strh	r2, [r3, #12]	@ movhi
 277:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 278:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /*---------------------------- USART CR3 Configuration -----------------------*/  
 279:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg = USARTx->CR3;
 237              		.loc 1 279 0
 238 0072 7B68     		ldr	r3, [r7, #4]
 239 0074 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 240 0076 9BB2     		uxth	r3, r3
 241 0078 7B62     		str	r3, [r7, #36]
 280:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 281:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Clear CTSE and RTSE bits */
 282:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 242              		.loc 1 282 0
 243 007a 7B6A     		ldr	r3, [r7, #36]
 244 007c 23F44073 		bic	r3, r3, #768
 245 0080 7B62     		str	r3, [r7, #36]
 283:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 284:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Configure the USART HFC : 
 285:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
 286:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 246              		.loc 1 286 0
 247 0082 3B68     		ldr	r3, [r7]
 248 0084 9B89     		ldrh	r3, [r3, #12]
 249 0086 7A6A     		ldr	r2, [r7, #36]
 250 0088 1343     		orrs	r3, r3, r2
 251 008a 7B62     		str	r3, [r7, #36]
 287:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 288:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Write to USART CR3 */
 289:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->CR3 = (uint16_t)tmpreg;
 252              		.loc 1 289 0
 253 008c 7B6A     		ldr	r3, [r7, #36]
 254 008e 9AB2     		uxth	r2, r3
 255 0090 7B68     		ldr	r3, [r7, #4]
 256 0092 9A82     		strh	r2, [r3, #20]	@ movhi
 290:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 291:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /*---------------------------- USART BRR Configuration -----------------------*/
 292:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Configure the USART Baud Rate */
 293:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   RCC_GetClocksFreq(&RCC_ClocksStatus);
 257              		.loc 1 293 0
 258 0094 07F10803 		add	r3, r7, #8
 259 0098 1846     		mov	r0, r3
 260 009a FFF7FEFF 		bl	RCC_GetClocksFreq
 294:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 295:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if ((USARTx == USART1) || (USARTx == USART6))
 261              		.loc 1 295 0
 262 009e 7A68     		ldr	r2, [r7, #4]
 263 00a0 314B     		ldr	r3, .L18
 264 00a2 9A42     		cmp	r2, r3
 265 00a4 03D0     		beq	.L11
 266              		.loc 1 295 0 is_stmt 0 discriminator 1
 267 00a6 7A68     		ldr	r2, [r7, #4]
 268 00a8 304B     		ldr	r3, .L18+4
 269 00aa 9A42     		cmp	r2, r3
 270 00ac 02D1     		bne	.L12
 271              	.L11:
 296:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 297:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 272              		.loc 1 297 0 is_stmt 1
 273 00ae 7B69     		ldr	r3, [r7, #20]
 274 00b0 3B62     		str	r3, [r7, #32]
 275 00b2 01E0     		b	.L13
 276              	.L12:
 298:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 299:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
 300:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 301:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 277              		.loc 1 301 0
 278 00b4 3B69     		ldr	r3, [r7, #16]
 279 00b6 3B62     		str	r3, [r7, #32]
 280              	.L13:
 302:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 303:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 304:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Determine the integer part */
 305:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 281              		.loc 1 305 0
 282 00b8 7B68     		ldr	r3, [r7, #4]
 283 00ba 9B89     		ldrh	r3, [r3, #12]	@ movhi
 284 00bc 9BB2     		uxth	r3, r3
 285 00be 9BB2     		uxth	r3, r3
 286 00c0 1BB2     		sxth	r3, r3
 287 00c2 002B     		cmp	r3, #0
 288 00c4 0CDA     		bge	.L14
 306:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 307:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Integer part computing in case Oversampling mode is 8 Samples */
 308:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 289              		.loc 1 308 0
 290 00c6 3A6A     		ldr	r2, [r7, #32]
 291 00c8 1346     		mov	r3, r2
 292 00ca 9B00     		lsls	r3, r3, #2
 293 00cc 1344     		add	r3, r3, r2
 294 00ce 9A00     		lsls	r2, r3, #2
 295 00d0 1A44     		add	r2, r2, r3
 296 00d2 3B68     		ldr	r3, [r7]
 297 00d4 1B68     		ldr	r3, [r3]
 298 00d6 5B00     		lsls	r3, r3, #1
 299 00d8 B2FBF3F3 		udiv	r3, r2, r3
 300 00dc FB61     		str	r3, [r7, #28]
 301 00de 0BE0     		b	.L15
 302              	.L14:
 309:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 310:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
 311:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 312:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Integer part computing in case Oversampling mode is 16 Samples */
 313:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 303              		.loc 1 313 0
 304 00e0 3A6A     		ldr	r2, [r7, #32]
 305 00e2 1346     		mov	r3, r2
 306 00e4 9B00     		lsls	r3, r3, #2
 307 00e6 1344     		add	r3, r3, r2
 308 00e8 9A00     		lsls	r2, r3, #2
 309 00ea 1A44     		add	r2, r2, r3
 310 00ec 3B68     		ldr	r3, [r7]
 311 00ee 1B68     		ldr	r3, [r3]
 312 00f0 9B00     		lsls	r3, r3, #2
 313 00f2 B2FBF3F3 		udiv	r3, r2, r3
 314 00f6 FB61     		str	r3, [r7, #28]
 315              	.L15:
 314:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 315:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg = (integerdivider / 100) << 4;
 316              		.loc 1 315 0
 317 00f8 FA69     		ldr	r2, [r7, #28]
 318 00fa 1D4B     		ldr	r3, .L18+8
 319 00fc A3FB0213 		umull	r1, r3, r3, r2
 320 0100 5B09     		lsrs	r3, r3, #5
 321 0102 1B01     		lsls	r3, r3, #4
 322 0104 7B62     		str	r3, [r7, #36]
 316:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 317:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Determine the fractional part */
 318:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 323              		.loc 1 318 0
 324 0106 7B6A     		ldr	r3, [r7, #36]
 325 0108 1B09     		lsrs	r3, r3, #4
 326 010a 6422     		movs	r2, #100
 327 010c 02FB03F3 		mul	r3, r2, r3
 328 0110 FA69     		ldr	r2, [r7, #28]
 329 0112 D31A     		subs	r3, r2, r3
 330 0114 BB61     		str	r3, [r7, #24]
 319:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 320:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Implement the fractional part in the register */
 321:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 331              		.loc 1 321 0
 332 0116 7B68     		ldr	r3, [r7, #4]
 333 0118 9B89     		ldrh	r3, [r3, #12]	@ movhi
 334 011a 9BB2     		uxth	r3, r3
 335 011c 9BB2     		uxth	r3, r3
 336 011e 1BB2     		sxth	r3, r3
 337 0120 002B     		cmp	r3, #0
 338 0122 0DDA     		bge	.L16
 322:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 323:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 339              		.loc 1 323 0
 340 0124 BB69     		ldr	r3, [r7, #24]
 341 0126 DB00     		lsls	r3, r3, #3
 342 0128 03F13202 		add	r2, r3, #50
 343 012c 104B     		ldr	r3, .L18+8
 344 012e A3FB0213 		umull	r1, r3, r3, r2
 345 0132 5B09     		lsrs	r3, r3, #5
 346 0134 03F00703 		and	r3, r3, #7
 347 0138 7A6A     		ldr	r2, [r7, #36]
 348 013a 1343     		orrs	r3, r3, r2
 349 013c 7B62     		str	r3, [r7, #36]
 350 013e 0CE0     		b	.L17
 351              	.L16:
 324:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 325:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
 326:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 327:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 352              		.loc 1 327 0
 353 0140 BB69     		ldr	r3, [r7, #24]
 354 0142 1B01     		lsls	r3, r3, #4
 355 0144 03F13202 		add	r2, r3, #50
 356 0148 094B     		ldr	r3, .L18+8
 357 014a A3FB0213 		umull	r1, r3, r3, r2
 358 014e 5B09     		lsrs	r3, r3, #5
 359 0150 03F00F03 		and	r3, r3, #15
 360 0154 7A6A     		ldr	r2, [r7, #36]
 361 0156 1343     		orrs	r3, r3, r2
 362 0158 7B62     		str	r3, [r7, #36]
 363              	.L17:
 328:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 329:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 330:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Write to USART BRR register */
 331:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->BRR = (uint16_t)tmpreg;
 364              		.loc 1 331 0
 365 015a 7B6A     		ldr	r3, [r7, #36]
 366 015c 9AB2     		uxth	r2, r3
 367 015e 7B68     		ldr	r3, [r7, #4]
 368 0160 1A81     		strh	r2, [r3, #8]	@ movhi
 332:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 369              		.loc 1 332 0
 370 0162 2837     		adds	r7, r7, #40
 371 0164 BD46     		mov	sp, r7
 372              		@ sp needed
 373 0166 80BD     		pop	{r7, pc}
 374              	.L19:
 375              		.align	2
 376              	.L18:
 377 0168 00100140 		.word	1073811456
 378 016c 00140140 		.word	1073812480
 379 0170 1F85EB51 		.word	1374389535
 380              		.cfi_endproc
 381              	.LFE111:
 383              		.section	.text.USART_StructInit,"ax",%progbits
 384              		.align	2
 385              		.global	USART_StructInit
 386              		.thumb
 387              		.thumb_func
 389              	USART_StructInit:
 390              	.LFB112:
 333:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 334:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 335:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Fills each USART_InitStruct member with its default value.
 336:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure which will
 337:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         be initialized.
 338:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 339:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 340:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
 341:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 391              		.loc 1 341 0
 392              		.cfi_startproc
 393              		@ args = 0, pretend = 0, frame = 8
 394              		@ frame_needed = 1, uses_anonymous_args = 0
 395              		@ link register save eliminated.
 396 0000 80B4     		push	{r7}
 397              	.LCFI6:
 398              		.cfi_def_cfa_offset 4
 399              		.cfi_offset 7, -4
 400 0002 83B0     		sub	sp, sp, #12
 401              	.LCFI7:
 402              		.cfi_def_cfa_offset 16
 403 0004 00AF     		add	r7, sp, #0
 404              	.LCFI8:
 405              		.cfi_def_cfa_register 7
 406 0006 7860     		str	r0, [r7, #4]
 342:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* USART_InitStruct members default value */
 343:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART_InitStruct->USART_BaudRate = 9600;
 407              		.loc 1 343 0
 408 0008 7B68     		ldr	r3, [r7, #4]
 409 000a 4FF41652 		mov	r2, #9600
 410 000e 1A60     		str	r2, [r3]
 344:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 411              		.loc 1 344 0
 412 0010 7B68     		ldr	r3, [r7, #4]
 413 0012 0022     		movs	r2, #0
 414 0014 9A80     		strh	r2, [r3, #4]	@ movhi
 345:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART_InitStruct->USART_StopBits = USART_StopBits_1;
 415              		.loc 1 345 0
 416 0016 7B68     		ldr	r3, [r7, #4]
 417 0018 0022     		movs	r2, #0
 418 001a DA80     		strh	r2, [r3, #6]	@ movhi
 346:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART_InitStruct->USART_Parity = USART_Parity_No ;
 419              		.loc 1 346 0
 420 001c 7B68     		ldr	r3, [r7, #4]
 421 001e 0022     		movs	r2, #0
 422 0020 1A81     		strh	r2, [r3, #8]	@ movhi
 347:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 423              		.loc 1 347 0
 424 0022 7B68     		ldr	r3, [r7, #4]
 425 0024 0C22     		movs	r2, #12
 426 0026 5A81     		strh	r2, [r3, #10]	@ movhi
 348:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
 427              		.loc 1 348 0
 428 0028 7B68     		ldr	r3, [r7, #4]
 429 002a 0022     		movs	r2, #0
 430 002c 9A81     		strh	r2, [r3, #12]	@ movhi
 349:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 431              		.loc 1 349 0
 432 002e 0C37     		adds	r7, r7, #12
 433 0030 BD46     		mov	sp, r7
 434              		@ sp needed
 435 0032 5DF8047B 		ldr	r7, [sp], #4
 436 0036 7047     		bx	lr
 437              		.cfi_endproc
 438              	.LFE112:
 440              		.section	.text.USART_ClockInit,"ax",%progbits
 441              		.align	2
 442              		.global	USART_ClockInit
 443              		.thumb
 444              		.thumb_func
 446              	USART_ClockInit:
 447              	.LFB113:
 350:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 351:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 352:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Initializes the USARTx peripheral Clock according to the 
 353:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         specified parameters in the USART_ClockInitStruct .
 354:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3 or 6 to select the USART peripheral.
 355:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_ClockInitStruct: pointer to a USART_ClockInitTypeDef structure that
 356:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         contains the configuration information for the specified  USART peripheral.
 357:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @note   The Smart Card and Synchronous modes are not available for UART4 and UART5.    
 358:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 359:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 360:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
 361:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 448              		.loc 1 361 0
 449              		.cfi_startproc
 450              		@ args = 0, pretend = 0, frame = 16
 451              		@ frame_needed = 1, uses_anonymous_args = 0
 452              		@ link register save eliminated.
 453 0000 80B4     		push	{r7}
 454              	.LCFI9:
 455              		.cfi_def_cfa_offset 4
 456              		.cfi_offset 7, -4
 457 0002 85B0     		sub	sp, sp, #20
 458              	.LCFI10:
 459              		.cfi_def_cfa_offset 24
 460 0004 00AF     		add	r7, sp, #0
 461              	.LCFI11:
 462              		.cfi_def_cfa_register 7
 463 0006 7860     		str	r0, [r7, #4]
 464 0008 3960     		str	r1, [r7]
 362:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   uint32_t tmpreg = 0x00;
 465              		.loc 1 362 0
 466 000a 0023     		movs	r3, #0
 467 000c FB60     		str	r3, [r7, #12]
 363:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 364:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_1236_PERIPH(USARTx));
 365:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_CLOCK(USART_ClockInitStruct->USART_Clock));
 366:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
 367:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
 368:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
 369:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 370:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /*---------------------------- USART CR2 Configuration -----------------------*/
 371:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg = USARTx->CR2;
 468              		.loc 1 371 0
 469 000e 7B68     		ldr	r3, [r7, #4]
 470 0010 1B8A     		ldrh	r3, [r3, #16]	@ movhi
 471 0012 9BB2     		uxth	r3, r3
 472 0014 FB60     		str	r3, [r7, #12]
 372:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Clear CLKEN, CPOL, CPHA and LBCL bits */
 373:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg &= (uint32_t)~((uint32_t)CR2_CLOCK_CLEAR_MASK);
 473              		.loc 1 373 0
 474 0016 FB68     		ldr	r3, [r7, #12]
 475 0018 23F47063 		bic	r3, r3, #3840
 476 001c FB60     		str	r3, [r7, #12]
 374:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
 375:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Set CLKEN bit according to USART_Clock value */
 376:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Set CPOL bit according to USART_CPOL value */
 377:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Set CPHA bit according to USART_CPHA value */
 378:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Set LBCL bit according to USART_LastBit value */
 379:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
 477              		.loc 1 379 0
 478 001e 3B68     		ldr	r3, [r7]
 479 0020 1A88     		ldrh	r2, [r3]
 480 0022 3B68     		ldr	r3, [r7]
 481 0024 5B88     		ldrh	r3, [r3, #2]
 380:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                  USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 482              		.loc 1 380 0
 483 0026 1343     		orrs	r3, r3, r2
 484 0028 9AB2     		uxth	r2, r3
 485 002a 3B68     		ldr	r3, [r7]
 486 002c 9B88     		ldrh	r3, [r3, #4]
 487 002e 1343     		orrs	r3, r3, r2
 488 0030 9AB2     		uxth	r2, r3
 489 0032 3B68     		ldr	r3, [r7]
 490 0034 DB88     		ldrh	r3, [r3, #6]
 491 0036 1343     		orrs	r3, r3, r2
 492 0038 9BB2     		uxth	r3, r3
 379:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
 493              		.loc 1 379 0
 494 003a FA68     		ldr	r2, [r7, #12]
 495 003c 1343     		orrs	r3, r3, r2
 496 003e FB60     		str	r3, [r7, #12]
 381:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Write to USART CR2 */
 382:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->CR2 = (uint16_t)tmpreg;
 497              		.loc 1 382 0
 498 0040 FB68     		ldr	r3, [r7, #12]
 499 0042 9AB2     		uxth	r2, r3
 500 0044 7B68     		ldr	r3, [r7, #4]
 501 0046 1A82     		strh	r2, [r3, #16]	@ movhi
 383:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 502              		.loc 1 383 0
 503 0048 1437     		adds	r7, r7, #20
 504 004a BD46     		mov	sp, r7
 505              		@ sp needed
 506 004c 5DF8047B 		ldr	r7, [sp], #4
 507 0050 7047     		bx	lr
 508              		.cfi_endproc
 509              	.LFE113:
 511 0052 00BF     		.section	.text.USART_ClockStructInit,"ax",%progbits
 512              		.align	2
 513              		.global	USART_ClockStructInit
 514              		.thumb
 515              		.thumb_func
 517              	USART_ClockStructInit:
 518              	.LFB114:
 384:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 385:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 386:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Fills each USART_ClockInitStruct member with its default value.
 387:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_ClockInitStruct: pointer to a USART_ClockInitTypeDef structure
 388:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         which will be initialized.
 389:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 390:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 391:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
 392:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 519              		.loc 1 392 0
 520              		.cfi_startproc
 521              		@ args = 0, pretend = 0, frame = 8
 522              		@ frame_needed = 1, uses_anonymous_args = 0
 523              		@ link register save eliminated.
 524 0000 80B4     		push	{r7}
 525              	.LCFI12:
 526              		.cfi_def_cfa_offset 4
 527              		.cfi_offset 7, -4
 528 0002 83B0     		sub	sp, sp, #12
 529              	.LCFI13:
 530              		.cfi_def_cfa_offset 16
 531 0004 00AF     		add	r7, sp, #0
 532              	.LCFI14:
 533              		.cfi_def_cfa_register 7
 534 0006 7860     		str	r0, [r7, #4]
 393:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* USART_ClockInitStruct members default value */
 394:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
 535              		.loc 1 394 0
 536 0008 7B68     		ldr	r3, [r7, #4]
 537 000a 0022     		movs	r2, #0
 538 000c 1A80     		strh	r2, [r3]	@ movhi
 395:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
 539              		.loc 1 395 0
 540 000e 7B68     		ldr	r3, [r7, #4]
 541 0010 0022     		movs	r2, #0
 542 0012 5A80     		strh	r2, [r3, #2]	@ movhi
 396:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
 543              		.loc 1 396 0
 544 0014 7B68     		ldr	r3, [r7, #4]
 545 0016 0022     		movs	r2, #0
 546 0018 9A80     		strh	r2, [r3, #4]	@ movhi
 397:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
 547              		.loc 1 397 0
 548 001a 7B68     		ldr	r3, [r7, #4]
 549 001c 0022     		movs	r2, #0
 550 001e DA80     		strh	r2, [r3, #6]	@ movhi
 398:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 551              		.loc 1 398 0
 552 0020 0C37     		adds	r7, r7, #12
 553 0022 BD46     		mov	sp, r7
 554              		@ sp needed
 555 0024 5DF8047B 		ldr	r7, [sp], #4
 556 0028 7047     		bx	lr
 557              		.cfi_endproc
 558              	.LFE114:
 560 002a 00BF     		.section	.text.USART_Cmd,"ax",%progbits
 561              		.align	2
 562              		.global	USART_Cmd
 563              		.thumb
 564              		.thumb_func
 566              	USART_Cmd:
 567              	.LFB115:
 399:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 400:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 401:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Enables or disables the specified USART peripheral.
 402:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 403:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 404:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  NewState: new state of the USARTx peripheral.
 405:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
 406:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 407:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 408:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
 409:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 568              		.loc 1 409 0
 569              		.cfi_startproc
 570              		@ args = 0, pretend = 0, frame = 8
 571              		@ frame_needed = 1, uses_anonymous_args = 0
 572              		@ link register save eliminated.
 573 0000 80B4     		push	{r7}
 574              	.LCFI15:
 575              		.cfi_def_cfa_offset 4
 576              		.cfi_offset 7, -4
 577 0002 83B0     		sub	sp, sp, #12
 578              	.LCFI16:
 579              		.cfi_def_cfa_offset 16
 580 0004 00AF     		add	r7, sp, #0
 581              	.LCFI17:
 582              		.cfi_def_cfa_register 7
 583 0006 7860     		str	r0, [r7, #4]
 584 0008 0B46     		mov	r3, r1
 585 000a FB70     		strb	r3, [r7, #3]
 410:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 411:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 412:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 413:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 414:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 586              		.loc 1 414 0
 587 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 588 000e 002B     		cmp	r3, #0
 589 0010 08D0     		beq	.L24
 415:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 416:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Enable the selected USART by setting the UE bit in the CR1 register */
 417:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR1 |= USART_CR1_UE;
 590              		.loc 1 417 0
 591 0012 7B68     		ldr	r3, [r7, #4]
 592 0014 9B89     		ldrh	r3, [r3, #12]	@ movhi
 593 0016 9BB2     		uxth	r3, r3
 594 0018 43F40053 		orr	r3, r3, #8192
 595 001c 9AB2     		uxth	r2, r3
 596 001e 7B68     		ldr	r3, [r7, #4]
 597 0020 9A81     		strh	r2, [r3, #12]	@ movhi
 598 0022 07E0     		b	.L23
 599              	.L24:
 418:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 419:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
 420:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 421:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Disable the selected USART by clearing the UE bit in the CR1 register */
 422:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 600              		.loc 1 422 0
 601 0024 7B68     		ldr	r3, [r7, #4]
 602 0026 9B89     		ldrh	r3, [r3, #12]	@ movhi
 603 0028 9BB2     		uxth	r3, r3
 604 002a 23F40053 		bic	r3, r3, #8192
 605 002e 9AB2     		uxth	r2, r3
 606 0030 7B68     		ldr	r3, [r7, #4]
 607 0032 9A81     		strh	r2, [r3, #12]	@ movhi
 608              	.L23:
 423:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 424:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 609              		.loc 1 424 0
 610 0034 0C37     		adds	r7, r7, #12
 611 0036 BD46     		mov	sp, r7
 612              		@ sp needed
 613 0038 5DF8047B 		ldr	r7, [sp], #4
 614 003c 7047     		bx	lr
 615              		.cfi_endproc
 616              	.LFE115:
 618 003e 00BF     		.section	.text.USART_SetPrescaler,"ax",%progbits
 619              		.align	2
 620              		.global	USART_SetPrescaler
 621              		.thumb
 622              		.thumb_func
 624              	USART_SetPrescaler:
 625              	.LFB116:
 425:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 426:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 427:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Sets the system clock prescaler.
 428:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 429:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 430:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_Prescaler: specifies the prescaler clock. 
 431:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @note   The function is used for IrDA mode with UART4 and UART5.   
 432:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 433:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 434:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_SetPrescaler(USART_TypeDef* USARTx, uint8_t USART_Prescaler)
 435:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** { 
 626              		.loc 1 435 0
 627              		.cfi_startproc
 628              		@ args = 0, pretend = 0, frame = 8
 629              		@ frame_needed = 1, uses_anonymous_args = 0
 630              		@ link register save eliminated.
 631 0000 80B4     		push	{r7}
 632              	.LCFI18:
 633              		.cfi_def_cfa_offset 4
 634              		.cfi_offset 7, -4
 635 0002 83B0     		sub	sp, sp, #12
 636              	.LCFI19:
 637              		.cfi_def_cfa_offset 16
 638 0004 00AF     		add	r7, sp, #0
 639              	.LCFI20:
 640              		.cfi_def_cfa_register 7
 641 0006 7860     		str	r0, [r7, #4]
 642 0008 0B46     		mov	r3, r1
 643 000a FB70     		strb	r3, [r7, #3]
 436:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 437:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 438:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 439:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Clear the USART prescaler */
 440:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->GTPR &= USART_GTPR_GT;
 644              		.loc 1 440 0
 645 000c 7B68     		ldr	r3, [r7, #4]
 646 000e 1B8B     		ldrh	r3, [r3, #24]	@ movhi
 647 0010 9BB2     		uxth	r3, r3
 648 0012 23F0FF03 		bic	r3, r3, #255
 649 0016 9AB2     		uxth	r2, r3
 650 0018 7B68     		ldr	r3, [r7, #4]
 651 001a 1A83     		strh	r2, [r3, #24]	@ movhi
 441:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Set the USART prescaler */
 442:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->GTPR |= USART_Prescaler;
 652              		.loc 1 442 0
 653 001c 7B68     		ldr	r3, [r7, #4]
 654 001e 1B8B     		ldrh	r3, [r3, #24]	@ movhi
 655 0020 9AB2     		uxth	r2, r3
 656 0022 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 657 0024 9BB2     		uxth	r3, r3
 658 0026 1343     		orrs	r3, r3, r2
 659 0028 9AB2     		uxth	r2, r3
 660 002a 7B68     		ldr	r3, [r7, #4]
 661 002c 1A83     		strh	r2, [r3, #24]	@ movhi
 443:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 662              		.loc 1 443 0
 663 002e 0C37     		adds	r7, r7, #12
 664 0030 BD46     		mov	sp, r7
 665              		@ sp needed
 666 0032 5DF8047B 		ldr	r7, [sp], #4
 667 0036 7047     		bx	lr
 668              		.cfi_endproc
 669              	.LFE116:
 671              		.section	.text.USART_OverSampling8Cmd,"ax",%progbits
 672              		.align	2
 673              		.global	USART_OverSampling8Cmd
 674              		.thumb
 675              		.thumb_func
 677              	USART_OverSampling8Cmd:
 678              	.LFB117:
 444:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 445:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 446:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Enables or disables the USART's 8x oversampling mode.
 447:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @note   This function has to be called before calling USART_Init() function
 448:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         in order to have correct baudrate Divider value.
 449:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 450:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 451:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  NewState: new state of the USART 8x oversampling mode.
 452:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
 453:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 454:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 455:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_OverSampling8Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
 456:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 679              		.loc 1 456 0
 680              		.cfi_startproc
 681              		@ args = 0, pretend = 0, frame = 8
 682              		@ frame_needed = 1, uses_anonymous_args = 0
 683              		@ link register save eliminated.
 684 0000 80B4     		push	{r7}
 685              	.LCFI21:
 686              		.cfi_def_cfa_offset 4
 687              		.cfi_offset 7, -4
 688 0002 83B0     		sub	sp, sp, #12
 689              	.LCFI22:
 690              		.cfi_def_cfa_offset 16
 691 0004 00AF     		add	r7, sp, #0
 692              	.LCFI23:
 693              		.cfi_def_cfa_register 7
 694 0006 7860     		str	r0, [r7, #4]
 695 0008 0B46     		mov	r3, r1
 696 000a FB70     		strb	r3, [r7, #3]
 457:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 458:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 459:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 460:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 461:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 697              		.loc 1 461 0
 698 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 699 000e 002B     		cmp	r3, #0
 700 0010 0AD0     		beq	.L28
 462:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 463:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
 464:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR1 |= USART_CR1_OVER8;
 701              		.loc 1 464 0
 702 0012 7B68     		ldr	r3, [r7, #4]
 703 0014 9B89     		ldrh	r3, [r3, #12]	@ movhi
 704 0016 9BB2     		uxth	r3, r3
 705 0018 6FEA4343 		mvn	r3, r3, lsl #17
 706 001c 6FEA5343 		mvn	r3, r3, lsr #17
 707 0020 9AB2     		uxth	r2, r3
 708 0022 7B68     		ldr	r3, [r7, #4]
 709 0024 9A81     		strh	r2, [r3, #12]	@ movhi
 710 0026 07E0     		b	.L27
 711              	.L28:
 465:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 466:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
 467:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 468:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
 469:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_OVER8);
 712              		.loc 1 469 0
 713 0028 7B68     		ldr	r3, [r7, #4]
 714 002a 9B89     		ldrh	r3, [r3, #12]	@ movhi
 715 002c 9BB2     		uxth	r3, r3
 716 002e C3F30E03 		ubfx	r3, r3, #0, #15
 717 0032 9AB2     		uxth	r2, r3
 718 0034 7B68     		ldr	r3, [r7, #4]
 719 0036 9A81     		strh	r2, [r3, #12]	@ movhi
 720              	.L27:
 470:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 471:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }  
 721              		.loc 1 471 0
 722 0038 0C37     		adds	r7, r7, #12
 723 003a BD46     		mov	sp, r7
 724              		@ sp needed
 725 003c 5DF8047B 		ldr	r7, [sp], #4
 726 0040 7047     		bx	lr
 727              		.cfi_endproc
 728              	.LFE117:
 730 0042 00BF     		.section	.text.USART_OneBitMethodCmd,"ax",%progbits
 731              		.align	2
 732              		.global	USART_OneBitMethodCmd
 733              		.thumb
 734              		.thumb_func
 736              	USART_OneBitMethodCmd:
 737              	.LFB118:
 472:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 473:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 474:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Enables or disables the USART's one bit sampling method.
 475:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 476:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 477:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  NewState: new state of the USART one bit sampling method.
 478:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
 479:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 480:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 481:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_OneBitMethodCmd(USART_TypeDef* USARTx, FunctionalState NewState)
 482:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 738              		.loc 1 482 0
 739              		.cfi_startproc
 740              		@ args = 0, pretend = 0, frame = 8
 741              		@ frame_needed = 1, uses_anonymous_args = 0
 742              		@ link register save eliminated.
 743 0000 80B4     		push	{r7}
 744              	.LCFI24:
 745              		.cfi_def_cfa_offset 4
 746              		.cfi_offset 7, -4
 747 0002 83B0     		sub	sp, sp, #12
 748              	.LCFI25:
 749              		.cfi_def_cfa_offset 16
 750 0004 00AF     		add	r7, sp, #0
 751              	.LCFI26:
 752              		.cfi_def_cfa_register 7
 753 0006 7860     		str	r0, [r7, #4]
 754 0008 0B46     		mov	r3, r1
 755 000a FB70     		strb	r3, [r7, #3]
 483:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 484:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 485:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 486:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 487:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 756              		.loc 1 487 0
 757 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 758 000e 002B     		cmp	r3, #0
 759 0010 08D0     		beq	.L31
 488:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 489:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
 490:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR3 |= USART_CR3_ONEBIT;
 760              		.loc 1 490 0
 761 0012 7B68     		ldr	r3, [r7, #4]
 762 0014 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 763 0016 9BB2     		uxth	r3, r3
 764 0018 43F40063 		orr	r3, r3, #2048
 765 001c 9AB2     		uxth	r2, r3
 766 001e 7B68     		ldr	r3, [r7, #4]
 767 0020 9A82     		strh	r2, [r3, #20]	@ movhi
 768 0022 07E0     		b	.L30
 769              	.L31:
 491:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 492:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
 493:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 494:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Disable the one bit method by clearing the ONEBITE bit in the CR3 register */
 495:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_ONEBIT);
 770              		.loc 1 495 0
 771 0024 7B68     		ldr	r3, [r7, #4]
 772 0026 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 773 0028 9BB2     		uxth	r3, r3
 774 002a 23F40063 		bic	r3, r3, #2048
 775 002e 9AB2     		uxth	r2, r3
 776 0030 7B68     		ldr	r3, [r7, #4]
 777 0032 9A82     		strh	r2, [r3, #20]	@ movhi
 778              	.L30:
 496:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 497:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 779              		.loc 1 497 0
 780 0034 0C37     		adds	r7, r7, #12
 781 0036 BD46     		mov	sp, r7
 782              		@ sp needed
 783 0038 5DF8047B 		ldr	r7, [sp], #4
 784 003c 7047     		bx	lr
 785              		.cfi_endproc
 786              	.LFE118:
 788 003e 00BF     		.section	.text.USART_SendData,"ax",%progbits
 789              		.align	2
 790              		.global	USART_SendData
 791              		.thumb
 792              		.thumb_func
 794              	USART_SendData:
 795              	.LFB119:
 498:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 499:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 500:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @}
 501:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 502:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 503:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /** @defgroup USART_Group2 Data transfers functions
 504:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *  @brief   Data transfers functions 
 505:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *
 506:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @verbatim   
 507:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================
 508:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                             Data transfers functions
 509:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================  
 510:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 511:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   This subsection provides a set of functions allowing to manage the USART data 
 512:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   transfers.
 513:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 514:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   During an USART reception, data shifts in least significant bit first through 
 515:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   the RX pin. In this mode, the USART_DR register consists of a buffer (RDR) 
 516:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   between the internal bus and the received shift register.
 517:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 518:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   When a transmission is taking place, a write instruction to the USART_DR register 
 519:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   stores the data in the TDR register and which is copied in the shift register 
 520:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   at the end of the current transmission.
 521:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 522:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   The read access of the USART_DR register can be done using the USART_ReceiveData()
 523:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   function and returns the RDR buffered value. Whereas a write access to the USART_DR 
 524:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   can be done using USART_SendData() function and stores the written data into 
 525:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   TDR buffer.
 526:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 527:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @endverbatim
 528:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @{
 529:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 530:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 531:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 532:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Transmits single data through the USARTx peripheral.
 533:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 534:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 535:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  Data: the data to transmit.
 536:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 537:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 538:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
 539:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 796              		.loc 1 539 0
 797              		.cfi_startproc
 798              		@ args = 0, pretend = 0, frame = 8
 799              		@ frame_needed = 1, uses_anonymous_args = 0
 800              		@ link register save eliminated.
 801 0000 80B4     		push	{r7}
 802              	.LCFI27:
 803              		.cfi_def_cfa_offset 4
 804              		.cfi_offset 7, -4
 805 0002 83B0     		sub	sp, sp, #12
 806              	.LCFI28:
 807              		.cfi_def_cfa_offset 16
 808 0004 00AF     		add	r7, sp, #0
 809              	.LCFI29:
 810              		.cfi_def_cfa_register 7
 811 0006 7860     		str	r0, [r7, #4]
 812 0008 0B46     		mov	r3, r1
 813 000a 7B80     		strh	r3, [r7, #2]	@ movhi
 540:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 541:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 542:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_DATA(Data)); 
 543:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     
 544:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Transmit Data */
 545:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->DR = (Data & (uint16_t)0x01FF);
 814              		.loc 1 545 0
 815 000c 7B88     		ldrh	r3, [r7, #2]	@ movhi
 816 000e C3F30803 		ubfx	r3, r3, #0, #9
 817 0012 9AB2     		uxth	r2, r3
 818 0014 7B68     		ldr	r3, [r7, #4]
 819 0016 9A80     		strh	r2, [r3, #4]	@ movhi
 546:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 820              		.loc 1 546 0
 821 0018 0C37     		adds	r7, r7, #12
 822 001a BD46     		mov	sp, r7
 823              		@ sp needed
 824 001c 5DF8047B 		ldr	r7, [sp], #4
 825 0020 7047     		bx	lr
 826              		.cfi_endproc
 827              	.LFE119:
 829 0022 00BF     		.section	.text.USART_ReceiveData,"ax",%progbits
 830              		.align	2
 831              		.global	USART_ReceiveData
 832              		.thumb
 833              		.thumb_func
 835              	USART_ReceiveData:
 836              	.LFB120:
 547:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 548:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 549:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Returns the most recent received data by the USARTx peripheral.
 550:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 551:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 552:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval The received data.
 553:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 554:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
 555:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 837              		.loc 1 555 0
 838              		.cfi_startproc
 839              		@ args = 0, pretend = 0, frame = 8
 840              		@ frame_needed = 1, uses_anonymous_args = 0
 841              		@ link register save eliminated.
 842 0000 80B4     		push	{r7}
 843              	.LCFI30:
 844              		.cfi_def_cfa_offset 4
 845              		.cfi_offset 7, -4
 846 0002 83B0     		sub	sp, sp, #12
 847              	.LCFI31:
 848              		.cfi_def_cfa_offset 16
 849 0004 00AF     		add	r7, sp, #0
 850              	.LCFI32:
 851              		.cfi_def_cfa_register 7
 852 0006 7860     		str	r0, [r7, #4]
 556:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 557:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 558:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 559:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Receive Data */
 560:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 853              		.loc 1 560 0
 854 0008 7B68     		ldr	r3, [r7, #4]
 855 000a 9B88     		ldrh	r3, [r3, #4]	@ movhi
 856 000c 9BB2     		uxth	r3, r3
 857 000e C3F30803 		ubfx	r3, r3, #0, #9
 858 0012 9BB2     		uxth	r3, r3
 561:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 859              		.loc 1 561 0
 860 0014 1846     		mov	r0, r3
 861 0016 0C37     		adds	r7, r7, #12
 862 0018 BD46     		mov	sp, r7
 863              		@ sp needed
 864 001a 5DF8047B 		ldr	r7, [sp], #4
 865 001e 7047     		bx	lr
 866              		.cfi_endproc
 867              	.LFE120:
 869              		.section	.text.USART_SetAddress,"ax",%progbits
 870              		.align	2
 871              		.global	USART_SetAddress
 872              		.thumb
 873              		.thumb_func
 875              	USART_SetAddress:
 876              	.LFB121:
 562:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 563:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 564:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @}
 565:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 566:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 567:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /** @defgroup USART_Group3 MultiProcessor Communication functions
 568:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *  @brief   Multi-Processor Communication functions 
 569:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *
 570:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @verbatim   
 571:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================
 572:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                     Multi-Processor Communication functions
 573:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================  
 574:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 575:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   This subsection provides a set of functions allowing to manage the USART 
 576:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   multiprocessor communication.
 577:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 578:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   For instance one of the USARTs can be the master, its TX output is connected to 
 579:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   the RX input of the other USART. The others are slaves, their respective TX outputs 
 580:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   are logically ANDed together and connected to the RX input of the master.
 581:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 582:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART multiprocessor communication is possible through the following procedure:
 583:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      1. Program the Baud rate, Word length = 9 bits, Stop bits, Parity, Mode transmitter 
 584:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         or Mode receiver and hardware flow control values using the USART_Init()
 585:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         function.
 586:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      2. Configures the USART address using the USART_SetAddress() function.
 587:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      3. Configures the wake up method (USART_WakeUp_IdleLine or USART_WakeUp_AddressMark)
 588:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         using USART_WakeUpConfig() function only for the slaves.
 589:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      4. Enable the USART using the USART_Cmd() function.
 590:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      5. Enter the USART slaves in mute mode using USART_ReceiverWakeUpCmd() function.
 591:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 592:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   The USART Slave exit from mute mode when receive the wake up condition.
 593:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 594:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @endverbatim
 595:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @{
 596:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 597:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 598:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 599:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Sets the address of the USART node.
 600:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 601:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 602:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_Address: Indicates the address of the USART node.
 603:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 604:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 605:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_SetAddress(USART_TypeDef* USARTx, uint8_t USART_Address)
 606:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 877              		.loc 1 606 0
 878              		.cfi_startproc
 879              		@ args = 0, pretend = 0, frame = 8
 880              		@ frame_needed = 1, uses_anonymous_args = 0
 881              		@ link register save eliminated.
 882 0000 80B4     		push	{r7}
 883              	.LCFI33:
 884              		.cfi_def_cfa_offset 4
 885              		.cfi_offset 7, -4
 886 0002 83B0     		sub	sp, sp, #12
 887              	.LCFI34:
 888              		.cfi_def_cfa_offset 16
 889 0004 00AF     		add	r7, sp, #0
 890              	.LCFI35:
 891              		.cfi_def_cfa_register 7
 892 0006 7860     		str	r0, [r7, #4]
 893 0008 0B46     		mov	r3, r1
 894 000a FB70     		strb	r3, [r7, #3]
 607:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 608:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 609:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ADDRESS(USART_Address)); 
 610:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     
 611:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Clear the USART address */
 612:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_ADD);
 895              		.loc 1 612 0
 896 000c 7B68     		ldr	r3, [r7, #4]
 897 000e 1B8A     		ldrh	r3, [r3, #16]	@ movhi
 898 0010 9BB2     		uxth	r3, r3
 899 0012 23F00F03 		bic	r3, r3, #15
 900 0016 9AB2     		uxth	r2, r3
 901 0018 7B68     		ldr	r3, [r7, #4]
 902 001a 1A82     		strh	r2, [r3, #16]	@ movhi
 613:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Set the USART address node */
 614:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->CR2 |= USART_Address;
 903              		.loc 1 614 0
 904 001c 7B68     		ldr	r3, [r7, #4]
 905 001e 1B8A     		ldrh	r3, [r3, #16]	@ movhi
 906 0020 9AB2     		uxth	r2, r3
 907 0022 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 908 0024 9BB2     		uxth	r3, r3
 909 0026 1343     		orrs	r3, r3, r2
 910 0028 9AB2     		uxth	r2, r3
 911 002a 7B68     		ldr	r3, [r7, #4]
 912 002c 1A82     		strh	r2, [r3, #16]	@ movhi
 615:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 913              		.loc 1 615 0
 914 002e 0C37     		adds	r7, r7, #12
 915 0030 BD46     		mov	sp, r7
 916              		@ sp needed
 917 0032 5DF8047B 		ldr	r7, [sp], #4
 918 0036 7047     		bx	lr
 919              		.cfi_endproc
 920              	.LFE121:
 922              		.section	.text.USART_ReceiverWakeUpCmd,"ax",%progbits
 923              		.align	2
 924              		.global	USART_ReceiverWakeUpCmd
 925              		.thumb
 926              		.thumb_func
 928              	USART_ReceiverWakeUpCmd:
 929              	.LFB122:
 616:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 617:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 618:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Determines if the USART is in mute mode or not.
 619:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 620:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 621:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  NewState: new state of the USART mute mode.
 622:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
 623:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 624:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 625:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_ReceiverWakeUpCmd(USART_TypeDef* USARTx, FunctionalState NewState)
 626:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 930              		.loc 1 626 0
 931              		.cfi_startproc
 932              		@ args = 0, pretend = 0, frame = 8
 933              		@ frame_needed = 1, uses_anonymous_args = 0
 934              		@ link register save eliminated.
 935 0000 80B4     		push	{r7}
 936              	.LCFI36:
 937              		.cfi_def_cfa_offset 4
 938              		.cfi_offset 7, -4
 939 0002 83B0     		sub	sp, sp, #12
 940              	.LCFI37:
 941              		.cfi_def_cfa_offset 16
 942 0004 00AF     		add	r7, sp, #0
 943              	.LCFI38:
 944              		.cfi_def_cfa_register 7
 945 0006 7860     		str	r0, [r7, #4]
 946 0008 0B46     		mov	r3, r1
 947 000a FB70     		strb	r3, [r7, #3]
 627:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 628:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 629:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState)); 
 630:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 631:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 948              		.loc 1 631 0
 949 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 950 000e 002B     		cmp	r3, #0
 951 0010 08D0     		beq	.L38
 632:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 633:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
 634:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR1 |= USART_CR1_RWU;
 952              		.loc 1 634 0
 953 0012 7B68     		ldr	r3, [r7, #4]
 954 0014 9B89     		ldrh	r3, [r3, #12]	@ movhi
 955 0016 9BB2     		uxth	r3, r3
 956 0018 43F00203 		orr	r3, r3, #2
 957 001c 9AB2     		uxth	r2, r3
 958 001e 7B68     		ldr	r3, [r7, #4]
 959 0020 9A81     		strh	r2, [r3, #12]	@ movhi
 960 0022 07E0     		b	.L37
 961              	.L38:
 635:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 636:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
 637:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 638:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
 639:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_RWU);
 962              		.loc 1 639 0
 963 0024 7B68     		ldr	r3, [r7, #4]
 964 0026 9B89     		ldrh	r3, [r3, #12]	@ movhi
 965 0028 9BB2     		uxth	r3, r3
 966 002a 23F00203 		bic	r3, r3, #2
 967 002e 9AB2     		uxth	r2, r3
 968 0030 7B68     		ldr	r3, [r7, #4]
 969 0032 9A81     		strh	r2, [r3, #12]	@ movhi
 970              	.L37:
 640:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 641:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 971              		.loc 1 641 0
 972 0034 0C37     		adds	r7, r7, #12
 973 0036 BD46     		mov	sp, r7
 974              		@ sp needed
 975 0038 5DF8047B 		ldr	r7, [sp], #4
 976 003c 7047     		bx	lr
 977              		.cfi_endproc
 978              	.LFE122:
 980 003e 00BF     		.section	.text.USART_WakeUpConfig,"ax",%progbits
 981              		.align	2
 982              		.global	USART_WakeUpConfig
 983              		.thumb
 984              		.thumb_func
 986              	USART_WakeUpConfig:
 987              	.LFB123:
 642:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 643:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Selects the USART WakeUp method.
 644:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 645:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 646:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_WakeUp: specifies the USART wakeup method.
 647:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be one of the following values:
 648:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_WakeUp_IdleLine: WakeUp by an idle line detection
 649:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_WakeUp_AddressMark: WakeUp by an address mark
 650:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 651:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 652:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_WakeUpConfig(USART_TypeDef* USARTx, uint16_t USART_WakeUp)
 653:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 988              		.loc 1 653 0
 989              		.cfi_startproc
 990              		@ args = 0, pretend = 0, frame = 8
 991              		@ frame_needed = 1, uses_anonymous_args = 0
 992              		@ link register save eliminated.
 993 0000 80B4     		push	{r7}
 994              	.LCFI39:
 995              		.cfi_def_cfa_offset 4
 996              		.cfi_offset 7, -4
 997 0002 83B0     		sub	sp, sp, #12
 998              	.LCFI40:
 999              		.cfi_def_cfa_offset 16
 1000 0004 00AF     		add	r7, sp, #0
 1001              	.LCFI41:
 1002              		.cfi_def_cfa_register 7
 1003 0006 7860     		str	r0, [r7, #4]
 1004 0008 0B46     		mov	r3, r1
 1005 000a 7B80     		strh	r3, [r7, #2]	@ movhi
 654:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 655:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 656:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_WAKEUP(USART_WakeUp));
 657:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 658:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_WAKE);
 1006              		.loc 1 658 0
 1007 000c 7B68     		ldr	r3, [r7, #4]
 1008 000e 9B89     		ldrh	r3, [r3, #12]	@ movhi
 1009 0010 9BB2     		uxth	r3, r3
 1010 0012 23F40063 		bic	r3, r3, #2048
 1011 0016 9AB2     		uxth	r2, r3
 1012 0018 7B68     		ldr	r3, [r7, #4]
 1013 001a 9A81     		strh	r2, [r3, #12]	@ movhi
 659:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->CR1 |= USART_WakeUp;
 1014              		.loc 1 659 0
 1015 001c 7B68     		ldr	r3, [r7, #4]
 1016 001e 9B89     		ldrh	r3, [r3, #12]	@ movhi
 1017 0020 9AB2     		uxth	r2, r3
 1018 0022 7B88     		ldrh	r3, [r7, #2]	@ movhi
 1019 0024 1343     		orrs	r3, r3, r2
 1020 0026 9AB2     		uxth	r2, r3
 1021 0028 7B68     		ldr	r3, [r7, #4]
 1022 002a 9A81     		strh	r2, [r3, #12]	@ movhi
 660:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 1023              		.loc 1 660 0
 1024 002c 0C37     		adds	r7, r7, #12
 1025 002e BD46     		mov	sp, r7
 1026              		@ sp needed
 1027 0030 5DF8047B 		ldr	r7, [sp], #4
 1028 0034 7047     		bx	lr
 1029              		.cfi_endproc
 1030              	.LFE123:
 1032 0036 00BF     		.section	.text.USART_LINBreakDetectLengthConfig,"ax",%progbits
 1033              		.align	2
 1034              		.global	USART_LINBreakDetectLengthConfig
 1035              		.thumb
 1036              		.thumb_func
 1038              	USART_LINBreakDetectLengthConfig:
 1039              	.LFB124:
 661:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 662:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 663:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @}
 664:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 665:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 666:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /** @defgroup USART_Group4 LIN mode functions
 667:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *  @brief   LIN mode functions 
 668:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *
 669:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @verbatim   
 670:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================
 671:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                                 LIN mode functions
 672:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================  
 673:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 674:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   This subsection provides a set of functions allowing to manage the USART LIN 
 675:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   Mode communication.
 676:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 677:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   In LIN mode, 8-bit data format with 1 stop bit is required in accordance with 
 678:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   the LIN standard.
 679:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 680:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   Only this LIN Feature is supported by the USART IP:
 681:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     - LIN Master Synchronous Break send capability and LIN slave break detection
 682:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       capability :  13-bit break generation and 10/11 bit break detection
 683:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 684:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 685:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART LIN Master transmitter communication is possible through the following procedure:
 686:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      1. Program the Baud rate, Word length = 8bits, Stop bits = 1bit, Parity, 
 687:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         Mode transmitter or Mode receiver and hardware flow control values using 
 688:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         the USART_Init() function.
 689:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      2. Enable the USART using the USART_Cmd() function.
 690:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      3. Enable the LIN mode using the USART_LINCmd() function.
 691:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      4. Send the break character using USART_SendBreak() function.
 692:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 693:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART LIN Master receiver communication is possible through the following procedure:
 694:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      1. Program the Baud rate, Word length = 8bits, Stop bits = 1bit, Parity, 
 695:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         Mode transmitter or Mode receiver and hardware flow control values using 
 696:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         the USART_Init() function.
 697:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      2. Enable the USART using the USART_Cmd() function.
 698:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      3. Configures the break detection length using the USART_LINBreakDetectLengthConfig()
 699:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         function.
 700:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      4. Enable the LIN mode using the USART_LINCmd() function.
 701:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 702:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 703:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @note In LIN mode, the following bits must be kept cleared:
 704:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - CLKEN in the USART_CR2 register,
 705:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - STOP[1:0], SCEN, HDSEL and IREN in the USART_CR3 register.
 706:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 707:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @endverbatim
 708:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @{
 709:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 710:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 711:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 712:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Sets the USART LIN Break detection length.
 713:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 714:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 715:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_LINBreakDetectLength: specifies the LIN break detection length.
 716:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be one of the following values:
 717:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_LINBreakDetectLength_10b: 10-bit break detection
 718:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_LINBreakDetectLength_11b: 11-bit break detection
 719:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 720:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 721:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_LINBreakDetectLengthConfig(USART_TypeDef* USARTx, uint16_t USART_LINBreakDetectLength)
 722:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 1040              		.loc 1 722 0
 1041              		.cfi_startproc
 1042              		@ args = 0, pretend = 0, frame = 8
 1043              		@ frame_needed = 1, uses_anonymous_args = 0
 1044              		@ link register save eliminated.
 1045 0000 80B4     		push	{r7}
 1046              	.LCFI42:
 1047              		.cfi_def_cfa_offset 4
 1048              		.cfi_offset 7, -4
 1049 0002 83B0     		sub	sp, sp, #12
 1050              	.LCFI43:
 1051              		.cfi_def_cfa_offset 16
 1052 0004 00AF     		add	r7, sp, #0
 1053              	.LCFI44:
 1054              		.cfi_def_cfa_register 7
 1055 0006 7860     		str	r0, [r7, #4]
 1056 0008 0B46     		mov	r3, r1
 1057 000a 7B80     		strh	r3, [r7, #2]	@ movhi
 723:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 724:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 725:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));
 726:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 727:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LBDL);
 1058              		.loc 1 727 0
 1059 000c 7B68     		ldr	r3, [r7, #4]
 1060 000e 1B8A     		ldrh	r3, [r3, #16]	@ movhi
 1061 0010 9BB2     		uxth	r3, r3
 1062 0012 23F02003 		bic	r3, r3, #32
 1063 0016 9AB2     		uxth	r2, r3
 1064 0018 7B68     		ldr	r3, [r7, #4]
 1065 001a 1A82     		strh	r2, [r3, #16]	@ movhi
 728:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->CR2 |= USART_LINBreakDetectLength;  
 1066              		.loc 1 728 0
 1067 001c 7B68     		ldr	r3, [r7, #4]
 1068 001e 1B8A     		ldrh	r3, [r3, #16]	@ movhi
 1069 0020 9AB2     		uxth	r2, r3
 1070 0022 7B88     		ldrh	r3, [r7, #2]	@ movhi
 1071 0024 1343     		orrs	r3, r3, r2
 1072 0026 9AB2     		uxth	r2, r3
 1073 0028 7B68     		ldr	r3, [r7, #4]
 1074 002a 1A82     		strh	r2, [r3, #16]	@ movhi
 729:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 1075              		.loc 1 729 0
 1076 002c 0C37     		adds	r7, r7, #12
 1077 002e BD46     		mov	sp, r7
 1078              		@ sp needed
 1079 0030 5DF8047B 		ldr	r7, [sp], #4
 1080 0034 7047     		bx	lr
 1081              		.cfi_endproc
 1082              	.LFE124:
 1084 0036 00BF     		.section	.text.USART_LINCmd,"ax",%progbits
 1085              		.align	2
 1086              		.global	USART_LINCmd
 1087              		.thumb
 1088              		.thumb_func
 1090              	USART_LINCmd:
 1091              	.LFB125:
 730:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 731:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 732:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Enables or disables the USART's LIN mode.
 733:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 734:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 735:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  NewState: new state of the USART LIN mode.
 736:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
 737:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 738:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 739:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_LINCmd(USART_TypeDef* USARTx, FunctionalState NewState)
 740:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 1092              		.loc 1 740 0
 1093              		.cfi_startproc
 1094              		@ args = 0, pretend = 0, frame = 8
 1095              		@ frame_needed = 1, uses_anonymous_args = 0
 1096              		@ link register save eliminated.
 1097 0000 80B4     		push	{r7}
 1098              	.LCFI45:
 1099              		.cfi_def_cfa_offset 4
 1100              		.cfi_offset 7, -4
 1101 0002 83B0     		sub	sp, sp, #12
 1102              	.LCFI46:
 1103              		.cfi_def_cfa_offset 16
 1104 0004 00AF     		add	r7, sp, #0
 1105              	.LCFI47:
 1106              		.cfi_def_cfa_register 7
 1107 0006 7860     		str	r0, [r7, #4]
 1108 0008 0B46     		mov	r3, r1
 1109 000a FB70     		strb	r3, [r7, #3]
 741:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 742:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 743:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 744:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 745:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 1110              		.loc 1 745 0
 1111 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1112 000e 002B     		cmp	r3, #0
 1113 0010 08D0     		beq	.L43
 746:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 747:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
 748:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR2 |= USART_CR2_LINEN;
 1114              		.loc 1 748 0
 1115 0012 7B68     		ldr	r3, [r7, #4]
 1116 0014 1B8A     		ldrh	r3, [r3, #16]	@ movhi
 1117 0016 9BB2     		uxth	r3, r3
 1118 0018 43F48043 		orr	r3, r3, #16384
 1119 001c 9AB2     		uxth	r2, r3
 1120 001e 7B68     		ldr	r3, [r7, #4]
 1121 0020 1A82     		strh	r2, [r3, #16]	@ movhi
 1122 0022 07E0     		b	.L42
 1123              	.L43:
 749:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 750:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
 751:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 752:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
 753:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LINEN);
 1124              		.loc 1 753 0
 1125 0024 7B68     		ldr	r3, [r7, #4]
 1126 0026 1B8A     		ldrh	r3, [r3, #16]	@ movhi
 1127 0028 9BB2     		uxth	r3, r3
 1128 002a 23F48043 		bic	r3, r3, #16384
 1129 002e 9AB2     		uxth	r2, r3
 1130 0030 7B68     		ldr	r3, [r7, #4]
 1131 0032 1A82     		strh	r2, [r3, #16]	@ movhi
 1132              	.L42:
 754:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 755:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 1133              		.loc 1 755 0
 1134 0034 0C37     		adds	r7, r7, #12
 1135 0036 BD46     		mov	sp, r7
 1136              		@ sp needed
 1137 0038 5DF8047B 		ldr	r7, [sp], #4
 1138 003c 7047     		bx	lr
 1139              		.cfi_endproc
 1140              	.LFE125:
 1142 003e 00BF     		.section	.text.USART_SendBreak,"ax",%progbits
 1143              		.align	2
 1144              		.global	USART_SendBreak
 1145              		.thumb
 1146              		.thumb_func
 1148              	USART_SendBreak:
 1149              	.LFB126:
 756:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 757:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 758:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Transmits break characters.
 759:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 760:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 761:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 762:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 763:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_SendBreak(USART_TypeDef* USARTx)
 764:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 1150              		.loc 1 764 0
 1151              		.cfi_startproc
 1152              		@ args = 0, pretend = 0, frame = 8
 1153              		@ frame_needed = 1, uses_anonymous_args = 0
 1154              		@ link register save eliminated.
 1155 0000 80B4     		push	{r7}
 1156              	.LCFI48:
 1157              		.cfi_def_cfa_offset 4
 1158              		.cfi_offset 7, -4
 1159 0002 83B0     		sub	sp, sp, #12
 1160              	.LCFI49:
 1161              		.cfi_def_cfa_offset 16
 1162 0004 00AF     		add	r7, sp, #0
 1163              	.LCFI50:
 1164              		.cfi_def_cfa_register 7
 1165 0006 7860     		str	r0, [r7, #4]
 765:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 766:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 767:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 768:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Send break characters */
 769:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->CR1 |= USART_CR1_SBK;
 1166              		.loc 1 769 0
 1167 0008 7B68     		ldr	r3, [r7, #4]
 1168 000a 9B89     		ldrh	r3, [r3, #12]	@ movhi
 1169 000c 9BB2     		uxth	r3, r3
 1170 000e 43F00103 		orr	r3, r3, #1
 1171 0012 9AB2     		uxth	r2, r3
 1172 0014 7B68     		ldr	r3, [r7, #4]
 1173 0016 9A81     		strh	r2, [r3, #12]	@ movhi
 770:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 1174              		.loc 1 770 0
 1175 0018 0C37     		adds	r7, r7, #12
 1176 001a BD46     		mov	sp, r7
 1177              		@ sp needed
 1178 001c 5DF8047B 		ldr	r7, [sp], #4
 1179 0020 7047     		bx	lr
 1180              		.cfi_endproc
 1181              	.LFE126:
 1183 0022 00BF     		.section	.text.USART_HalfDuplexCmd,"ax",%progbits
 1184              		.align	2
 1185              		.global	USART_HalfDuplexCmd
 1186              		.thumb
 1187              		.thumb_func
 1189              	USART_HalfDuplexCmd:
 1190              	.LFB127:
 771:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 772:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 773:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @}
 774:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 775:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 776:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /** @defgroup USART_Group5 Halfduplex mode function
 777:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *  @brief   Half-duplex mode function 
 778:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *
 779:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @verbatim   
 780:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================
 781:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                          Half-duplex mode function
 782:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================  
 783:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 784:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   This subsection provides a set of functions allowing to manage the USART 
 785:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   Half-duplex communication.
 786:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 787:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   The USART can be configured to follow a single-wire half-duplex protocol where 
 788:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   the TX and RX lines are internally connected.
 789:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 790:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART Half duplex communication is possible through the following procedure:
 791:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      1. Program the Baud rate, Word length, Stop bits, Parity, Mode transmitter 
 792:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         or Mode receiver and hardware flow control values using the USART_Init()
 793:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         function.
 794:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      2. Configures the USART address using the USART_SetAddress() function.
 795:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      3. Enable the USART using the USART_Cmd() function.
 796:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      4. Enable the half duplex mode using USART_HalfDuplexCmd() function.
 797:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 798:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 799:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @note The RX pin is no longer used
 800:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @note In Half-duplex mode the following bits must be kept cleared:
 801:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - LINEN and CLKEN bits in the USART_CR2 register.
 802:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - SCEN and IREN bits in the USART_CR3 register.
 803:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 804:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @endverbatim
 805:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @{
 806:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 807:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 808:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 809:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Enables or disables the USART's Half Duplex communication.
 810:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 811:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 812:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  NewState: new state of the USART Communication.
 813:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
 814:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 815:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 816:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_HalfDuplexCmd(USART_TypeDef* USARTx, FunctionalState NewState)
 817:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 1191              		.loc 1 817 0
 1192              		.cfi_startproc
 1193              		@ args = 0, pretend = 0, frame = 8
 1194              		@ frame_needed = 1, uses_anonymous_args = 0
 1195              		@ link register save eliminated.
 1196 0000 80B4     		push	{r7}
 1197              	.LCFI51:
 1198              		.cfi_def_cfa_offset 4
 1199              		.cfi_offset 7, -4
 1200 0002 83B0     		sub	sp, sp, #12
 1201              	.LCFI52:
 1202              		.cfi_def_cfa_offset 16
 1203 0004 00AF     		add	r7, sp, #0
 1204              	.LCFI53:
 1205              		.cfi_def_cfa_register 7
 1206 0006 7860     		str	r0, [r7, #4]
 1207 0008 0B46     		mov	r3, r1
 1208 000a FB70     		strb	r3, [r7, #3]
 818:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 819:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 820:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 821:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 822:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 1209              		.loc 1 822 0
 1210 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1211 000e 002B     		cmp	r3, #0
 1212 0010 08D0     		beq	.L47
 823:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 824:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
 825:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR3 |= USART_CR3_HDSEL;
 1213              		.loc 1 825 0
 1214 0012 7B68     		ldr	r3, [r7, #4]
 1215 0014 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 1216 0016 9BB2     		uxth	r3, r3
 1217 0018 43F00803 		orr	r3, r3, #8
 1218 001c 9AB2     		uxth	r2, r3
 1219 001e 7B68     		ldr	r3, [r7, #4]
 1220 0020 9A82     		strh	r2, [r3, #20]	@ movhi
 1221 0022 07E0     		b	.L46
 1222              	.L47:
 826:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 827:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
 828:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 829:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
 830:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_HDSEL);
 1223              		.loc 1 830 0
 1224 0024 7B68     		ldr	r3, [r7, #4]
 1225 0026 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 1226 0028 9BB2     		uxth	r3, r3
 1227 002a 23F00803 		bic	r3, r3, #8
 1228 002e 9AB2     		uxth	r2, r3
 1229 0030 7B68     		ldr	r3, [r7, #4]
 1230 0032 9A82     		strh	r2, [r3, #20]	@ movhi
 1231              	.L46:
 831:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 832:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 1232              		.loc 1 832 0
 1233 0034 0C37     		adds	r7, r7, #12
 1234 0036 BD46     		mov	sp, r7
 1235              		@ sp needed
 1236 0038 5DF8047B 		ldr	r7, [sp], #4
 1237 003c 7047     		bx	lr
 1238              		.cfi_endproc
 1239              	.LFE127:
 1241 003e 00BF     		.section	.text.USART_SetGuardTime,"ax",%progbits
 1242              		.align	2
 1243              		.global	USART_SetGuardTime
 1244              		.thumb
 1245              		.thumb_func
 1247              	USART_SetGuardTime:
 1248              	.LFB128:
 833:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 834:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 835:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @}
 836:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 837:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 838:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 839:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /** @defgroup USART_Group6 Smartcard mode functions
 840:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *  @brief   Smartcard mode functions 
 841:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *
 842:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @verbatim   
 843:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================
 844:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                                Smartcard mode functions
 845:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================  
 846:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 847:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   This subsection provides a set of functions allowing to manage the USART 
 848:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   Smartcard communication.
 849:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 850:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   The Smartcard interface is designed to support asynchronous protocol Smartcards as
 851:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   defined in the ISO 7816-3 standard.
 852:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 853:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   The USART can provide a clock to the smartcard through the SCLK output.
 854:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   In smartcard mode, SCLK is not associated to the communication but is simply derived 
 855:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   from the internal peripheral input clock through a 5-bit prescaler.
 856:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 857:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   Smartcard communication is possible through the following procedure:
 858:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      1. Configures the Smartcard Prescaler using the USART_SetPrescaler() function.
 859:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      2. Configures the Smartcard Guard Time using the USART_SetGuardTime() function.
 860:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      3. Program the USART clock using the USART_ClockInit() function as following:
 861:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - USART Clock enabled
 862:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - USART CPOL Low
 863:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - USART CPHA on first edge
 864:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - USART Last Bit Clock Enabled
 865:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      4. Program the Smartcard interface using the USART_Init() function as following:
 866:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - Word Length = 9 Bits
 867:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - 1.5 Stop Bit
 868:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - Even parity
 869:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - BaudRate = 12096 baud
 870:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - Hardware flow control disabled (RTS and CTS signals)
 871:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - Tx and Rx enabled
 872:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      5. Optionally you can enable the parity error interrupt using the USART_ITConfig()
 873:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         function
 874:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      6. Enable the USART using the USART_Cmd() function.
 875:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      7. Enable the Smartcard NACK using the USART_SmartCardNACKCmd() function.
 876:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      8. Enable the Smartcard interface using the USART_SmartCardCmd() function.
 877:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 878:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   Please refer to the ISO 7816-3 specification for more details.
 879:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 880:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 881:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @note It is also possible to choose 0.5 stop bit for receiving but it is recommended 
 882:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       to use 1.5 stop bits for both transmitting and receiving to avoid switching 
 883:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       between the two configurations.
 884:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @note In smartcard mode, the following bits must be kept cleared:
 885:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - LINEN bit in the USART_CR2 register.
 886:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - HDSEL and IREN bits in the USART_CR3 register.
 887:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @note Smartcard mode is available on USART peripherals only (not available on UART4 
 888:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       and UART5 peripherals).
 889:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 890:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @endverbatim
 891:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @{
 892:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 893:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 894:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 895:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Sets the specified USART guard time.
 896:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3 or 6 to select the USART or 
 897:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 898:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_GuardTime: specifies the guard time.   
 899:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 900:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 901:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_SetGuardTime(USART_TypeDef* USARTx, uint8_t USART_GuardTime)
 902:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {    
 1249              		.loc 1 902 0
 1250              		.cfi_startproc
 1251              		@ args = 0, pretend = 0, frame = 8
 1252              		@ frame_needed = 1, uses_anonymous_args = 0
 1253              		@ link register save eliminated.
 1254 0000 80B4     		push	{r7}
 1255              	.LCFI54:
 1256              		.cfi_def_cfa_offset 4
 1257              		.cfi_offset 7, -4
 1258 0002 83B0     		sub	sp, sp, #12
 1259              	.LCFI55:
 1260              		.cfi_def_cfa_offset 16
 1261 0004 00AF     		add	r7, sp, #0
 1262              	.LCFI56:
 1263              		.cfi_def_cfa_register 7
 1264 0006 7860     		str	r0, [r7, #4]
 1265 0008 0B46     		mov	r3, r1
 1266 000a FB70     		strb	r3, [r7, #3]
 903:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 904:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_1236_PERIPH(USARTx));
 905:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 906:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Clear the USART Guard time */
 907:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->GTPR &= USART_GTPR_PSC;
 1267              		.loc 1 907 0
 1268 000c 7B68     		ldr	r3, [r7, #4]
 1269 000e 1B8B     		ldrh	r3, [r3, #24]	@ movhi
 1270 0010 9BB2     		uxth	r3, r3
 1271 0012 DBB2     		uxtb	r3, r3
 1272 0014 9AB2     		uxth	r2, r3
 1273 0016 7B68     		ldr	r3, [r7, #4]
 1274 0018 1A83     		strh	r2, [r3, #24]	@ movhi
 908:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Set the USART guard time */
 909:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
 1275              		.loc 1 909 0
 1276 001a 7B68     		ldr	r3, [r7, #4]
 1277 001c 1B8B     		ldrh	r3, [r3, #24]	@ movhi
 1278 001e 9AB2     		uxth	r2, r3
 1279 0020 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1280 0022 9BB2     		uxth	r3, r3
 1281 0024 1B02     		lsls	r3, r3, #8
 1282 0026 9BB2     		uxth	r3, r3
 1283 0028 1343     		orrs	r3, r3, r2
 1284 002a 9AB2     		uxth	r2, r3
 1285 002c 7B68     		ldr	r3, [r7, #4]
 1286 002e 1A83     		strh	r2, [r3, #24]	@ movhi
 910:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 1287              		.loc 1 910 0
 1288 0030 0C37     		adds	r7, r7, #12
 1289 0032 BD46     		mov	sp, r7
 1290              		@ sp needed
 1291 0034 5DF8047B 		ldr	r7, [sp], #4
 1292 0038 7047     		bx	lr
 1293              		.cfi_endproc
 1294              	.LFE128:
 1296 003a 00BF     		.section	.text.USART_SmartCardCmd,"ax",%progbits
 1297              		.align	2
 1298              		.global	USART_SmartCardCmd
 1299              		.thumb
 1300              		.thumb_func
 1302              	USART_SmartCardCmd:
 1303              	.LFB129:
 911:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 912:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 913:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Enables or disables the USART's Smart Card mode.
 914:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3 or 6 to select the USART or 
 915:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 916:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  NewState: new state of the Smart Card mode.
 917:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.      
 918:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 919:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 920:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
 921:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 1304              		.loc 1 921 0
 1305              		.cfi_startproc
 1306              		@ args = 0, pretend = 0, frame = 8
 1307              		@ frame_needed = 1, uses_anonymous_args = 0
 1308              		@ link register save eliminated.
 1309 0000 80B4     		push	{r7}
 1310              	.LCFI57:
 1311              		.cfi_def_cfa_offset 4
 1312              		.cfi_offset 7, -4
 1313 0002 83B0     		sub	sp, sp, #12
 1314              	.LCFI58:
 1315              		.cfi_def_cfa_offset 16
 1316 0004 00AF     		add	r7, sp, #0
 1317              	.LCFI59:
 1318              		.cfi_def_cfa_register 7
 1319 0006 7860     		str	r0, [r7, #4]
 1320 0008 0B46     		mov	r3, r1
 1321 000a FB70     		strb	r3, [r7, #3]
 922:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 923:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_1236_PERIPH(USARTx));
 924:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 925:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 1322              		.loc 1 925 0
 1323 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1324 000e 002B     		cmp	r3, #0
 1325 0010 08D0     		beq	.L51
 926:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 927:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Enable the SC mode by setting the SCEN bit in the CR3 register */
 928:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR3 |= USART_CR3_SCEN;
 1326              		.loc 1 928 0
 1327 0012 7B68     		ldr	r3, [r7, #4]
 1328 0014 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 1329 0016 9BB2     		uxth	r3, r3
 1330 0018 43F02003 		orr	r3, r3, #32
 1331 001c 9AB2     		uxth	r2, r3
 1332 001e 7B68     		ldr	r3, [r7, #4]
 1333 0020 9A82     		strh	r2, [r3, #20]	@ movhi
 1334 0022 07E0     		b	.L50
 1335              	.L51:
 929:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 930:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
 931:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 932:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
 933:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_SCEN);
 1336              		.loc 1 933 0
 1337 0024 7B68     		ldr	r3, [r7, #4]
 1338 0026 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 1339 0028 9BB2     		uxth	r3, r3
 1340 002a 23F02003 		bic	r3, r3, #32
 1341 002e 9AB2     		uxth	r2, r3
 1342 0030 7B68     		ldr	r3, [r7, #4]
 1343 0032 9A82     		strh	r2, [r3, #20]	@ movhi
 1344              	.L50:
 934:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 935:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 1345              		.loc 1 935 0
 1346 0034 0C37     		adds	r7, r7, #12
 1347 0036 BD46     		mov	sp, r7
 1348              		@ sp needed
 1349 0038 5DF8047B 		ldr	r7, [sp], #4
 1350 003c 7047     		bx	lr
 1351              		.cfi_endproc
 1352              	.LFE129:
 1354 003e 00BF     		.section	.text.USART_SmartCardNACKCmd,"ax",%progbits
 1355              		.align	2
 1356              		.global	USART_SmartCardNACKCmd
 1357              		.thumb
 1358              		.thumb_func
 1360              	USART_SmartCardNACKCmd:
 1361              	.LFB130:
 936:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 937:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 938:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Enables or disables NACK transmission.
 939:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3 or 6 to select the USART or 
 940:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 941:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  NewState: new state of the NACK transmission.
 942:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.  
 943:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 944:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 945:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
 946:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 1362              		.loc 1 946 0
 1363              		.cfi_startproc
 1364              		@ args = 0, pretend = 0, frame = 8
 1365              		@ frame_needed = 1, uses_anonymous_args = 0
 1366              		@ link register save eliminated.
 1367 0000 80B4     		push	{r7}
 1368              	.LCFI60:
 1369              		.cfi_def_cfa_offset 4
 1370              		.cfi_offset 7, -4
 1371 0002 83B0     		sub	sp, sp, #12
 1372              	.LCFI61:
 1373              		.cfi_def_cfa_offset 16
 1374 0004 00AF     		add	r7, sp, #0
 1375              	.LCFI62:
 1376              		.cfi_def_cfa_register 7
 1377 0006 7860     		str	r0, [r7, #4]
 1378 0008 0B46     		mov	r3, r1
 1379 000a FB70     		strb	r3, [r7, #3]
 947:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 948:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_1236_PERIPH(USARTx)); 
 949:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 950:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 1380              		.loc 1 950 0
 1381 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1382 000e 002B     		cmp	r3, #0
 1383 0010 08D0     		beq	.L54
 951:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 952:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
 953:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR3 |= USART_CR3_NACK;
 1384              		.loc 1 953 0
 1385 0012 7B68     		ldr	r3, [r7, #4]
 1386 0014 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 1387 0016 9BB2     		uxth	r3, r3
 1388 0018 43F01003 		orr	r3, r3, #16
 1389 001c 9AB2     		uxth	r2, r3
 1390 001e 7B68     		ldr	r3, [r7, #4]
 1391 0020 9A82     		strh	r2, [r3, #20]	@ movhi
 1392 0022 07E0     		b	.L53
 1393              	.L54:
 954:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 955:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
 956:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 957:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
 958:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_NACK);
 1394              		.loc 1 958 0
 1395 0024 7B68     		ldr	r3, [r7, #4]
 1396 0026 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 1397 0028 9BB2     		uxth	r3, r3
 1398 002a 23F01003 		bic	r3, r3, #16
 1399 002e 9AB2     		uxth	r2, r3
 1400 0030 7B68     		ldr	r3, [r7, #4]
 1401 0032 9A82     		strh	r2, [r3, #20]	@ movhi
 1402              	.L53:
 959:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 960:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 1403              		.loc 1 960 0
 1404 0034 0C37     		adds	r7, r7, #12
 1405 0036 BD46     		mov	sp, r7
 1406              		@ sp needed
 1407 0038 5DF8047B 		ldr	r7, [sp], #4
 1408 003c 7047     		bx	lr
 1409              		.cfi_endproc
 1410              	.LFE130:
 1412 003e 00BF     		.section	.text.USART_IrDAConfig,"ax",%progbits
 1413              		.align	2
 1414              		.global	USART_IrDAConfig
 1415              		.thumb
 1416              		.thumb_func
 1418              	USART_IrDAConfig:
 1419              	.LFB131:
 961:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 962:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 963:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @}
 964:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 965:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 966:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /** @defgroup USART_Group7 IrDA mode functions
 967:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *  @brief   IrDA mode functions 
 968:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *
 969:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @verbatim   
 970:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================
 971:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                                 IrDA mode functions
 972:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================  
 973:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 974:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   This subsection provides a set of functions allowing to manage the USART 
 975:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   IrDA communication.
 976:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 977:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   IrDA is a half duplex communication protocol. If the Transmitter is busy, any data
 978:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   on the IrDA receive line will be ignored by the IrDA decoder and if the Receiver 
 979:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   is busy, data on the TX from the USART to IrDA will not be encoded by IrDA.
 980:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   While receiving data, transmission should be avoided as the data to be transmitted
 981:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   could be corrupted.
 982:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 983:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   IrDA communication is possible through the following procedure:
 984:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      1. Program the Baud rate, Word length = 8 bits, Stop bits, Parity, Transmitter/Receiver 
 985:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         modes and hardware flow control values using the USART_Init() function.
 986:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      2. Enable the USART using the USART_Cmd() function.
 987:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      3. Configures the IrDA pulse width by configuring the prescaler using  
 988:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         the USART_SetPrescaler() function.
 989:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      4. Configures the IrDA  USART_IrDAMode_LowPower or USART_IrDAMode_Normal mode
 990:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         using the USART_IrDAConfig() function.
 991:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      5. Enable the IrDA using the USART_IrDACmd() function.
 992:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 993:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @note A pulse of width less than two and greater than one PSC period(s) may or may
 994:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       not be rejected.
 995:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @note The receiver set up time should be managed by software. The IrDA physical layer
 996:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       specification specifies a minimum of 10 ms delay between transmission and 
 997:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       reception (IrDA is a half duplex protocol).
 998:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @note In IrDA mode, the following bits must be kept cleared:
 999:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - LINEN, STOP and CLKEN bits in the USART_CR2 register.
1000:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - SCEN and HDSEL bits in the USART_CR3 register.
1001:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1002:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @endverbatim
1003:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @{
1004:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
1005:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1006:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
1007:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Configures the USART's IrDA interface.
1008:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
1009:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
1010:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_IrDAMode: specifies the IrDA mode.
1011:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be one of the following values:
1012:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IrDAMode_LowPower
1013:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IrDAMode_Normal
1014:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
1015:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
1016:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_IrDAConfig(USART_TypeDef* USARTx, uint16_t USART_IrDAMode)
1017:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 1420              		.loc 1 1017 0
 1421              		.cfi_startproc
 1422              		@ args = 0, pretend = 0, frame = 8
 1423              		@ frame_needed = 1, uses_anonymous_args = 0
 1424              		@ link register save eliminated.
 1425 0000 80B4     		push	{r7}
 1426              	.LCFI63:
 1427              		.cfi_def_cfa_offset 4
 1428              		.cfi_offset 7, -4
 1429 0002 83B0     		sub	sp, sp, #12
 1430              	.LCFI64:
 1431              		.cfi_def_cfa_offset 16
 1432 0004 00AF     		add	r7, sp, #0
 1433              	.LCFI65:
 1434              		.cfi_def_cfa_register 7
 1435 0006 7860     		str	r0, [r7, #4]
 1436 0008 0B46     		mov	r3, r1
 1437 000a 7B80     		strh	r3, [r7, #2]	@ movhi
1018:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
1019:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
1020:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));
1021:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     
1022:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IRLP);
 1438              		.loc 1 1022 0
 1439 000c 7B68     		ldr	r3, [r7, #4]
 1440 000e 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 1441 0010 9BB2     		uxth	r3, r3
 1442 0012 23F00403 		bic	r3, r3, #4
 1443 0016 9AB2     		uxth	r2, r3
 1444 0018 7B68     		ldr	r3, [r7, #4]
 1445 001a 9A82     		strh	r2, [r3, #20]	@ movhi
1023:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->CR3 |= USART_IrDAMode;
 1446              		.loc 1 1023 0
 1447 001c 7B68     		ldr	r3, [r7, #4]
 1448 001e 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 1449 0020 9AB2     		uxth	r2, r3
 1450 0022 7B88     		ldrh	r3, [r7, #2]	@ movhi
 1451 0024 1343     		orrs	r3, r3, r2
 1452 0026 9AB2     		uxth	r2, r3
 1453 0028 7B68     		ldr	r3, [r7, #4]
 1454 002a 9A82     		strh	r2, [r3, #20]	@ movhi
1024:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 1455              		.loc 1 1024 0
 1456 002c 0C37     		adds	r7, r7, #12
 1457 002e BD46     		mov	sp, r7
 1458              		@ sp needed
 1459 0030 5DF8047B 		ldr	r7, [sp], #4
 1460 0034 7047     		bx	lr
 1461              		.cfi_endproc
 1462              	.LFE131:
 1464 0036 00BF     		.section	.text.USART_IrDACmd,"ax",%progbits
 1465              		.align	2
 1466              		.global	USART_IrDACmd
 1467              		.thumb
 1468              		.thumb_func
 1470              	USART_IrDACmd:
 1471              	.LFB132:
1025:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1026:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
1027:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Enables or disables the USART's IrDA interface.
1028:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
1029:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
1030:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  NewState: new state of the IrDA mode.
1031:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
1032:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
1033:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
1034:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_IrDACmd(USART_TypeDef* USARTx, FunctionalState NewState)
1035:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 1472              		.loc 1 1035 0
 1473              		.cfi_startproc
 1474              		@ args = 0, pretend = 0, frame = 8
 1475              		@ frame_needed = 1, uses_anonymous_args = 0
 1476              		@ link register save eliminated.
 1477 0000 80B4     		push	{r7}
 1478              	.LCFI66:
 1479              		.cfi_def_cfa_offset 4
 1480              		.cfi_offset 7, -4
 1481 0002 83B0     		sub	sp, sp, #12
 1482              	.LCFI67:
 1483              		.cfi_def_cfa_offset 16
 1484 0004 00AF     		add	r7, sp, #0
 1485              	.LCFI68:
 1486              		.cfi_def_cfa_register 7
 1487 0006 7860     		str	r0, [r7, #4]
 1488 0008 0B46     		mov	r3, r1
 1489 000a FB70     		strb	r3, [r7, #3]
1036:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
1037:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
1038:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1039:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     
1040:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 1490              		.loc 1 1040 0
 1491 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1492 000e 002B     		cmp	r3, #0
 1493 0010 08D0     		beq	.L58
1041:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1042:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
1043:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR3 |= USART_CR3_IREN;
 1494              		.loc 1 1043 0
 1495 0012 7B68     		ldr	r3, [r7, #4]
 1496 0014 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 1497 0016 9BB2     		uxth	r3, r3
 1498 0018 43F00203 		orr	r3, r3, #2
 1499 001c 9AB2     		uxth	r2, r3
 1500 001e 7B68     		ldr	r3, [r7, #4]
 1501 0020 9A82     		strh	r2, [r3, #20]	@ movhi
 1502 0022 07E0     		b	.L57
 1503              	.L58:
1044:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1045:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
1046:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1047:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
1048:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IREN);
 1504              		.loc 1 1048 0
 1505 0024 7B68     		ldr	r3, [r7, #4]
 1506 0026 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 1507 0028 9BB2     		uxth	r3, r3
 1508 002a 23F00203 		bic	r3, r3, #2
 1509 002e 9AB2     		uxth	r2, r3
 1510 0030 7B68     		ldr	r3, [r7, #4]
 1511 0032 9A82     		strh	r2, [r3, #20]	@ movhi
 1512              	.L57:
1049:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1050:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 1513              		.loc 1 1050 0
 1514 0034 0C37     		adds	r7, r7, #12
 1515 0036 BD46     		mov	sp, r7
 1516              		@ sp needed
 1517 0038 5DF8047B 		ldr	r7, [sp], #4
 1518 003c 7047     		bx	lr
 1519              		.cfi_endproc
 1520              	.LFE132:
 1522 003e 00BF     		.section	.text.USART_DMACmd,"ax",%progbits
 1523              		.align	2
 1524              		.global	USART_DMACmd
 1525              		.thumb
 1526              		.thumb_func
 1528              	USART_DMACmd:
 1529              	.LFB133:
1051:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1052:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
1053:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @}
1054:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
1055:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1056:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /** @defgroup USART_Group8 DMA transfers management functions
1057:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *  @brief   DMA transfers management functions
1058:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *
1059:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @verbatim   
1060:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================
1061:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                       DMA transfers management functions
1062:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================  
1063:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1064:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @endverbatim
1065:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @{
1066:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
1067:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
1068:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
1069:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Enables or disables the USART's DMA interface.
1070:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
1071:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
1072:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_DMAReq: specifies the DMA request.
1073:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be any combination of the following values:
1074:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_DMAReq_Tx: USART DMA transmit request
1075:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_DMAReq_Rx: USART DMA receive request
1076:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  NewState: new state of the DMA Request sources.
1077:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.   
1078:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
1079:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
1080:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState)
1081:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 1530              		.loc 1 1081 0
 1531              		.cfi_startproc
 1532              		@ args = 0, pretend = 0, frame = 8
 1533              		@ frame_needed = 1, uses_anonymous_args = 0
 1534              		@ link register save eliminated.
 1535 0000 80B4     		push	{r7}
 1536              	.LCFI69:
 1537              		.cfi_def_cfa_offset 4
 1538              		.cfi_offset 7, -4
 1539 0002 83B0     		sub	sp, sp, #12
 1540              	.LCFI70:
 1541              		.cfi_def_cfa_offset 16
 1542 0004 00AF     		add	r7, sp, #0
 1543              	.LCFI71:
 1544              		.cfi_def_cfa_register 7
 1545 0006 7860     		str	r0, [r7, #4]
 1546 0008 1346     		mov	r3, r2
 1547 000a 0A46     		mov	r2, r1	@ movhi
 1548 000c 7A80     		strh	r2, [r7, #2]	@ movhi
 1549 000e 7B70     		strb	r3, [r7, #1]
1082:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
1083:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
1084:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_DMAREQ(USART_DMAReq));  
1085:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState)); 
1086:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1087:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 1550              		.loc 1 1087 0
 1551 0010 7B78     		ldrb	r3, [r7, #1]	@ zero_extendqisi2
 1552 0012 002B     		cmp	r3, #0
 1553 0014 08D0     		beq	.L61
1088:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1089:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Enable the DMA transfer for selected requests by setting the DMAT and/or
1090:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****        DMAR bits in the USART CR3 register */
1091:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR3 |= USART_DMAReq;
 1554              		.loc 1 1091 0
 1555 0016 7B68     		ldr	r3, [r7, #4]
 1556 0018 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 1557 001a 9AB2     		uxth	r2, r3
 1558 001c 7B88     		ldrh	r3, [r7, #2]	@ movhi
 1559 001e 1343     		orrs	r3, r3, r2
 1560 0020 9AB2     		uxth	r2, r3
 1561 0022 7B68     		ldr	r3, [r7, #4]
 1562 0024 9A82     		strh	r2, [r3, #20]	@ movhi
 1563 0026 09E0     		b	.L60
 1564              	.L61:
1092:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1093:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
1094:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1095:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
1096:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****        DMAR bits in the USART CR3 register */
1097:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR3 &= (uint16_t)~USART_DMAReq;
 1565              		.loc 1 1097 0
 1566 0028 7B68     		ldr	r3, [r7, #4]
 1567 002a 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 1568 002c 9AB2     		uxth	r2, r3
 1569 002e 7B88     		ldrh	r3, [r7, #2]	@ movhi
 1570 0030 DB43     		mvns	r3, r3
 1571 0032 9BB2     		uxth	r3, r3
 1572 0034 1340     		ands	r3, r3, r2
 1573 0036 9AB2     		uxth	r2, r3
 1574 0038 7B68     		ldr	r3, [r7, #4]
 1575 003a 9A82     		strh	r2, [r3, #20]	@ movhi
 1576              	.L60:
1098:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1099:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 1577              		.loc 1 1099 0
 1578 003c 0C37     		adds	r7, r7, #12
 1579 003e BD46     		mov	sp, r7
 1580              		@ sp needed
 1581 0040 5DF8047B 		ldr	r7, [sp], #4
 1582 0044 7047     		bx	lr
 1583              		.cfi_endproc
 1584              	.LFE133:
 1586 0046 00BF     		.section	.text.USART_ITConfig,"ax",%progbits
 1587              		.align	2
 1588              		.global	USART_ITConfig
 1589              		.thumb
 1590              		.thumb_func
 1592              	USART_ITConfig:
 1593              	.LFB134:
1100:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1101:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
1102:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @}
1103:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
1104:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
1105:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /** @defgroup USART_Group9 Interrupts and flags management functions
1106:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *  @brief   Interrupts and flags management functions 
1107:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *
1108:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @verbatim   
1109:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================
1110:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                    Interrupts and flags management functions
1111:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================  
1112:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1113:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   This subsection provides a set of functions allowing to configure the USART 
1114:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   Interrupts sources, DMA channels requests and check or clear the flags or 
1115:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   pending bits status.
1116:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   The user should identify which mode will be used in his application to manage 
1117:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   the communication: Polling mode, Interrupt mode or DMA mode. 
1118:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     
1119:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   Polling Mode
1120:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   =============
1121:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   In Polling Mode, the SPI communication can be managed by 10 flags:
1122:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      1. USART_FLAG_TXE : to indicate the status of the transmit buffer register
1123:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      2. USART_FLAG_RXNE : to indicate the status of the receive buffer register
1124:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      3. USART_FLAG_TC : to indicate the status of the transmit operation
1125:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      4. USART_FLAG_IDLE : to indicate the status of the Idle Line             
1126:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      5. USART_FLAG_CTS : to indicate the status of the nCTS input
1127:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      6. USART_FLAG_LBD : to indicate the status of the LIN break detection
1128:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      7. USART_FLAG_NE : to indicate if a noise error occur
1129:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      8. USART_FLAG_FE : to indicate if a frame error occur
1130:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      9. USART_FLAG_PE : to indicate if a parity error occur
1131:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      10. USART_FLAG_ORE : to indicate if an Overrun error occur
1132:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1133:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   In this Mode it is advised to use the following functions:
1134:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       - FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG);
1135:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       - void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG);
1136:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1137:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   Interrupt Mode
1138:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   ===============
1139:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   In Interrupt Mode, the USART communication can be managed by 8 interrupt sources
1140:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   and 10 pending bits: 
1141:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1142:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   Pending Bits:
1143:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   ------------- 
1144:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      1. USART_IT_TXE : to indicate the status of the transmit buffer register
1145:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      2. USART_IT_RXNE : to indicate the status of the receive buffer register
1146:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      3. USART_IT_TC : to indicate the status of the transmit operation
1147:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      4. USART_IT_IDLE : to indicate the status of the Idle Line             
1148:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      5. USART_IT_CTS : to indicate the status of the nCTS input
1149:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      6. USART_IT_LBD : to indicate the status of the LIN break detection
1150:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      7. USART_IT_NE : to indicate if a noise error occur
1151:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      8. USART_IT_FE : to indicate if a frame error occur
1152:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      9. USART_IT_PE : to indicate if a parity error occur
1153:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      10. USART_IT_ORE : to indicate if an Overrun error occur
1154:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1155:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   Interrupt Source:
1156:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   -----------------
1157:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      1. USART_IT_TXE : specifies the interrupt source for the Tx buffer empty 
1158:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                        interrupt. 
1159:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      2. USART_IT_RXNE : specifies the interrupt source for the Rx buffer not 
1160:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                         empty interrupt.
1161:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      3. USART_IT_TC : specifies the interrupt source for the Transmit complete 
1162:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                        interrupt. 
1163:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      4. USART_IT_IDLE : specifies the interrupt source for the Idle Line interrupt.             
1164:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      5. USART_IT_CTS : specifies the interrupt source for the CTS interrupt. 
1165:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      6. USART_IT_LBD : specifies the interrupt source for the LIN break detection
1166:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                        interrupt. 
1167:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      7. USART_IT_PE : specifies the interrupt source for the parity error interrupt. 
1168:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      8. USART_IT_ERR :  specifies the interrupt source for the errors interrupt.
1169:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1170:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @note Some parameters are coded in order to use them as interrupt source or as pending bits.
1171:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1172:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   In this Mode it is advised to use the following functions:
1173:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      - void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState);
1174:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      - ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT);
1175:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      - void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT);
1176:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1177:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   DMA Mode
1178:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   ========
1179:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   In DMA Mode, the USART communication can be managed by 2 DMA Channel requests:
1180:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      1. USART_DMAReq_Tx: specifies the Tx buffer DMA transfer request
1181:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      2. USART_DMAReq_Rx: specifies the Rx buffer DMA transfer request
1182:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1183:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   In this Mode it is advised to use the following function:
1184:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      - void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState);
1185:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1186:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @endverbatim
1187:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @{
1188:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
1189:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1190:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
1191:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Enables or disables the specified USART interrupts.
1192:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
1193:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
1194:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_IT: specifies the USART interrupt sources to be enabled or disabled.
1195:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be one of the following values:
1196:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_CTS:  CTS change interrupt
1197:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_LBD:  LIN Break detection interrupt
1198:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_TXE:  Transmit Data Register empty interrupt
1199:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_TC:   Transmission complete interrupt
1200:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_RXNE: Receive Data register not empty interrupt
1201:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_IDLE: Idle line detection interrupt
1202:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_PE:   Parity Error interrupt
1203:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_ERR:  Error interrupt(Frame error, noise error, overrun error)
1204:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  NewState: new state of the specified USARTx interrupts.
1205:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
1206:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
1207:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
1208:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
1209:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 1594              		.loc 1 1209 0
 1595              		.cfi_startproc
 1596              		@ args = 0, pretend = 0, frame = 24
 1597              		@ frame_needed = 1, uses_anonymous_args = 0
 1598              		@ link register save eliminated.
 1599 0000 80B4     		push	{r7}
 1600              	.LCFI72:
 1601              		.cfi_def_cfa_offset 4
 1602              		.cfi_offset 7, -4
 1603 0002 87B0     		sub	sp, sp, #28
 1604              	.LCFI73:
 1605              		.cfi_def_cfa_offset 32
 1606 0004 00AF     		add	r7, sp, #0
 1607              	.LCFI74:
 1608              		.cfi_def_cfa_register 7
 1609 0006 7860     		str	r0, [r7, #4]
 1610 0008 1346     		mov	r3, r2
 1611 000a 0A46     		mov	r2, r1	@ movhi
 1612 000c 7A80     		strh	r2, [r7, #2]	@ movhi
 1613 000e 7B70     		strb	r3, [r7, #1]
1210:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 1614              		.loc 1 1210 0
 1615 0010 0023     		movs	r3, #0
 1616 0012 3B61     		str	r3, [r7, #16]
 1617 0014 0023     		movs	r3, #0
 1618 0016 FB60     		str	r3, [r7, #12]
 1619 0018 0023     		movs	r3, #0
 1620 001a BB60     		str	r3, [r7, #8]
1211:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   uint32_t usartxbase = 0x00;
 1621              		.loc 1 1211 0
 1622 001c 0023     		movs	r3, #0
 1623 001e 7B61     		str	r3, [r7, #20]
1212:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
1213:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
1214:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_CONFIG_IT(USART_IT));
1215:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1216:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1217:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* The CTS interrupt is not available for UART4 and UART5 */
1218:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (USART_IT == USART_IT_CTS)
1219:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1220:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     assert_param(IS_USART_1236_PERIPH(USARTx));
1221:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   } 
1222:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     
1223:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   usartxbase = (uint32_t)USARTx;
 1624              		.loc 1 1223 0
 1625 0020 7B68     		ldr	r3, [r7, #4]
 1626 0022 7B61     		str	r3, [r7, #20]
1224:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1225:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Get the USART register index */
1226:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   usartreg = (((uint8_t)USART_IT) >> 0x05);
 1627              		.loc 1 1226 0
 1628 0024 7B88     		ldrh	r3, [r7, #2]	@ movhi
 1629 0026 DBB2     		uxtb	r3, r3
 1630 0028 5B09     		lsrs	r3, r3, #5
 1631 002a DBB2     		uxtb	r3, r3
 1632 002c 3B61     		str	r3, [r7, #16]
1227:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1228:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Get the interrupt position */
1229:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   itpos = USART_IT & IT_MASK;
 1633              		.loc 1 1229 0
 1634 002e 7B88     		ldrh	r3, [r7, #2]
 1635 0030 03F01F03 		and	r3, r3, #31
 1636 0034 FB60     		str	r3, [r7, #12]
1230:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   itmask = (((uint32_t)0x01) << itpos);
 1637              		.loc 1 1230 0
 1638 0036 FB68     		ldr	r3, [r7, #12]
 1639 0038 0122     		movs	r2, #1
 1640 003a 02FA03F3 		lsl	r3, r2, r3
 1641 003e BB60     		str	r3, [r7, #8]
1231:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     
1232:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (usartreg == 0x01) /* The IT is in CR1 register */
 1642              		.loc 1 1232 0
 1643 0040 3B69     		ldr	r3, [r7, #16]
 1644 0042 012B     		cmp	r3, #1
 1645 0044 03D1     		bne	.L64
1233:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1234:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     usartxbase += 0x0C;
 1646              		.loc 1 1234 0
 1647 0046 7B69     		ldr	r3, [r7, #20]
 1648 0048 0C33     		adds	r3, r3, #12
 1649 004a 7B61     		str	r3, [r7, #20]
 1650 004c 09E0     		b	.L65
 1651              	.L64:
1235:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1236:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else if (usartreg == 0x02) /* The IT is in CR2 register */
 1652              		.loc 1 1236 0
 1653 004e 3B69     		ldr	r3, [r7, #16]
 1654 0050 022B     		cmp	r3, #2
 1655 0052 03D1     		bne	.L66
1237:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1238:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     usartxbase += 0x10;
 1656              		.loc 1 1238 0
 1657 0054 7B69     		ldr	r3, [r7, #20]
 1658 0056 1033     		adds	r3, r3, #16
 1659 0058 7B61     		str	r3, [r7, #20]
 1660 005a 02E0     		b	.L65
 1661              	.L66:
1239:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1240:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else /* The IT is in CR3 register */
1241:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1242:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     usartxbase += 0x14; 
 1662              		.loc 1 1242 0
 1663 005c 7B69     		ldr	r3, [r7, #20]
 1664 005e 1433     		adds	r3, r3, #20
 1665 0060 7B61     		str	r3, [r7, #20]
 1666              	.L65:
1243:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1244:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 1667              		.loc 1 1244 0
 1668 0062 7B78     		ldrb	r3, [r7, #1]	@ zero_extendqisi2
 1669 0064 002B     		cmp	r3, #0
 1670 0066 06D0     		beq	.L67
1245:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1246:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     *(__IO uint32_t*)usartxbase  |= itmask;
 1671              		.loc 1 1246 0
 1672 0068 7B69     		ldr	r3, [r7, #20]
 1673 006a 7A69     		ldr	r2, [r7, #20]
 1674 006c 1168     		ldr	r1, [r2]
 1675 006e BA68     		ldr	r2, [r7, #8]
 1676 0070 0A43     		orrs	r2, r2, r1
 1677 0072 1A60     		str	r2, [r3]
 1678 0074 06E0     		b	.L63
 1679              	.L67:
1247:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1248:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
1249:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1250:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     *(__IO uint32_t*)usartxbase &= ~itmask;
 1680              		.loc 1 1250 0
 1681 0076 7B69     		ldr	r3, [r7, #20]
 1682 0078 7A69     		ldr	r2, [r7, #20]
 1683 007a 1168     		ldr	r1, [r2]
 1684 007c BA68     		ldr	r2, [r7, #8]
 1685 007e D243     		mvns	r2, r2
 1686 0080 0A40     		ands	r2, r2, r1
 1687 0082 1A60     		str	r2, [r3]
 1688              	.L63:
1251:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1252:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 1689              		.loc 1 1252 0
 1690 0084 1C37     		adds	r7, r7, #28
 1691 0086 BD46     		mov	sp, r7
 1692              		@ sp needed
 1693 0088 5DF8047B 		ldr	r7, [sp], #4
 1694 008c 7047     		bx	lr
 1695              		.cfi_endproc
 1696              	.LFE134:
 1698 008e 00BF     		.section	.text.USART_GetFlagStatus,"ax",%progbits
 1699              		.align	2
 1700              		.global	USART_GetFlagStatus
 1701              		.thumb
 1702              		.thumb_func
 1704              	USART_GetFlagStatus:
 1705              	.LFB135:
1253:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1254:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
1255:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Checks whether the specified USART flag is set or not.
1256:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
1257:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
1258:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_FLAG: specifies the flag to check.
1259:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be one of the following values:
1260:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_CTS:  CTS Change flag (not available for UART4 and UART5)
1261:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_LBD:  LIN Break detection flag
1262:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_TXE:  Transmit data register empty flag
1263:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_TC:   Transmission Complete flag
1264:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_RXNE: Receive data register not empty flag
1265:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_IDLE: Idle Line detection flag
1266:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_ORE:  OverRun Error flag
1267:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_NE:   Noise Error flag
1268:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_FE:   Framing Error flag
1269:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_PE:   Parity Error flag
1270:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval The new state of USART_FLAG (SET or RESET).
1271:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
1272:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
1273:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 1706              		.loc 1 1273 0
 1707              		.cfi_startproc
 1708              		@ args = 0, pretend = 0, frame = 16
 1709              		@ frame_needed = 1, uses_anonymous_args = 0
 1710              		@ link register save eliminated.
 1711 0000 80B4     		push	{r7}
 1712              	.LCFI75:
 1713              		.cfi_def_cfa_offset 4
 1714              		.cfi_offset 7, -4
 1715 0002 85B0     		sub	sp, sp, #20
 1716              	.LCFI76:
 1717              		.cfi_def_cfa_offset 24
 1718 0004 00AF     		add	r7, sp, #0
 1719              	.LCFI77:
 1720              		.cfi_def_cfa_register 7
 1721 0006 7860     		str	r0, [r7, #4]
 1722 0008 0B46     		mov	r3, r1
 1723 000a 7B80     		strh	r3, [r7, #2]	@ movhi
1274:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   FlagStatus bitstatus = RESET;
 1724              		.loc 1 1274 0
 1725 000c 0023     		movs	r3, #0
 1726 000e FB73     		strb	r3, [r7, #15]
1275:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
1276:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
1277:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_FLAG(USART_FLAG));
1278:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1279:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* The CTS flag is not available for UART4 and UART5 */
1280:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (USART_FLAG == USART_FLAG_CTS)
1281:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1282:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     assert_param(IS_USART_1236_PERIPH(USARTx));
1283:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   } 
1284:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     
1285:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 1727              		.loc 1 1285 0
 1728 0010 7B68     		ldr	r3, [r7, #4]
 1729 0012 1B88     		ldrh	r3, [r3]	@ movhi
 1730 0014 9AB2     		uxth	r2, r3
 1731 0016 7B88     		ldrh	r3, [r7, #2]	@ movhi
 1732 0018 1340     		ands	r3, r3, r2
 1733 001a 9BB2     		uxth	r3, r3
 1734 001c 002B     		cmp	r3, #0
 1735 001e 02D0     		beq	.L70
1286:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1287:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     bitstatus = SET;
 1736              		.loc 1 1287 0
 1737 0020 0123     		movs	r3, #1
 1738 0022 FB73     		strb	r3, [r7, #15]
 1739 0024 01E0     		b	.L71
 1740              	.L70:
1288:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1289:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
1290:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1291:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     bitstatus = RESET;
 1741              		.loc 1 1291 0
 1742 0026 0023     		movs	r3, #0
 1743 0028 FB73     		strb	r3, [r7, #15]
 1744              	.L71:
1292:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1293:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   return bitstatus;
 1745              		.loc 1 1293 0
 1746 002a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
1294:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 1747              		.loc 1 1294 0
 1748 002c 1846     		mov	r0, r3
 1749 002e 1437     		adds	r7, r7, #20
 1750 0030 BD46     		mov	sp, r7
 1751              		@ sp needed
 1752 0032 5DF8047B 		ldr	r7, [sp], #4
 1753 0036 7047     		bx	lr
 1754              		.cfi_endproc
 1755              	.LFE135:
 1757              		.section	.text.USART_ClearFlag,"ax",%progbits
 1758              		.align	2
 1759              		.global	USART_ClearFlag
 1760              		.thumb
 1761              		.thumb_func
 1763              	USART_ClearFlag:
 1764              	.LFB136:
1295:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1296:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
1297:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Clears the USARTx's pending flags.
1298:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
1299:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
1300:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_FLAG: specifies the flag to clear.
1301:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be any combination of the following values:
1302:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_CTS:  CTS Change flag (not available for UART4 and UART5).
1303:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_LBD:  LIN Break detection flag.
1304:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_TC:   Transmission Complete flag.
1305:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_RXNE: Receive data register not empty flag.
1306:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *   
1307:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @note   PE (Parity error), FE (Framing error), NE (Noise error), ORE (OverRun 
1308:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          error) and IDLE (Idle line detected) flags are cleared by software 
1309:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          sequence: a read operation to USART_SR register (USART_GetFlagStatus()) 
1310:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          followed by a read operation to USART_DR register (USART_ReceiveData()).
1311:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @note   RXNE flag can be also cleared by a read to the USART_DR register 
1312:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          (USART_ReceiveData()).
1313:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @note   TC flag can be also cleared by software sequence: a read operation to 
1314:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          USART_SR register (USART_GetFlagStatus()) followed by a write operation
1315:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          to USART_DR register (USART_SendData()).
1316:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @note   TXE flag is cleared only by a write to the USART_DR register 
1317:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          (USART_SendData()).
1318:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *   
1319:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
1320:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
1321:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG)
1322:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 1765              		.loc 1 1322 0
 1766              		.cfi_startproc
 1767              		@ args = 0, pretend = 0, frame = 8
 1768              		@ frame_needed = 1, uses_anonymous_args = 0
 1769              		@ link register save eliminated.
 1770 0000 80B4     		push	{r7}
 1771              	.LCFI78:
 1772              		.cfi_def_cfa_offset 4
 1773              		.cfi_offset 7, -4
 1774 0002 83B0     		sub	sp, sp, #12
 1775              	.LCFI79:
 1776              		.cfi_def_cfa_offset 16
 1777 0004 00AF     		add	r7, sp, #0
 1778              	.LCFI80:
 1779              		.cfi_def_cfa_register 7
 1780 0006 7860     		str	r0, [r7, #4]
 1781 0008 0B46     		mov	r3, r1
 1782 000a 7B80     		strh	r3, [r7, #2]	@ movhi
1323:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
1324:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
1325:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_CLEAR_FLAG(USART_FLAG));
1326:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1327:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* The CTS flag is not available for UART4 and UART5 */
1328:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
1329:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1330:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     assert_param(IS_USART_1236_PERIPH(USARTx));
1331:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   } 
1332:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****        
1333:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->SR = (uint16_t)~USART_FLAG;
 1783              		.loc 1 1333 0
 1784 000c 7B88     		ldrh	r3, [r7, #2]	@ movhi
 1785 000e DB43     		mvns	r3, r3
 1786 0010 9AB2     		uxth	r2, r3
 1787 0012 7B68     		ldr	r3, [r7, #4]
 1788 0014 1A80     		strh	r2, [r3]	@ movhi
1334:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 1789              		.loc 1 1334 0
 1790 0016 0C37     		adds	r7, r7, #12
 1791 0018 BD46     		mov	sp, r7
 1792              		@ sp needed
 1793 001a 5DF8047B 		ldr	r7, [sp], #4
 1794 001e 7047     		bx	lr
 1795              		.cfi_endproc
 1796              	.LFE136:
 1798              		.section	.text.USART_GetITStatus,"ax",%progbits
 1799              		.align	2
 1800              		.global	USART_GetITStatus
 1801              		.thumb
 1802              		.thumb_func
 1804              	USART_GetITStatus:
 1805              	.LFB137:
1335:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1336:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
1337:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Checks whether the specified USART interrupt has occurred or not.
1338:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
1339:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
1340:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_IT: specifies the USART interrupt source to check.
1341:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be one of the following values:
1342:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_CTS:  CTS change interrupt (not available for UART4 and UART5)
1343:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_LBD:  LIN Break detection interrupt
1344:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_TXE:  Transmit Data Register empty interrupt
1345:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_TC:   Transmission complete interrupt
1346:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_RXNE: Receive Data register not empty interrupt
1347:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_IDLE: Idle line detection interrupt
1348:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_ORE:  OverRun Error interrupt
1349:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_NE:   Noise Error interrupt
1350:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_FE:   Framing Error interrupt
1351:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_PE:   Parity Error interrupt
1352:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval The new state of USART_IT (SET or RESET).
1353:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
1354:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
1355:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 1806              		.loc 1 1355 0
 1807              		.cfi_startproc
 1808              		@ args = 0, pretend = 0, frame = 24
 1809              		@ frame_needed = 1, uses_anonymous_args = 0
 1810              		@ link register save eliminated.
 1811 0000 80B4     		push	{r7}
 1812              	.LCFI81:
 1813              		.cfi_def_cfa_offset 4
 1814              		.cfi_offset 7, -4
 1815 0002 87B0     		sub	sp, sp, #28
 1816              	.LCFI82:
 1817              		.cfi_def_cfa_offset 32
 1818 0004 00AF     		add	r7, sp, #0
 1819              	.LCFI83:
 1820              		.cfi_def_cfa_register 7
 1821 0006 7860     		str	r0, [r7, #4]
 1822 0008 0B46     		mov	r3, r1
 1823 000a 7B80     		strh	r3, [r7, #2]	@ movhi
1356:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 1824              		.loc 1 1356 0
 1825 000c 0023     		movs	r3, #0
 1826 000e FB60     		str	r3, [r7, #12]
 1827 0010 0023     		movs	r3, #0
 1828 0012 7B61     		str	r3, [r7, #20]
 1829 0014 0023     		movs	r3, #0
 1830 0016 BB60     		str	r3, [r7, #8]
1357:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   ITStatus bitstatus = RESET;
 1831              		.loc 1 1357 0
 1832 0018 0023     		movs	r3, #0
 1833 001a FB74     		strb	r3, [r7, #19]
1358:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
1359:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
1360:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_GET_IT(USART_IT)); 
1361:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1362:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* The CTS interrupt is not available for UART4 and UART5 */ 
1363:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (USART_IT == USART_IT_CTS)
1364:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1365:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     assert_param(IS_USART_1236_PERIPH(USARTx));
1366:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   } 
1367:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     
1368:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Get the USART register index */
1369:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   usartreg = (((uint8_t)USART_IT) >> 0x05);
 1834              		.loc 1 1369 0
 1835 001c 7B88     		ldrh	r3, [r7, #2]	@ movhi
 1836 001e DBB2     		uxtb	r3, r3
 1837 0020 5B09     		lsrs	r3, r3, #5
 1838 0022 DBB2     		uxtb	r3, r3
 1839 0024 BB60     		str	r3, [r7, #8]
1370:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Get the interrupt position */
1371:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   itmask = USART_IT & IT_MASK;
 1840              		.loc 1 1371 0
 1841 0026 7B88     		ldrh	r3, [r7, #2]
 1842 0028 03F01F03 		and	r3, r3, #31
 1843 002c 7B61     		str	r3, [r7, #20]
1372:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   itmask = (uint32_t)0x01 << itmask;
 1844              		.loc 1 1372 0
 1845 002e 7B69     		ldr	r3, [r7, #20]
 1846 0030 0122     		movs	r2, #1
 1847 0032 02FA03F3 		lsl	r3, r2, r3
 1848 0036 7B61     		str	r3, [r7, #20]
1373:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
1374:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (usartreg == 0x01) /* The IT  is in CR1 register */
 1849              		.loc 1 1374 0
 1850 0038 BB68     		ldr	r3, [r7, #8]
 1851 003a 012B     		cmp	r3, #1
 1852 003c 06D1     		bne	.L75
1375:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1376:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     itmask &= USARTx->CR1;
 1853              		.loc 1 1376 0
 1854 003e 7B68     		ldr	r3, [r7, #4]
 1855 0040 9B89     		ldrh	r3, [r3, #12]	@ movhi
 1856 0042 9BB2     		uxth	r3, r3
 1857 0044 7A69     		ldr	r2, [r7, #20]
 1858 0046 1340     		ands	r3, r3, r2
 1859 0048 7B61     		str	r3, [r7, #20]
 1860 004a 0FE0     		b	.L76
 1861              	.L75:
1377:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1378:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else if (usartreg == 0x02) /* The IT  is in CR2 register */
 1862              		.loc 1 1378 0
 1863 004c BB68     		ldr	r3, [r7, #8]
 1864 004e 022B     		cmp	r3, #2
 1865 0050 06D1     		bne	.L77
1379:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1380:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     itmask &= USARTx->CR2;
 1866              		.loc 1 1380 0
 1867 0052 7B68     		ldr	r3, [r7, #4]
 1868 0054 1B8A     		ldrh	r3, [r3, #16]	@ movhi
 1869 0056 9BB2     		uxth	r3, r3
 1870 0058 7A69     		ldr	r2, [r7, #20]
 1871 005a 1340     		ands	r3, r3, r2
 1872 005c 7B61     		str	r3, [r7, #20]
 1873 005e 05E0     		b	.L76
 1874              	.L77:
1381:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1382:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else /* The IT  is in CR3 register */
1383:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1384:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     itmask &= USARTx->CR3;
 1875              		.loc 1 1384 0
 1876 0060 7B68     		ldr	r3, [r7, #4]
 1877 0062 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 1878 0064 9BB2     		uxth	r3, r3
 1879 0066 7A69     		ldr	r2, [r7, #20]
 1880 0068 1340     		ands	r3, r3, r2
 1881 006a 7B61     		str	r3, [r7, #20]
 1882              	.L76:
1385:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1386:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
1387:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   bitpos = USART_IT >> 0x08;
 1883              		.loc 1 1387 0
 1884 006c 7B88     		ldrh	r3, [r7, #2]
 1885 006e 1B0A     		lsrs	r3, r3, #8
 1886 0070 9BB2     		uxth	r3, r3
 1887 0072 FB60     		str	r3, [r7, #12]
1388:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   bitpos = (uint32_t)0x01 << bitpos;
 1888              		.loc 1 1388 0
 1889 0074 FB68     		ldr	r3, [r7, #12]
 1890 0076 0122     		movs	r2, #1
 1891 0078 02FA03F3 		lsl	r3, r2, r3
 1892 007c FB60     		str	r3, [r7, #12]
1389:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   bitpos &= USARTx->SR;
 1893              		.loc 1 1389 0
 1894 007e 7B68     		ldr	r3, [r7, #4]
 1895 0080 1B88     		ldrh	r3, [r3]	@ movhi
 1896 0082 9BB2     		uxth	r3, r3
 1897 0084 FA68     		ldr	r2, [r7, #12]
 1898 0086 1340     		ands	r3, r3, r2
 1899 0088 FB60     		str	r3, [r7, #12]
1390:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 1900              		.loc 1 1390 0
 1901 008a 7B69     		ldr	r3, [r7, #20]
 1902 008c 002B     		cmp	r3, #0
 1903 008e 05D0     		beq	.L78
 1904              		.loc 1 1390 0 is_stmt 0 discriminator 1
 1905 0090 FB68     		ldr	r3, [r7, #12]
 1906 0092 002B     		cmp	r3, #0
 1907 0094 02D0     		beq	.L78
1391:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1392:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     bitstatus = SET;
 1908              		.loc 1 1392 0 is_stmt 1
 1909 0096 0123     		movs	r3, #1
 1910 0098 FB74     		strb	r3, [r7, #19]
 1911 009a 01E0     		b	.L79
 1912              	.L78:
1393:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1394:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
1395:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1396:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     bitstatus = RESET;
 1913              		.loc 1 1396 0
 1914 009c 0023     		movs	r3, #0
 1915 009e FB74     		strb	r3, [r7, #19]
 1916              	.L79:
1397:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1398:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
1399:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   return bitstatus;  
 1917              		.loc 1 1399 0
 1918 00a0 FB7C     		ldrb	r3, [r7, #19]	@ zero_extendqisi2
1400:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 1919              		.loc 1 1400 0
 1920 00a2 1846     		mov	r0, r3
 1921 00a4 1C37     		adds	r7, r7, #28
 1922 00a6 BD46     		mov	sp, r7
 1923              		@ sp needed
 1924 00a8 5DF8047B 		ldr	r7, [sp], #4
 1925 00ac 7047     		bx	lr
 1926              		.cfi_endproc
 1927              	.LFE137:
 1929 00ae 00BF     		.section	.text.USART_ClearITPendingBit,"ax",%progbits
 1930              		.align	2
 1931              		.global	USART_ClearITPendingBit
 1932              		.thumb
 1933              		.thumb_func
 1935              	USART_ClearITPendingBit:
 1936              	.LFB138:
1401:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1402:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
1403:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Clears the USARTx's interrupt pending bits.
1404:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
1405:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
1406:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_IT: specifies the interrupt pending bit to clear.
1407:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be one of the following values:
1408:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_CTS:  CTS change interrupt (not available for UART4 and UART5)
1409:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_LBD:  LIN Break detection interrupt
1410:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_TC:   Transmission complete interrupt. 
1411:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_RXNE: Receive Data register not empty interrupt.
1412:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *
1413:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @note   PE (Parity error), FE (Framing error), NE (Noise error), ORE (OverRun 
1414:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          error) and IDLE (Idle line detected) pending bits are cleared by 
1415:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          software sequence: a read operation to USART_SR register 
1416:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          (USART_GetITStatus()) followed by a read operation to USART_DR register 
1417:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          (USART_ReceiveData()).
1418:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @note   RXNE pending bit can be also cleared by a read to the USART_DR register 
1419:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          (USART_ReceiveData()).
1420:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @note   TC pending bit can be also cleared by software sequence: a read 
1421:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          operation to USART_SR register (USART_GetITStatus()) followed by a write 
1422:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          operation to USART_DR register (USART_SendData()).
1423:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @note   TXE pending bit is cleared only by a write to the USART_DR register 
1424:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          (USART_SendData()).
1425:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *  
1426:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
1427:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
1428:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
1429:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 1937              		.loc 1 1429 0
 1938              		.cfi_startproc
 1939              		@ args = 0, pretend = 0, frame = 16
 1940              		@ frame_needed = 1, uses_anonymous_args = 0
 1941              		@ link register save eliminated.
 1942 0000 80B4     		push	{r7}
 1943              	.LCFI84:
 1944              		.cfi_def_cfa_offset 4
 1945              		.cfi_offset 7, -4
 1946 0002 85B0     		sub	sp, sp, #20
 1947              	.LCFI85:
 1948              		.cfi_def_cfa_offset 24
 1949 0004 00AF     		add	r7, sp, #0
 1950              	.LCFI86:
 1951              		.cfi_def_cfa_register 7
 1952 0006 7860     		str	r0, [r7, #4]
 1953 0008 0B46     		mov	r3, r1
 1954 000a 7B80     		strh	r3, [r7, #2]	@ movhi
1430:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   uint16_t bitpos = 0x00, itmask = 0x00;
 1955              		.loc 1 1430 0
 1956 000c 0023     		movs	r3, #0
 1957 000e FB81     		strh	r3, [r7, #14]	@ movhi
 1958 0010 0023     		movs	r3, #0
 1959 0012 BB81     		strh	r3, [r7, #12]	@ movhi
1431:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
1432:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
1433:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_CLEAR_IT(USART_IT)); 
1434:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1435:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* The CTS interrupt is not available for UART4 and UART5 */
1436:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (USART_IT == USART_IT_CTS)
1437:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1438:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     assert_param(IS_USART_1236_PERIPH(USARTx));
1439:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   } 
1440:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     
1441:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   bitpos = USART_IT >> 0x08;
 1960              		.loc 1 1441 0
 1961 0014 7B88     		ldrh	r3, [r7, #2]
 1962 0016 1B0A     		lsrs	r3, r3, #8
 1963 0018 FB81     		strh	r3, [r7, #14]	@ movhi
1442:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
 1964              		.loc 1 1442 0
 1965 001a FB89     		ldrh	r3, [r7, #14]
 1966 001c 0122     		movs	r2, #1
 1967 001e 02FA03F3 		lsl	r3, r2, r3
 1968 0022 BB81     		strh	r3, [r7, #12]	@ movhi
1443:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->SR = (uint16_t)~itmask;
 1969              		.loc 1 1443 0
 1970 0024 BB89     		ldrh	r3, [r7, #12]	@ movhi
 1971 0026 DB43     		mvns	r3, r3
 1972 0028 9AB2     		uxth	r2, r3
 1973 002a 7B68     		ldr	r3, [r7, #4]
 1974 002c 1A80     		strh	r2, [r3]	@ movhi
1444:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 1975              		.loc 1 1444 0
 1976 002e 1437     		adds	r7, r7, #20
 1977 0030 BD46     		mov	sp, r7
 1978              		@ sp needed
 1979 0032 5DF8047B 		ldr	r7, [sp], #4
 1980 0036 7047     		bx	lr
 1981              		.cfi_endproc
 1982              	.LFE138:
 1984              		.text
 1985              	.Letext0:
 1986              		.file 2 "/home/shihyu/data/STM32F4/gcc-arm-none-eabi-4_8-2013q4/arm-none-eabi/include/stdint.h"
 1987              		.file 3 "libs/Device/STM32F4xx/Include/stm32f4xx.h"
 1988              		.file 4 "libs/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_rcc.h"
 1989              		.file 5 "libs/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_usart.h"
 1990              		.file 6 "libs/CMSIS/Include/core_cm4.h"
DEFINED SYMBOLS
                            *ABS*:00000000 stm32f4xx_usart.c
     /tmp/cciD684a.s:20     .text.USART_DeInit:00000000 $t
     /tmp/cciD684a.s:25     .text.USART_DeInit:00000000 USART_DeInit
     /tmp/cciD684a.s:141    .text.USART_DeInit:000000b8 $d
     /tmp/cciD684a.s:151    .text.USART_Init:00000000 $t
     /tmp/cciD684a.s:156    .text.USART_Init:00000000 USART_Init
     /tmp/cciD684a.s:377    .text.USART_Init:00000168 $d
     /tmp/cciD684a.s:384    .text.USART_StructInit:00000000 $t
     /tmp/cciD684a.s:389    .text.USART_StructInit:00000000 USART_StructInit
     /tmp/cciD684a.s:441    .text.USART_ClockInit:00000000 $t
     /tmp/cciD684a.s:446    .text.USART_ClockInit:00000000 USART_ClockInit
     /tmp/cciD684a.s:512    .text.USART_ClockStructInit:00000000 $t
     /tmp/cciD684a.s:517    .text.USART_ClockStructInit:00000000 USART_ClockStructInit
     /tmp/cciD684a.s:561    .text.USART_Cmd:00000000 $t
     /tmp/cciD684a.s:566    .text.USART_Cmd:00000000 USART_Cmd
     /tmp/cciD684a.s:619    .text.USART_SetPrescaler:00000000 $t
     /tmp/cciD684a.s:624    .text.USART_SetPrescaler:00000000 USART_SetPrescaler
     /tmp/cciD684a.s:672    .text.USART_OverSampling8Cmd:00000000 $t
     /tmp/cciD684a.s:677    .text.USART_OverSampling8Cmd:00000000 USART_OverSampling8Cmd
     /tmp/cciD684a.s:731    .text.USART_OneBitMethodCmd:00000000 $t
     /tmp/cciD684a.s:736    .text.USART_OneBitMethodCmd:00000000 USART_OneBitMethodCmd
     /tmp/cciD684a.s:789    .text.USART_SendData:00000000 $t
     /tmp/cciD684a.s:794    .text.USART_SendData:00000000 USART_SendData
     /tmp/cciD684a.s:830    .text.USART_ReceiveData:00000000 $t
     /tmp/cciD684a.s:835    .text.USART_ReceiveData:00000000 USART_ReceiveData
     /tmp/cciD684a.s:870    .text.USART_SetAddress:00000000 $t
     /tmp/cciD684a.s:875    .text.USART_SetAddress:00000000 USART_SetAddress
     /tmp/cciD684a.s:923    .text.USART_ReceiverWakeUpCmd:00000000 $t
     /tmp/cciD684a.s:928    .text.USART_ReceiverWakeUpCmd:00000000 USART_ReceiverWakeUpCmd
     /tmp/cciD684a.s:981    .text.USART_WakeUpConfig:00000000 $t
     /tmp/cciD684a.s:986    .text.USART_WakeUpConfig:00000000 USART_WakeUpConfig
     /tmp/cciD684a.s:1033   .text.USART_LINBreakDetectLengthConfig:00000000 $t
     /tmp/cciD684a.s:1038   .text.USART_LINBreakDetectLengthConfig:00000000 USART_LINBreakDetectLengthConfig
     /tmp/cciD684a.s:1085   .text.USART_LINCmd:00000000 $t
     /tmp/cciD684a.s:1090   .text.USART_LINCmd:00000000 USART_LINCmd
     /tmp/cciD684a.s:1143   .text.USART_SendBreak:00000000 $t
     /tmp/cciD684a.s:1148   .text.USART_SendBreak:00000000 USART_SendBreak
     /tmp/cciD684a.s:1184   .text.USART_HalfDuplexCmd:00000000 $t
     /tmp/cciD684a.s:1189   .text.USART_HalfDuplexCmd:00000000 USART_HalfDuplexCmd
     /tmp/cciD684a.s:1242   .text.USART_SetGuardTime:00000000 $t
     /tmp/cciD684a.s:1247   .text.USART_SetGuardTime:00000000 USART_SetGuardTime
     /tmp/cciD684a.s:1297   .text.USART_SmartCardCmd:00000000 $t
     /tmp/cciD684a.s:1302   .text.USART_SmartCardCmd:00000000 USART_SmartCardCmd
     /tmp/cciD684a.s:1355   .text.USART_SmartCardNACKCmd:00000000 $t
     /tmp/cciD684a.s:1360   .text.USART_SmartCardNACKCmd:00000000 USART_SmartCardNACKCmd
     /tmp/cciD684a.s:1413   .text.USART_IrDAConfig:00000000 $t
     /tmp/cciD684a.s:1418   .text.USART_IrDAConfig:00000000 USART_IrDAConfig
     /tmp/cciD684a.s:1465   .text.USART_IrDACmd:00000000 $t
     /tmp/cciD684a.s:1470   .text.USART_IrDACmd:00000000 USART_IrDACmd
     /tmp/cciD684a.s:1523   .text.USART_DMACmd:00000000 $t
     /tmp/cciD684a.s:1528   .text.USART_DMACmd:00000000 USART_DMACmd
     /tmp/cciD684a.s:1587   .text.USART_ITConfig:00000000 $t
     /tmp/cciD684a.s:1592   .text.USART_ITConfig:00000000 USART_ITConfig
     /tmp/cciD684a.s:1699   .text.USART_GetFlagStatus:00000000 $t
     /tmp/cciD684a.s:1704   .text.USART_GetFlagStatus:00000000 USART_GetFlagStatus
     /tmp/cciD684a.s:1758   .text.USART_ClearFlag:00000000 $t
     /tmp/cciD684a.s:1763   .text.USART_ClearFlag:00000000 USART_ClearFlag
     /tmp/cciD684a.s:1799   .text.USART_GetITStatus:00000000 $t
     /tmp/cciD684a.s:1804   .text.USART_GetITStatus:00000000 USART_GetITStatus
     /tmp/cciD684a.s:1930   .text.USART_ClearITPendingBit:00000000 $t
     /tmp/cciD684a.s:1935   .text.USART_ClearITPendingBit:00000000 USART_ClearITPendingBit
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
RCC_APB2PeriphResetCmd
RCC_APB1PeriphResetCmd
RCC_GetClocksFreq
