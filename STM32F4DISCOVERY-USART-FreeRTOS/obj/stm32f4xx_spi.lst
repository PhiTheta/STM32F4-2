   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"stm32f4xx_spi.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.SPI_I2S_DeInit,"ax",%progbits
  20              		.align	2
  21              		.global	SPI_I2S_DeInit
  22              		.thumb
  23              		.thumb_func
  25              	SPI_I2S_DeInit:
  26              	.LFB110:
  27              		.file 1 "libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c"
   1:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
   2:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   ******************************************************************************
   3:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @file    stm32f4xx_spi.c
   4:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @author  MCD Application Team
   5:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @version V1.0.0RC1
   6:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @date    25-August-2011
   7:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief   This file provides firmware functions to manage the following 
   8:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          functionalities of the Serial peripheral interface (SPI):           
   9:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *           - Initialization and Configuration
  10:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *           - Data transfers functions
  11:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *           - Hardware CRC Calculation
  12:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *           - DMA transfers management
  13:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *           - Interrupts and flags management 
  14:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *           
  15:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *  @verbatim
  16:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          
  17:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *                    
  18:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          ===================================================================
  19:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *                                 How to use this driver
  20:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          ===================================================================        
  21:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *    
  22:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          1. Enable peripheral clock using the following functions 
  23:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *             RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI1, ENABLE) for SPI1
  24:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *             RCC_APB1PeriphClockCmd(RCC_APB1Periph_SPI2, ENABLE) for SPI2
  25:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *             RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE) for SPI3.
  26:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *
  27:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          2. Enable SCK, MOSI, MISO and NSS GPIO clocks using RCC_AHB1PeriphClockCmd()
  28:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *             function.
  29:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *             In I2S mode, if an external clock source is used then the I2S CKIN pin GPIO
  30:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *             clock should also be enabled.
  31:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *
  32:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          3. Peripherals alternate function: 
  33:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *                 - Connect the pin to the desired peripherals' Alternate 
  34:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *                   Function (AF) using GPIO_PinAFConfig() function
  35:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *                 - Configure the desired pin in alternate function by:
  36:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *                   GPIO_InitStruct->GPIO_Mode = GPIO_Mode_AF
  37:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *                 - Select the type, pull-up/pull-down and output speed via 
  38:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *                   GPIO_PuPd, GPIO_OType and GPIO_Speed members
  39:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *                 - Call GPIO_Init() function
  40:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *              In I2S mode, if an external clock source is used then the I2S CKIN pin
  41:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *              should be also configured in Alternate function Push-pull pull-up mode. 
  42:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *        
  43:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          4. Program the Polarity, Phase, First Data, Baud Rate Prescaler, Slave 
  44:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *             Management, Peripheral Mode and CRC Polynomial values using the SPI_Init()
  45:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *             function.
  46:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *             In I2S mode, program the Mode, Standard, Data Format, MCLK Output, Audio 
  47:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *             frequency and Polarity using I2S_Init() function.
  48:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *             For I2S mode, make sure that either:
  49:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *              - I2S PLL is configured using the functions RCC_I2SCLKConfig(RCC_I2S2CLKSource_PLL
  50:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *                RCC_PLLI2SCmd(ENABLE) and RCC_GetFlagStatus(RCC_FLAG_PLLI2SRDY).
  51:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *              or 
  52:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *              - External clock source is configured using the function 
  53:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *                RCC_I2SCLKConfig(RCC_I2S2CLKSource_Ext) and after setting correctly the define c
  54:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *                I2S_EXTERNAL_CLOCK_VAL in the stm32f4xx_conf.h file. 
  55:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *
  56:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          5. Enable the NVIC and the corresponding interrupt using the function 
  57:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *             SPI_ITConfig() if you need to use interrupt mode. 
  58:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *
  59:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          6. When using the DMA mode 
  60:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *                   - Configure the DMA using DMA_Init() function
  61:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *                   - Active the needed channel Request using SPI_I2S_DMACmd() function
  62:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * 
  63:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          7. Enable the SPI using the SPI_Cmd() function or enable the I2S using
  64:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *             I2S_Cmd().
  65:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * 
  66:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          8. Enable the DMA using the DMA_Cmd() function when using DMA mode. 
  67:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *
  68:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          9. Optionally, you can enable/configure the following parameters without
  69:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *             re-initialization (i.e there is no need to call again SPI_Init() function):
  70:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *              - When bidirectional mode (SPI_Direction_1Line_Rx or SPI_Direction_1Line_Tx)
  71:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *                is programmed as Data direction parameter using the SPI_Init() function
  72:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *                it can be possible to switch between SPI_Direction_Tx or SPI_Direction_Rx
  73:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *                using the SPI_BiDirectionalLineConfig() function.
  74:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *              - When SPI_NSS_Soft is selected as Slave Select Management parameter 
  75:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *                using the SPI_Init() function it can be possible to manage the 
  76:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *                NSS internal signal using the SPI_NSSInternalSoftwareConfig() function.
  77:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *              - Reconfigure the data size using the SPI_DataSizeConfig() function  
  78:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *              - Enable or disable the SS output using the SPI_SSOutputCmd() function  
  79:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          
  80:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          10. To use the CRC Hardware calculation feature refer to the Peripheral 
  81:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *              CRC hardware Calculation subsection.
  82:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *   
  83:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *
  84:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          It is possible to use SPI in I2S full duplex mode, in this case, each SPI 
  85:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          peripheral is able to manage sending and receiving data simultaneously
  86:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          using two data lines. Each SPI peripheral has an extended block called I2Sxext
  87:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          (ie. I2S2ext for SPI2 and I2S3ext for SPI3).
  88:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          The extension block is not a full SPI IP, it is used only as I2S slave to
  89:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          implement full duplex mode. The extension block uses the same clock sources
  90:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          as its master.          
  91:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          To configure I2S full duplex you have to:
  92:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            
  93:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          1. Configure SPIx in I2S mode (I2S_Init() function) as described above. 
  94:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *           
  95:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          2. Call the I2S_FullDuplexConfig() function using the same strucutre passed to  
  96:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *             I2S_Init() function.
  97:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            
  98:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          3. Call I2S_Cmd() for SPIx then for its extended block.
  99:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          
 100:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          4. To configure interrupts or DMA requests and to get/clear flag status, 
 101:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *             use I2Sxext instance for the extension block.
 102:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *             
 103:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          Functions that can be called with I2Sxext instances are:
 104:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          I2S_Cmd(), I2S_FullDuplexConfig(), SPI_I2S_ReceiveData(), SPI_I2S_SendData(), 
 105:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          SPI_I2S_DMACmd(), SPI_I2S_ITConfig(), SPI_I2S_GetFlagStatus(), SPI_I2S_ClearFlag(),
 106:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          SPI_I2S_GetITStatus() and SPI_I2S_ClearITPendingBit().
 107:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *                 
 108:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          Example: To use SPI3 in Full duplex mode (SPI3 is Master Tx, I2S3ext is Slave Rx):
 109:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            
 110:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          RCC_APB1PeriphClockCmd(RCC_APB1Periph_SPI3, ENABLE);   
 111:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          I2S_StructInit(&I2SInitStruct);
 112:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          I2SInitStruct.Mode = I2S_Mode_MasterTx;     
 113:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          I2S_Init(SPI3, &I2SInitStruct);
 114:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          I2S_FullDuplexConfig(SPI3ext, &I2SInitStruct)
 115:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          I2S_Cmd(SPI3, ENABLE);
 116:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          I2S_Cmd(SPI3ext, ENABLE);
 117:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          ...
 118:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          while (SPI_I2S_GetFlagStatus(SPI2, SPI_FLAG_TXE) == RESET)
 119:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          {}
 120:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          SPI_I2S_SendData(SPI3, txdata[i]);
 121:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          ...  
 122:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          while (SPI_I2S_GetFlagStatus(I2S3ext, SPI_FLAG_RXNE) == RESET)
 123:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          {}
 124:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          rxdata[i] = SPI_I2S_ReceiveData(I2S3ext);
 125:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          ...          
 126:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *              
 127:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *       
 128:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *    
 129:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @note    This driver supports only the I2S clock scheme available in Silicon
 130:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          RevisionB and RevisionY.
 131:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *     
 132:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @note    In I2S mode: if an external clock is used as source clock for the I2S,  
 133:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          then the define I2S_EXTERNAL_CLOCK_VAL in file stm32f4xx_conf.h should 
 134:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          be enabled and set to the value of the source clock frequency (in Hz).
 135:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * 
 136:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @note    In SPI mode: To use the SPI TI mode, call the function SPI_TIModeCmd() 
 137:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          just after calling the function SPI_Init().
 138:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *
 139:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *  @endverbatim  
 140:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *                                  
 141:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   ******************************************************************************
 142:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @attention
 143:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *
 144:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
 145:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
 146:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
 147:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
 148:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
 149:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
 150:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *
 151:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
 152:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   ******************************************************************************  
 153:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */ 
 154:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 155:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /* Includes ------------------------------------------------------------------*/
 156:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** #include "stm32f4xx_spi.h"
 157:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** #include "stm32f4xx_rcc.h"
 158:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 159:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
 160:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @{
 161:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 162:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 163:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /** @defgroup SPI 
 164:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief SPI driver modules
 165:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @{
 166:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */ 
 167:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 168:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /* Private typedef -----------------------------------------------------------*/
 169:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /* Private define ------------------------------------------------------------*/
 170:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 171:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /* SPI registers Masks */
 172:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** #define CR1_CLEAR_MASK            ((uint16_t)0x3040)
 173:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** #define I2SCFGR_CLEAR_MASK        ((uint16_t)0xF040)
 174:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 175:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /* RCC PLLs masks */
 176:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** #define PLLCFGR_PPLR_MASK         ((uint32_t)0x70000000)
 177:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** #define PLLCFGR_PPLN_MASK         ((uint32_t)0x00007FC0)
 178:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 179:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** #define SPI_CR2_FRF               ((uint16_t)0x0010)
 180:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** #define SPI_SR_TIFRFE             ((uint16_t)0x0100)
 181:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 182:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /* Private macro -------------------------------------------------------------*/
 183:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /* Private variables ---------------------------------------------------------*/
 184:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /* Private function prototypes -----------------------------------------------*/
 185:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /* Private functions ---------------------------------------------------------*/
 186:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 187:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /** @defgroup SPI_Private_Functions
 188:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @{
 189:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 190:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 191:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /** @defgroup SPI_Group1 Initialization and Configuration functions
 192:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  *  @brief   Initialization and Configuration functions 
 193:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  *
 194:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** @verbatim   
 195:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  ===============================================================================
 196:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****                   Initialization and Configuration functions
 197:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  ===============================================================================  
 198:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 199:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   This section provides a set of functions allowing to initialize the SPI Direction,
 200:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPI Mode, SPI Data Size, SPI Polarity, SPI Phase, SPI NSS Management, SPI Baud
 201:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   Rate Prescaler, SPI First Bit and SPI CRC Polynomial.
 202:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 203:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   The SPI_Init() function follows the SPI configuration procedures for Master mode
 204:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   and Slave mode (details for these procedures are available in reference manual
 205:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   (RM0090)).
 206:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 207:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** @endverbatim
 208:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @{
 209:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 210:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 211:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 212:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Deinitialize the SPIx peripheral registers to their default reset values.
 213:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2 or 3 
 214:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         in SPI mode or 2 or 3 in I2S mode.   
 215:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         
 216:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @note   The extended I2S blocks (ie. I2S2ext and I2S3ext blocks) are deinitialized
 217:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         when the relative I2S peripheral is deinitialized (the extended block's clock
 218:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         is managed by the I2S peripheral clock).
 219:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *             
 220:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval None
 221:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 222:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** void SPI_I2S_DeInit(SPI_TypeDef* SPIx)
 223:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
  28              		.loc 1 223 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 8
  31              		@ frame_needed = 1, uses_anonymous_args = 0
  32 0000 80B5     		push	{r7, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 8
  35              		.cfi_offset 7, -8
  36              		.cfi_offset 14, -4
  37 0002 82B0     		sub	sp, sp, #8
  38              	.LCFI1:
  39              		.cfi_def_cfa_offset 16
  40 0004 00AF     		add	r7, sp, #0
  41              	.LCFI2:
  42              		.cfi_def_cfa_register 7
  43 0006 7860     		str	r0, [r7, #4]
 224:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the parameters */
 225:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 226:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 227:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   if (SPIx == SPI1)
  44              		.loc 1 227 0
  45 0008 7A68     		ldr	r2, [r7, #4]
  46 000a 174B     		ldr	r3, .L5
  47 000c 9A42     		cmp	r2, r3
  48 000e 0AD1     		bne	.L2
 228:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 229:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Enable SPI1 reset state */
 230:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
  49              		.loc 1 230 0
  50 0010 4FF48050 		mov	r0, #4096
  51 0014 0121     		movs	r1, #1
  52 0016 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 231:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Release SPI1 from reset state */
 232:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
  53              		.loc 1 232 0
  54 001a 4FF48050 		mov	r0, #4096
  55 001e 0021     		movs	r1, #0
  56 0020 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
  57 0024 1CE0     		b	.L1
  58              	.L2:
 233:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 234:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   else if (SPIx == SPI2)
  59              		.loc 1 234 0
  60 0026 7A68     		ldr	r2, [r7, #4]
  61 0028 104B     		ldr	r3, .L5+4
  62 002a 9A42     		cmp	r2, r3
  63 002c 0AD1     		bne	.L4
 235:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 236:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Enable SPI2 reset state */
 237:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, ENABLE);
  64              		.loc 1 237 0
  65 002e 4FF48040 		mov	r0, #16384
  66 0032 0121     		movs	r1, #1
  67 0034 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 238:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Release SPI2 from reset state */
 239:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
  68              		.loc 1 239 0
  69 0038 4FF48040 		mov	r0, #16384
  70 003c 0021     		movs	r1, #0
  71 003e FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  72 0042 0DE0     		b	.L1
  73              	.L4:
 240:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     }
 241:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   else
 242:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 243:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     if (SPIx == SPI3)
  74              		.loc 1 243 0
  75 0044 7A68     		ldr	r2, [r7, #4]
  76 0046 0A4B     		ldr	r3, .L5+8
  77 0048 9A42     		cmp	r2, r3
  78 004a 09D1     		bne	.L1
 244:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     {
 245:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       /* Enable SPI3 reset state */
 246:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
  79              		.loc 1 246 0
  80 004c 4FF40040 		mov	r0, #32768
  81 0050 0121     		movs	r1, #1
  82 0052 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 247:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       /* Release SPI3 from reset state */
 248:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
  83              		.loc 1 248 0
  84 0056 4FF40040 		mov	r0, #32768
  85 005a 0021     		movs	r1, #0
  86 005c FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  87              	.L1:
 249:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     }
 250:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 251:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
  88              		.loc 1 251 0
  89 0060 0837     		adds	r7, r7, #8
  90 0062 BD46     		mov	sp, r7
  91              		@ sp needed
  92 0064 80BD     		pop	{r7, pc}
  93              	.L6:
  94 0066 00BF     		.align	2
  95              	.L5:
  96 0068 00300140 		.word	1073819648
  97 006c 00380040 		.word	1073756160
  98 0070 003C0040 		.word	1073757184
  99              		.cfi_endproc
 100              	.LFE110:
 102              		.section	.text.SPI_Init,"ax",%progbits
 103              		.align	2
 104              		.global	SPI_Init
 105              		.thumb
 106              		.thumb_func
 108              	SPI_Init:
 109              	.LFB111:
 252:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 253:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 254:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Initializes the SPIx peripheral according to the specified 
 255:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         parameters in the SPI_InitStruct.
 256:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
 257:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
 258:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         contains the configuration information for the specified SPI peripheral.
 259:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval None
 260:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 261:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
 262:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 110              		.loc 1 262 0
 111              		.cfi_startproc
 112              		@ args = 0, pretend = 0, frame = 16
 113              		@ frame_needed = 1, uses_anonymous_args = 0
 114              		@ link register save eliminated.
 115 0000 80B4     		push	{r7}
 116              	.LCFI3:
 117              		.cfi_def_cfa_offset 4
 118              		.cfi_offset 7, -4
 119 0002 85B0     		sub	sp, sp, #20
 120              	.LCFI4:
 121              		.cfi_def_cfa_offset 24
 122 0004 00AF     		add	r7, sp, #0
 123              	.LCFI5:
 124              		.cfi_def_cfa_register 7
 125 0006 7860     		str	r0, [r7, #4]
 126 0008 3960     		str	r1, [r7]
 263:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   uint16_t tmpreg = 0;
 127              		.loc 1 263 0
 128 000a 0023     		movs	r3, #0
 129 000c FB81     		strh	r3, [r7, #14]	@ movhi
 264:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 265:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* check the parameters */
 266:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 267:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 268:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the SPI parameters */
 269:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_DIRECTION_MODE(SPI_InitStruct->SPI_Direction));
 270:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_MODE(SPI_InitStruct->SPI_Mode));
 271:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_DATASIZE(SPI_InitStruct->SPI_DataSize));
 272:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_CPOL(SPI_InitStruct->SPI_CPOL));
 273:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_CPHA(SPI_InitStruct->SPI_CPHA));
 274:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_NSS(SPI_InitStruct->SPI_NSS));
 275:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_BAUDRATE_PRESCALER(SPI_InitStruct->SPI_BaudRatePrescaler));
 276:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
 277:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));
 278:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 279:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /*---------------------------- SPIx CR1 Configuration ------------------------*/
 280:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Get the SPIx CR1 value */
 281:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   tmpreg = SPIx->CR1;
 130              		.loc 1 281 0
 131 000e 7B68     		ldr	r3, [r7, #4]
 132 0010 1B88     		ldrh	r3, [r3]	@ movhi
 133 0012 FB81     		strh	r3, [r7, #14]	@ movhi
 282:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
 283:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   tmpreg &= CR1_CLEAR_MASK;
 134              		.loc 1 283 0
 135 0014 FB89     		ldrh	r3, [r7, #14]	@ movhi
 136 0016 03F44153 		and	r3, r3, #12352
 137 001a FB81     		strh	r3, [r7, #14]	@ movhi
 284:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Configure SPIx: direction, NSS management, first transmitted bit, BaudRate prescaler
 285:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      master/salve mode, CPOL and CPHA */
 286:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Set BIDImode, BIDIOE and RxONLY bits according to SPI_Direction value */
 287:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
 288:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Set LSBFirst bit according to SPI_FirstBit value */
 289:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Set BR bits according to SPI_BaudRatePrescaler value */
 290:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Set CPOL bit according to SPI_CPOL value */
 291:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Set CPHA bit according to SPI_CPHA value */
 292:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 138              		.loc 1 292 0
 139 001c 3B68     		ldr	r3, [r7]
 140 001e 1A88     		ldrh	r2, [r3]
 141 0020 3B68     		ldr	r3, [r7]
 142 0022 5B88     		ldrh	r3, [r3, #2]
 143 0024 1343     		orrs	r3, r3, r2
 144 0026 9AB2     		uxth	r2, r3
 293:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****                   SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 145              		.loc 1 293 0
 146 0028 3B68     		ldr	r3, [r7]
 147 002a 9B88     		ldrh	r3, [r3, #4]
 292:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 148              		.loc 1 292 0
 149 002c 1343     		orrs	r3, r3, r2
 150 002e 9AB2     		uxth	r2, r3
 151              		.loc 1 293 0
 152 0030 3B68     		ldr	r3, [r7]
 153 0032 DB88     		ldrh	r3, [r3, #6]
 292:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 154              		.loc 1 292 0
 155 0034 1343     		orrs	r3, r3, r2
 156 0036 9AB2     		uxth	r2, r3
 294:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****                   SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 157              		.loc 1 294 0
 158 0038 3B68     		ldr	r3, [r7]
 159 003a 1B89     		ldrh	r3, [r3, #8]
 292:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 160              		.loc 1 292 0
 161 003c 1343     		orrs	r3, r3, r2
 162 003e 9AB2     		uxth	r2, r3
 163              		.loc 1 294 0
 164 0040 3B68     		ldr	r3, [r7]
 165 0042 5B89     		ldrh	r3, [r3, #10]
 292:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 166              		.loc 1 292 0
 167 0044 1343     		orrs	r3, r3, r2
 168 0046 9AB2     		uxth	r2, r3
 295:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****                   SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 169              		.loc 1 295 0
 170 0048 3B68     		ldr	r3, [r7]
 171 004a 9B89     		ldrh	r3, [r3, #12]
 292:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 172              		.loc 1 292 0
 173 004c 1343     		orrs	r3, r3, r2
 174 004e 9AB2     		uxth	r2, r3
 175              		.loc 1 295 0
 176 0050 3B68     		ldr	r3, [r7]
 177 0052 DB89     		ldrh	r3, [r3, #14]
 292:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 178              		.loc 1 292 0
 179 0054 1343     		orrs	r3, r3, r2
 180 0056 9AB2     		uxth	r2, r3
 181 0058 FB89     		ldrh	r3, [r7, #14]	@ movhi
 182 005a 1343     		orrs	r3, r3, r2
 183 005c FB81     		strh	r3, [r7, #14]	@ movhi
 296:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Write to SPIx CR1 */
 297:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPIx->CR1 = tmpreg;
 184              		.loc 1 297 0
 185 005e 7B68     		ldr	r3, [r7, #4]
 186 0060 FA89     		ldrh	r2, [r7, #14]	@ movhi
 187 0062 1A80     		strh	r2, [r3]	@ movhi
 298:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 299:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
 300:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
 188              		.loc 1 300 0
 189 0064 7B68     		ldr	r3, [r7, #4]
 190 0066 9B8B     		ldrh	r3, [r3, #28]	@ movhi
 191 0068 9BB2     		uxth	r3, r3
 192 006a 23F40063 		bic	r3, r3, #2048
 193 006e 9AB2     		uxth	r2, r3
 194 0070 7B68     		ldr	r3, [r7, #4]
 195 0072 9A83     		strh	r2, [r3, #28]	@ movhi
 301:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /*---------------------------- SPIx CRCPOLY Configuration --------------------*/
 302:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Write to SPIx CRCPOLY */
 303:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 196              		.loc 1 303 0
 197 0074 3B68     		ldr	r3, [r7]
 198 0076 1A8A     		ldrh	r2, [r3, #16]
 199 0078 7B68     		ldr	r3, [r7, #4]
 200 007a 1A82     		strh	r2, [r3, #16]	@ movhi
 304:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 201              		.loc 1 304 0
 202 007c 1437     		adds	r7, r7, #20
 203 007e BD46     		mov	sp, r7
 204              		@ sp needed
 205 0080 5DF8047B 		ldr	r7, [sp], #4
 206 0084 7047     		bx	lr
 207              		.cfi_endproc
 208              	.LFE111:
 210 0086 00BF     		.section	.text.I2S_Init,"ax",%progbits
 211              		.align	2
 212              		.global	I2S_Init
 213              		.thumb
 214              		.thumb_func
 216              	I2S_Init:
 217              	.LFB112:
 305:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 306:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 307:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Initializes the SPIx peripheral according to the specified 
 308:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         parameters in the I2S_InitStruct.
 309:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: where x can be  2 or 3 to select the SPI peripheral (configured in I2S mode).
 310:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  I2S_InitStruct: pointer to an I2S_InitTypeDef structure that
 311:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         contains the configuration information for the specified SPI peripheral
 312:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         configured in I2S mode.
 313:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *           
 314:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @note   The function calculates the optimal prescaler needed to obtain the most 
 315:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         accurate audio frequency (depending on the I2S clock source, the PLL values 
 316:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         and the product configuration). But in case the prescaler value is greater 
 317:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         than 511, the default value (0x02) will be configured instead.    
 318:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * 
 319:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @note   if an external clock is used as source clock for the I2S, then the define
 320:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         I2S_EXTERNAL_CLOCK_VAL in file stm32f4xx_conf.h should be enabled and set
 321:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         to the value of the the source clock frequency (in Hz).
 322:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *  
 323:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval None
 324:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 325:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** void I2S_Init(SPI_TypeDef* SPIx, I2S_InitTypeDef* I2S_InitStruct)
 326:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 218              		.loc 1 326 0
 219              		.cfi_startproc
 220              		@ args = 0, pretend = 0, frame = 40
 221              		@ frame_needed = 1, uses_anonymous_args = 0
 222              		@ link register save eliminated.
 223 0000 80B4     		push	{r7}
 224              	.LCFI6:
 225              		.cfi_def_cfa_offset 4
 226              		.cfi_offset 7, -4
 227 0002 8BB0     		sub	sp, sp, #44
 228              	.LCFI7:
 229              		.cfi_def_cfa_offset 48
 230 0004 00AF     		add	r7, sp, #0
 231              	.LCFI8:
 232              		.cfi_def_cfa_register 7
 233 0006 7860     		str	r0, [r7, #4]
 234 0008 3960     		str	r1, [r7]
 327:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   uint16_t tmpreg = 0, i2sdiv = 2, i2sodd = 0, packetlength = 1;
 235              		.loc 1 327 0
 236 000a 0023     		movs	r3, #0
 237 000c 7B83     		strh	r3, [r7, #26]	@ movhi
 238 000e 0223     		movs	r3, #2
 239 0010 FB84     		strh	r3, [r7, #38]	@ movhi
 240 0012 0023     		movs	r3, #0
 241 0014 BB84     		strh	r3, [r7, #36]	@ movhi
 242 0016 0123     		movs	r3, #1
 243 0018 7B84     		strh	r3, [r7, #34]	@ movhi
 328:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   uint32_t tmp = 0, i2sclk = 0;
 244              		.loc 1 328 0
 245 001a 0023     		movs	r3, #0
 246 001c FB61     		str	r3, [r7, #28]
 247 001e 0023     		movs	r3, #0
 248 0020 7B61     		str	r3, [r7, #20]
 329:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** #ifndef I2S_EXTERNAL_CLOCK_VAL
 330:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   uint32_t pllm = 0, plln = 0, pllr = 0;
 249              		.loc 1 330 0
 250 0022 0023     		movs	r3, #0
 251 0024 3B61     		str	r3, [r7, #16]
 252 0026 0023     		movs	r3, #0
 253 0028 FB60     		str	r3, [r7, #12]
 254 002a 0023     		movs	r3, #0
 255 002c BB60     		str	r3, [r7, #8]
 331:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** #endif /* I2S_EXTERNAL_CLOCK_VAL */
 332:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 333:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the I2S parameters */
 334:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_23_PERIPH(SPIx));
 335:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_I2S_MODE(I2S_InitStruct->I2S_Mode));
 336:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_I2S_STANDARD(I2S_InitStruct->I2S_Standard));
 337:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_I2S_DATA_FORMAT(I2S_InitStruct->I2S_DataFormat));
 338:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_I2S_MCLK_OUTPUT(I2S_InitStruct->I2S_MCLKOutput));
 339:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_I2S_AUDIO_FREQ(I2S_InitStruct->I2S_AudioFreq));
 340:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  
 341:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 342:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
 343:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
 344:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPIx->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
 256              		.loc 1 344 0
 257 002e 7B68     		ldr	r3, [r7, #4]
 258 0030 9B8B     		ldrh	r3, [r3, #28]	@ movhi
 259 0032 9BB2     		uxth	r3, r3
 260 0034 23F47B63 		bic	r3, r3, #4016
 261 0038 23F00F03 		bic	r3, r3, #15
 262 003c 9AB2     		uxth	r2, r3
 263 003e 7B68     		ldr	r3, [r7, #4]
 264 0040 9A83     		strh	r2, [r3, #28]	@ movhi
 345:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPIx->I2SPR = 0x0002;
 265              		.loc 1 345 0
 266 0042 7B68     		ldr	r3, [r7, #4]
 267 0044 0222     		movs	r2, #2
 268 0046 1A84     		strh	r2, [r3, #32]	@ movhi
 346:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 347:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Get the I2SCFGR register value */
 348:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   tmpreg = SPIx->I2SCFGR;
 269              		.loc 1 348 0
 270 0048 7B68     		ldr	r3, [r7, #4]
 271 004a 9B8B     		ldrh	r3, [r3, #28]	@ movhi
 272 004c 7B83     		strh	r3, [r7, #26]	@ movhi
 349:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 350:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
 351:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
 273              		.loc 1 351 0
 274 004e 3B68     		ldr	r3, [r7]
 275 0050 9B68     		ldr	r3, [r3, #8]
 276 0052 022B     		cmp	r3, #2
 277 0054 04D1     		bne	.L9
 352:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 353:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     i2sodd = (uint16_t)0;
 278              		.loc 1 353 0
 279 0056 0023     		movs	r3, #0
 280 0058 BB84     		strh	r3, [r7, #36]	@ movhi
 354:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     i2sdiv = (uint16_t)2;   
 281              		.loc 1 354 0
 282 005a 0223     		movs	r3, #2
 283 005c FB84     		strh	r3, [r7, #38]	@ movhi
 284 005e 71E0     		b	.L10
 285              	.L9:
 355:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 356:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* If the requested audio frequency is not the default, compute the prescaler */
 357:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   else
 358:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 359:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Check the frame length (For the Prescaler computing) *******************/
 360:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     if(I2S_InitStruct->I2S_DataFormat == I2S_DataFormat_16b)
 286              		.loc 1 360 0
 287 0060 3B68     		ldr	r3, [r7]
 288 0062 9B88     		ldrh	r3, [r3, #4]
 289 0064 002B     		cmp	r3, #0
 290 0066 02D1     		bne	.L11
 361:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     {
 362:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       /* Packet length is 16 bits */
 363:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       packetlength = 1;
 291              		.loc 1 363 0
 292 0068 0123     		movs	r3, #1
 293 006a 7B84     		strh	r3, [r7, #34]	@ movhi
 294 006c 01E0     		b	.L12
 295              	.L11:
 364:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     }
 365:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     else
 366:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     {
 367:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       /* Packet length is 32 bits */
 368:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       packetlength = 2;
 296              		.loc 1 368 0
 297 006e 0223     		movs	r3, #2
 298 0070 7B84     		strh	r3, [r7, #34]	@ movhi
 299              	.L12:
 369:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     }
 370:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 371:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Get I2S source Clock frequency (only in Silicon RevisionB and RevisionY) */
 372:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       
 373:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* If an external I2S clock has to be used, this define should be set  
 374:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****        in the project configuration or in the stm32f4xx_conf.h file */
 375:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   #ifdef I2S_EXTERNAL_CLOCK_VAL     
 376:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Set external clock as I2S clock source */
 377:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     if ((RCC->CFGR & RCC_CFGR_I2SSRC) == 0)
 378:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     {
 379:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       RCC->CFGR |= (uint32_t)RCC_CFGR_I2SSRC;
 380:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     }
 381:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     
 382:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Set the I2S clock to the external clock  value */
 383:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     i2sclk = I2S_EXTERNAL_CLOCK_VAL;
 384:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 385:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   #else /* There is no define for External I2S clock source */
 386:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Set PLLI2S as I2S clock source */
 387:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     if ((RCC->CFGR & RCC_CFGR_I2SSRC) != 0)
 300              		.loc 1 387 0
 301 0072 4C4B     		ldr	r3, .L18
 302 0074 9B68     		ldr	r3, [r3, #8]
 303 0076 03F40003 		and	r3, r3, #8388608
 304 007a 002B     		cmp	r3, #0
 305 007c 05D0     		beq	.L13
 388:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     {
 389:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       RCC->CFGR &= ~(uint32_t)RCC_CFGR_I2SSRC;
 306              		.loc 1 389 0
 307 007e 494B     		ldr	r3, .L18
 308 0080 484A     		ldr	r2, .L18
 309 0082 9268     		ldr	r2, [r2, #8]
 310 0084 22F40002 		bic	r2, r2, #8388608
 311 0088 9A60     		str	r2, [r3, #8]
 312              	.L13:
 390:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     }    
 391:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     
 392:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Get the PLLI2SN value */
 393:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     plln = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6) & \
 313              		.loc 1 393 0
 314 008a 464B     		ldr	r3, .L18
 315 008c D3F88420 		ldr	r2, [r3, #132]
 316 0090 47F6C073 		movw	r3, #32704
 317 0094 1340     		ands	r3, r3, r2
 318 0096 9B09     		lsrs	r3, r3, #6
 319 0098 C3F30803 		ubfx	r3, r3, #0, #9
 320 009c FB60     		str	r3, [r7, #12]
 394:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****                       (RCC_PLLI2SCFGR_PLLI2SN >> 6));
 395:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     
 396:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Get the PLLI2SR value */
 397:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     pllr = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28) & \
 321              		.loc 1 397 0
 322 009e 414B     		ldr	r3, .L18
 323 00a0 D3F88430 		ldr	r3, [r3, #132]
 324 00a4 03F0E043 		and	r3, r3, #1879048192
 325 00a8 1B0F     		lsrs	r3, r3, #28
 326 00aa 03F00703 		and	r3, r3, #7
 327 00ae BB60     		str	r3, [r7, #8]
 398:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****                       (RCC_PLLI2SCFGR_PLLI2SR >> 28));
 399:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     
 400:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Get the PLLM value */
 401:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     pllm = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);      
 328              		.loc 1 401 0
 329 00b0 3C4B     		ldr	r3, .L18
 330 00b2 5B68     		ldr	r3, [r3, #4]
 331 00b4 03F03F03 		and	r3, r3, #63
 332 00b8 3B61     		str	r3, [r7, #16]
 402:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     
 403:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Get the I2S source clock value */
 404:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     i2sclk = (uint32_t)(((HSE_VALUE / pllm) * plln) / pllr);
 333              		.loc 1 404 0
 334 00ba 3B4A     		ldr	r2, .L18+4
 335 00bc 3B69     		ldr	r3, [r7, #16]
 336 00be B2FBF3F3 		udiv	r3, r2, r3
 337 00c2 FA68     		ldr	r2, [r7, #12]
 338 00c4 02FB03F2 		mul	r2, r2, r3
 339 00c8 BB68     		ldr	r3, [r7, #8]
 340 00ca B2FBF3F3 		udiv	r3, r2, r3
 341 00ce 7B61     		str	r3, [r7, #20]
 405:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   #endif /* I2S_EXTERNAL_CLOCK_VAL */
 406:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     
 407:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Compute the Real divider depending on the MCLK output state, with a floating point */
 408:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     if(I2S_InitStruct->I2S_MCLKOutput == I2S_MCLKOutput_Enable)
 342              		.loc 1 408 0
 343 00d0 3B68     		ldr	r3, [r7]
 344 00d2 DB88     		ldrh	r3, [r3, #6]
 345 00d4 B3F5007F 		cmp	r3, #512
 346 00d8 0FD1     		bne	.L14
 409:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     {
 410:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       /* MCLK output is enabled */
 411:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       tmp = (uint16_t)(((((i2sclk / 256) * 10) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 347              		.loc 1 411 0
 348 00da 7B69     		ldr	r3, [r7, #20]
 349 00dc 1A0A     		lsrs	r2, r3, #8
 350 00de 1346     		mov	r3, r2
 351 00e0 9B00     		lsls	r3, r3, #2
 352 00e2 1344     		add	r3, r3, r2
 353 00e4 5B00     		lsls	r3, r3, #1
 354 00e6 1A46     		mov	r2, r3
 355 00e8 3B68     		ldr	r3, [r7]
 356 00ea 9B68     		ldr	r3, [r3, #8]
 357 00ec B2FBF3F3 		udiv	r3, r2, r3
 358 00f0 9BB2     		uxth	r3, r3
 359 00f2 0533     		adds	r3, r3, #5
 360 00f4 9BB2     		uxth	r3, r3
 361 00f6 FB61     		str	r3, [r7, #28]
 362 00f8 11E0     		b	.L15
 363              	.L14:
 412:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     }
 413:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     else
 414:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     {
 415:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       /* MCLK output is disabled */
 416:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       tmp = (uint16_t)(((((i2sclk / (32 * packetlength)) *10 ) / I2S_InitStruct->I2S_AudioFreq)) + 
 364              		.loc 1 416 0
 365 00fa 7B8C     		ldrh	r3, [r7, #34]
 366 00fc 5B01     		lsls	r3, r3, #5
 367 00fe 7A69     		ldr	r2, [r7, #20]
 368 0100 B2FBF3F2 		udiv	r2, r2, r3
 369 0104 1346     		mov	r3, r2
 370 0106 9B00     		lsls	r3, r3, #2
 371 0108 1344     		add	r3, r3, r2
 372 010a 5B00     		lsls	r3, r3, #1
 373 010c 1A46     		mov	r2, r3
 374 010e 3B68     		ldr	r3, [r7]
 375 0110 9B68     		ldr	r3, [r3, #8]
 376 0112 B2FBF3F3 		udiv	r3, r2, r3
 377 0116 9BB2     		uxth	r3, r3
 378 0118 0533     		adds	r3, r3, #5
 379 011a 9BB2     		uxth	r3, r3
 380 011c FB61     		str	r3, [r7, #28]
 381              	.L15:
 417:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     }
 418:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     
 419:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Remove the flatting point */
 420:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     tmp = tmp / 10;  
 382              		.loc 1 420 0
 383 011e FA69     		ldr	r2, [r7, #28]
 384 0120 224B     		ldr	r3, .L18+8
 385 0122 A3FB0213 		umull	r1, r3, r3, r2
 386 0126 DB08     		lsrs	r3, r3, #3
 387 0128 FB61     		str	r3, [r7, #28]
 421:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       
 422:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Check the parity of the divider */
 423:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     i2sodd = (uint16_t)(tmp & (uint16_t)0x0001);
 388              		.loc 1 423 0
 389 012a FB69     		ldr	r3, [r7, #28]
 390 012c 9BB2     		uxth	r3, r3
 391 012e 03F00103 		and	r3, r3, #1
 392 0132 BB84     		strh	r3, [r7, #36]	@ movhi
 424:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****    
 425:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Compute the i2sdiv prescaler */
 426:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     i2sdiv = (uint16_t)((tmp - i2sodd) / 2);
 393              		.loc 1 426 0
 394 0134 BB8C     		ldrh	r3, [r7, #36]
 395 0136 FA69     		ldr	r2, [r7, #28]
 396 0138 D31A     		subs	r3, r2, r3
 397 013a 5B08     		lsrs	r3, r3, #1
 398 013c FB84     		strh	r3, [r7, #38]	@ movhi
 427:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****    
 428:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
 429:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     i2sodd = (uint16_t) (i2sodd << 8);
 399              		.loc 1 429 0
 400 013e BB8C     		ldrh	r3, [r7, #36]	@ movhi
 401 0140 1B02     		lsls	r3, r3, #8
 402 0142 BB84     		strh	r3, [r7, #36]	@ movhi
 403              	.L10:
 430:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 431:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 432:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Test if the divider is 1 or 0 or greater than 0xFF */
 433:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   if ((i2sdiv < 2) || (i2sdiv > 0xFF))
 404              		.loc 1 433 0
 405 0144 FB8C     		ldrh	r3, [r7, #38]
 406 0146 012B     		cmp	r3, #1
 407 0148 02D9     		bls	.L16
 408              		.loc 1 433 0 is_stmt 0 discriminator 1
 409 014a FB8C     		ldrh	r3, [r7, #38]
 410 014c FF2B     		cmp	r3, #255
 411 014e 03D9     		bls	.L17
 412              	.L16:
 434:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 435:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Set the default values */
 436:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     i2sdiv = 2;
 413              		.loc 1 436 0 is_stmt 1
 414 0150 0223     		movs	r3, #2
 415 0152 FB84     		strh	r3, [r7, #38]	@ movhi
 437:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     i2sodd = 0;
 416              		.loc 1 437 0
 417 0154 0023     		movs	r3, #0
 418 0156 BB84     		strh	r3, [r7, #36]	@ movhi
 419              	.L17:
 438:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 439:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 440:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Write to SPIx I2SPR register the computed value */
 441:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCL
 420              		.loc 1 441 0
 421 0158 3B68     		ldr	r3, [r7]
 422 015a DA88     		ldrh	r2, [r3, #6]
 423 015c BB8C     		ldrh	r3, [r7, #36]	@ movhi
 424 015e 1343     		orrs	r3, r3, r2
 425 0160 9AB2     		uxth	r2, r3
 426 0162 FB8C     		ldrh	r3, [r7, #38]	@ movhi
 427 0164 1343     		orrs	r3, r3, r2
 428 0166 9AB2     		uxth	r2, r3
 429 0168 7B68     		ldr	r3, [r7, #4]
 430 016a 1A84     		strh	r2, [r3, #32]	@ movhi
 442:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  
 443:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Configure the I2S with the SPI_InitStruct values */
 444:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
 431              		.loc 1 444 0
 432 016c 3B68     		ldr	r3, [r7]
 433 016e 1A88     		ldrh	r2, [r3]
 445:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****                   (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataForm
 434              		.loc 1 445 0
 435 0170 3B68     		ldr	r3, [r7]
 436 0172 5988     		ldrh	r1, [r3, #2]
 437 0174 3B68     		ldr	r3, [r7]
 438 0176 9888     		ldrh	r0, [r3, #4]
 446:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****                   (uint16_t)I2S_InitStruct->I2S_CPOL))));
 439              		.loc 1 446 0
 440 0178 3B68     		ldr	r3, [r7]
 441 017a 9B89     		ldrh	r3, [r3, #12]
 445:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****                   (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataForm
 442              		.loc 1 445 0
 443 017c 0343     		orrs	r3, r3, r0
 444 017e 9BB2     		uxth	r3, r3
 445 0180 0B43     		orrs	r3, r3, r1
 446 0182 9BB2     		uxth	r3, r3
 444:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
 447              		.loc 1 444 0
 448 0184 1343     		orrs	r3, r3, r2
 449 0186 9AB2     		uxth	r2, r3
 450 0188 7B8B     		ldrh	r3, [r7, #26]	@ movhi
 451 018a 1343     		orrs	r3, r3, r2
 452 018c 9BB2     		uxth	r3, r3
 453 018e 43F40063 		orr	r3, r3, #2048
 454 0192 7B83     		strh	r3, [r7, #26]	@ movhi
 447:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  
 448:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Write to SPIx I2SCFGR */  
 449:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPIx->I2SCFGR = tmpreg;
 455              		.loc 1 449 0
 456 0194 7B68     		ldr	r3, [r7, #4]
 457 0196 7A8B     		ldrh	r2, [r7, #26]	@ movhi
 458 0198 9A83     		strh	r2, [r3, #28]	@ movhi
 450:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 459              		.loc 1 450 0
 460 019a 2C37     		adds	r7, r7, #44
 461 019c BD46     		mov	sp, r7
 462              		@ sp needed
 463 019e 5DF8047B 		ldr	r7, [sp], #4
 464 01a2 7047     		bx	lr
 465              	.L19:
 466              		.align	2
 467              	.L18:
 468 01a4 00380240 		.word	1073887232
 469 01a8 00127A00 		.word	8000000
 470 01ac CDCCCCCC 		.word	-858993459
 471              		.cfi_endproc
 472              	.LFE112:
 474              		.section	.text.SPI_StructInit,"ax",%progbits
 475              		.align	2
 476              		.global	SPI_StructInit
 477              		.thumb
 478              		.thumb_func
 480              	SPI_StructInit:
 481              	.LFB113:
 451:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 452:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 453:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Fills each SPI_InitStruct member with its default value.
 454:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure which will be initialized.
 455:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval None
 456:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 457:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** void SPI_StructInit(SPI_InitTypeDef* SPI_InitStruct)
 458:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 482              		.loc 1 458 0
 483              		.cfi_startproc
 484              		@ args = 0, pretend = 0, frame = 8
 485              		@ frame_needed = 1, uses_anonymous_args = 0
 486              		@ link register save eliminated.
 487 0000 80B4     		push	{r7}
 488              	.LCFI9:
 489              		.cfi_def_cfa_offset 4
 490              		.cfi_offset 7, -4
 491 0002 83B0     		sub	sp, sp, #12
 492              	.LCFI10:
 493              		.cfi_def_cfa_offset 16
 494 0004 00AF     		add	r7, sp, #0
 495              	.LCFI11:
 496              		.cfi_def_cfa_register 7
 497 0006 7860     		str	r0, [r7, #4]
 459:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /*--------------- Reset SPI init structure parameters values -----------------*/
 460:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Initialize the SPI_Direction member */
 461:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPI_InitStruct->SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 498              		.loc 1 461 0
 499 0008 7B68     		ldr	r3, [r7, #4]
 500 000a 0022     		movs	r2, #0
 501 000c 1A80     		strh	r2, [r3]	@ movhi
 462:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* initialize the SPI_Mode member */
 463:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPI_InitStruct->SPI_Mode = SPI_Mode_Slave;
 502              		.loc 1 463 0
 503 000e 7B68     		ldr	r3, [r7, #4]
 504 0010 0022     		movs	r2, #0
 505 0012 5A80     		strh	r2, [r3, #2]	@ movhi
 464:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* initialize the SPI_DataSize member */
 465:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPI_InitStruct->SPI_DataSize = SPI_DataSize_8b;
 506              		.loc 1 465 0
 507 0014 7B68     		ldr	r3, [r7, #4]
 508 0016 0022     		movs	r2, #0
 509 0018 9A80     		strh	r2, [r3, #4]	@ movhi
 466:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Initialize the SPI_CPOL member */
 467:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPI_InitStruct->SPI_CPOL = SPI_CPOL_Low;
 510              		.loc 1 467 0
 511 001a 7B68     		ldr	r3, [r7, #4]
 512 001c 0022     		movs	r2, #0
 513 001e DA80     		strh	r2, [r3, #6]	@ movhi
 468:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Initialize the SPI_CPHA member */
 469:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPI_InitStruct->SPI_CPHA = SPI_CPHA_1Edge;
 514              		.loc 1 469 0
 515 0020 7B68     		ldr	r3, [r7, #4]
 516 0022 0022     		movs	r2, #0
 517 0024 1A81     		strh	r2, [r3, #8]	@ movhi
 470:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Initialize the SPI_NSS member */
 471:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPI_InitStruct->SPI_NSS = SPI_NSS_Hard;
 518              		.loc 1 471 0
 519 0026 7B68     		ldr	r3, [r7, #4]
 520 0028 0022     		movs	r2, #0
 521 002a 5A81     		strh	r2, [r3, #10]	@ movhi
 472:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Initialize the SPI_BaudRatePrescaler member */
 473:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPI_InitStruct->SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
 522              		.loc 1 473 0
 523 002c 7B68     		ldr	r3, [r7, #4]
 524 002e 0022     		movs	r2, #0
 525 0030 9A81     		strh	r2, [r3, #12]	@ movhi
 474:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Initialize the SPI_FirstBit member */
 475:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPI_InitStruct->SPI_FirstBit = SPI_FirstBit_MSB;
 526              		.loc 1 475 0
 527 0032 7B68     		ldr	r3, [r7, #4]
 528 0034 0022     		movs	r2, #0
 529 0036 DA81     		strh	r2, [r3, #14]	@ movhi
 476:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Initialize the SPI_CRCPolynomial member */
 477:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPI_InitStruct->SPI_CRCPolynomial = 7;
 530              		.loc 1 477 0
 531 0038 7B68     		ldr	r3, [r7, #4]
 532 003a 0722     		movs	r2, #7
 533 003c 1A82     		strh	r2, [r3, #16]	@ movhi
 478:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 534              		.loc 1 478 0
 535 003e 0C37     		adds	r7, r7, #12
 536 0040 BD46     		mov	sp, r7
 537              		@ sp needed
 538 0042 5DF8047B 		ldr	r7, [sp], #4
 539 0046 7047     		bx	lr
 540              		.cfi_endproc
 541              	.LFE113:
 543              		.section	.text.I2S_StructInit,"ax",%progbits
 544              		.align	2
 545              		.global	I2S_StructInit
 546              		.thumb
 547              		.thumb_func
 549              	I2S_StructInit:
 550              	.LFB114:
 479:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 480:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 481:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Fills each I2S_InitStruct member with its default value.
 482:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  I2S_InitStruct: pointer to a I2S_InitTypeDef structure which will be initialized.
 483:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval None
 484:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 485:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** void I2S_StructInit(I2S_InitTypeDef* I2S_InitStruct)
 486:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 551              		.loc 1 486 0
 552              		.cfi_startproc
 553              		@ args = 0, pretend = 0, frame = 8
 554              		@ frame_needed = 1, uses_anonymous_args = 0
 555              		@ link register save eliminated.
 556 0000 80B4     		push	{r7}
 557              	.LCFI12:
 558              		.cfi_def_cfa_offset 4
 559              		.cfi_offset 7, -4
 560 0002 83B0     		sub	sp, sp, #12
 561              	.LCFI13:
 562              		.cfi_def_cfa_offset 16
 563 0004 00AF     		add	r7, sp, #0
 564              	.LCFI14:
 565              		.cfi_def_cfa_register 7
 566 0006 7860     		str	r0, [r7, #4]
 487:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /*--------------- Reset I2S init structure parameters values -----------------*/
 488:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Initialize the I2S_Mode member */
 489:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   I2S_InitStruct->I2S_Mode = I2S_Mode_SlaveTx;
 567              		.loc 1 489 0
 568 0008 7B68     		ldr	r3, [r7, #4]
 569 000a 0022     		movs	r2, #0
 570 000c 1A80     		strh	r2, [r3]	@ movhi
 490:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 491:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Initialize the I2S_Standard member */
 492:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   I2S_InitStruct->I2S_Standard = I2S_Standard_Phillips;
 571              		.loc 1 492 0
 572 000e 7B68     		ldr	r3, [r7, #4]
 573 0010 0022     		movs	r2, #0
 574 0012 5A80     		strh	r2, [r3, #2]	@ movhi
 493:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 494:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Initialize the I2S_DataFormat member */
 495:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   I2S_InitStruct->I2S_DataFormat = I2S_DataFormat_16b;
 575              		.loc 1 495 0
 576 0014 7B68     		ldr	r3, [r7, #4]
 577 0016 0022     		movs	r2, #0
 578 0018 9A80     		strh	r2, [r3, #4]	@ movhi
 496:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 497:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Initialize the I2S_MCLKOutput member */
 498:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   I2S_InitStruct->I2S_MCLKOutput = I2S_MCLKOutput_Disable;
 579              		.loc 1 498 0
 580 001a 7B68     		ldr	r3, [r7, #4]
 581 001c 0022     		movs	r2, #0
 582 001e DA80     		strh	r2, [r3, #6]	@ movhi
 499:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 500:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Initialize the I2S_AudioFreq member */
 501:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   I2S_InitStruct->I2S_AudioFreq = I2S_AudioFreq_Default;
 583              		.loc 1 501 0
 584 0020 7B68     		ldr	r3, [r7, #4]
 585 0022 0222     		movs	r2, #2
 586 0024 9A60     		str	r2, [r3, #8]
 502:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 503:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Initialize the I2S_CPOL member */
 504:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   I2S_InitStruct->I2S_CPOL = I2S_CPOL_Low;
 587              		.loc 1 504 0
 588 0026 7B68     		ldr	r3, [r7, #4]
 589 0028 0022     		movs	r2, #0
 590 002a 9A81     		strh	r2, [r3, #12]	@ movhi
 505:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 591              		.loc 1 505 0
 592 002c 0C37     		adds	r7, r7, #12
 593 002e BD46     		mov	sp, r7
 594              		@ sp needed
 595 0030 5DF8047B 		ldr	r7, [sp], #4
 596 0034 7047     		bx	lr
 597              		.cfi_endproc
 598              	.LFE114:
 600 0036 00BF     		.section	.text.SPI_Cmd,"ax",%progbits
 601              		.align	2
 602              		.global	SPI_Cmd
 603              		.thumb
 604              		.thumb_func
 606              	SPI_Cmd:
 607              	.LFB115:
 506:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 507:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 508:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Enables or disables the specified SPI peripheral.
 509:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
 510:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  NewState: new state of the SPIx peripheral. 
 511:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          This parameter can be: ENABLE or DISABLE.
 512:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval None
 513:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 514:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
 515:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 608              		.loc 1 515 0
 609              		.cfi_startproc
 610              		@ args = 0, pretend = 0, frame = 8
 611              		@ frame_needed = 1, uses_anonymous_args = 0
 612              		@ link register save eliminated.
 613 0000 80B4     		push	{r7}
 614              	.LCFI15:
 615              		.cfi_def_cfa_offset 4
 616              		.cfi_offset 7, -4
 617 0002 83B0     		sub	sp, sp, #12
 618              	.LCFI16:
 619              		.cfi_def_cfa_offset 16
 620 0004 00AF     		add	r7, sp, #0
 621              	.LCFI17:
 622              		.cfi_def_cfa_register 7
 623 0006 7860     		str	r0, [r7, #4]
 624 0008 0B46     		mov	r3, r1
 625 000a FB70     		strb	r3, [r7, #3]
 516:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the parameters */
 517:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 518:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 519:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   if (NewState != DISABLE)
 626              		.loc 1 519 0
 627 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 628 000e 002B     		cmp	r3, #0
 629 0010 08D0     		beq	.L23
 520:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 521:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Enable the selected SPI peripheral */
 522:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     SPIx->CR1 |= SPI_CR1_SPE;
 630              		.loc 1 522 0
 631 0012 7B68     		ldr	r3, [r7, #4]
 632 0014 1B88     		ldrh	r3, [r3]	@ movhi
 633 0016 9BB2     		uxth	r3, r3
 634 0018 43F04003 		orr	r3, r3, #64
 635 001c 9AB2     		uxth	r2, r3
 636 001e 7B68     		ldr	r3, [r7, #4]
 637 0020 1A80     		strh	r2, [r3]	@ movhi
 638 0022 07E0     		b	.L22
 639              	.L23:
 523:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 524:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   else
 525:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 526:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Disable the selected SPI peripheral */
 527:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
 640              		.loc 1 527 0
 641 0024 7B68     		ldr	r3, [r7, #4]
 642 0026 1B88     		ldrh	r3, [r3]	@ movhi
 643 0028 9BB2     		uxth	r3, r3
 644 002a 23F04003 		bic	r3, r3, #64
 645 002e 9AB2     		uxth	r2, r3
 646 0030 7B68     		ldr	r3, [r7, #4]
 647 0032 1A80     		strh	r2, [r3]	@ movhi
 648              	.L22:
 528:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 529:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 649              		.loc 1 529 0
 650 0034 0C37     		adds	r7, r7, #12
 651 0036 BD46     		mov	sp, r7
 652              		@ sp needed
 653 0038 5DF8047B 		ldr	r7, [sp], #4
 654 003c 7047     		bx	lr
 655              		.cfi_endproc
 656              	.LFE115:
 658 003e 00BF     		.section	.text.I2S_Cmd,"ax",%progbits
 659              		.align	2
 660              		.global	I2S_Cmd
 661              		.thumb
 662              		.thumb_func
 664              	I2S_Cmd:
 665              	.LFB116:
 530:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 531:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 532:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Enables or disables the specified SPI peripheral (in I2S mode).
 533:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: where x can be 2 or 3 to select the SPI peripheral (or I2Sxext 
 534:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         for full duplex mode).
 535:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  NewState: new state of the SPIx peripheral. 
 536:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         This parameter can be: ENABLE or DISABLE.
 537:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval None
 538:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 539:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** void I2S_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
 540:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 666              		.loc 1 540 0
 667              		.cfi_startproc
 668              		@ args = 0, pretend = 0, frame = 8
 669              		@ frame_needed = 1, uses_anonymous_args = 0
 670              		@ link register save eliminated.
 671 0000 80B4     		push	{r7}
 672              	.LCFI18:
 673              		.cfi_def_cfa_offset 4
 674              		.cfi_offset 7, -4
 675 0002 83B0     		sub	sp, sp, #12
 676              	.LCFI19:
 677              		.cfi_def_cfa_offset 16
 678 0004 00AF     		add	r7, sp, #0
 679              	.LCFI20:
 680              		.cfi_def_cfa_register 7
 681 0006 7860     		str	r0, [r7, #4]
 682 0008 0B46     		mov	r3, r1
 683 000a FB70     		strb	r3, [r7, #3]
 541:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the parameters */
 542:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_23_PERIPH_EXT(SPIx));
 543:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 544:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 545:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   if (NewState != DISABLE)
 684              		.loc 1 545 0
 685 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 686 000e 002B     		cmp	r3, #0
 687 0010 08D0     		beq	.L26
 546:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 547:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Enable the selected SPI peripheral (in I2S mode) */
 548:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     SPIx->I2SCFGR |= SPI_I2SCFGR_I2SE;
 688              		.loc 1 548 0
 689 0012 7B68     		ldr	r3, [r7, #4]
 690 0014 9B8B     		ldrh	r3, [r3, #28]	@ movhi
 691 0016 9BB2     		uxth	r3, r3
 692 0018 43F48063 		orr	r3, r3, #1024
 693 001c 9AB2     		uxth	r2, r3
 694 001e 7B68     		ldr	r3, [r7, #4]
 695 0020 9A83     		strh	r2, [r3, #28]	@ movhi
 696 0022 07E0     		b	.L25
 697              	.L26:
 549:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 550:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   else
 551:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 552:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Disable the selected SPI peripheral in I2S mode */
 553:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SE);
 698              		.loc 1 553 0
 699 0024 7B68     		ldr	r3, [r7, #4]
 700 0026 9B8B     		ldrh	r3, [r3, #28]	@ movhi
 701 0028 9BB2     		uxth	r3, r3
 702 002a 23F48063 		bic	r3, r3, #1024
 703 002e 9AB2     		uxth	r2, r3
 704 0030 7B68     		ldr	r3, [r7, #4]
 705 0032 9A83     		strh	r2, [r3, #28]	@ movhi
 706              	.L25:
 554:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 555:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 707              		.loc 1 555 0
 708 0034 0C37     		adds	r7, r7, #12
 709 0036 BD46     		mov	sp, r7
 710              		@ sp needed
 711 0038 5DF8047B 		ldr	r7, [sp], #4
 712 003c 7047     		bx	lr
 713              		.cfi_endproc
 714              	.LFE116:
 716 003e 00BF     		.section	.text.SPI_DataSizeConfig,"ax",%progbits
 717              		.align	2
 718              		.global	SPI_DataSizeConfig
 719              		.thumb
 720              		.thumb_func
 722              	SPI_DataSizeConfig:
 723              	.LFB117:
 556:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 557:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 558:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Configures the data size for the selected SPI.
 559:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
 560:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPI_DataSize: specifies the SPI data size.
 561:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          This parameter can be one of the following values:
 562:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_DataSize_16b: Set data frame format to 16bit
 563:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_DataSize_8b: Set data frame format to 8bit
 564:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval None
 565:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 566:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** void SPI_DataSizeConfig(SPI_TypeDef* SPIx, uint16_t SPI_DataSize)
 567:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 724              		.loc 1 567 0
 725              		.cfi_startproc
 726              		@ args = 0, pretend = 0, frame = 8
 727              		@ frame_needed = 1, uses_anonymous_args = 0
 728              		@ link register save eliminated.
 729 0000 80B4     		push	{r7}
 730              	.LCFI21:
 731              		.cfi_def_cfa_offset 4
 732              		.cfi_offset 7, -4
 733 0002 83B0     		sub	sp, sp, #12
 734              	.LCFI22:
 735              		.cfi_def_cfa_offset 16
 736 0004 00AF     		add	r7, sp, #0
 737              	.LCFI23:
 738              		.cfi_def_cfa_register 7
 739 0006 7860     		str	r0, [r7, #4]
 740 0008 0B46     		mov	r3, r1
 741 000a 7B80     		strh	r3, [r7, #2]	@ movhi
 568:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the parameters */
 569:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 570:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_DATASIZE(SPI_DataSize));
 571:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Clear DFF bit */
 572:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPIx->CR1 &= (uint16_t)~SPI_DataSize_16b;
 742              		.loc 1 572 0
 743 000c 7B68     		ldr	r3, [r7, #4]
 744 000e 1B88     		ldrh	r3, [r3]	@ movhi
 745 0010 9BB2     		uxth	r3, r3
 746 0012 23F40063 		bic	r3, r3, #2048
 747 0016 9AB2     		uxth	r2, r3
 748 0018 7B68     		ldr	r3, [r7, #4]
 749 001a 1A80     		strh	r2, [r3]	@ movhi
 573:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Set new DFF bit value */
 574:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPIx->CR1 |= SPI_DataSize;
 750              		.loc 1 574 0
 751 001c 7B68     		ldr	r3, [r7, #4]
 752 001e 1B88     		ldrh	r3, [r3]	@ movhi
 753 0020 9AB2     		uxth	r2, r3
 754 0022 7B88     		ldrh	r3, [r7, #2]	@ movhi
 755 0024 1343     		orrs	r3, r3, r2
 756 0026 9AB2     		uxth	r2, r3
 757 0028 7B68     		ldr	r3, [r7, #4]
 758 002a 1A80     		strh	r2, [r3]	@ movhi
 575:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 759              		.loc 1 575 0
 760 002c 0C37     		adds	r7, r7, #12
 761 002e BD46     		mov	sp, r7
 762              		@ sp needed
 763 0030 5DF8047B 		ldr	r7, [sp], #4
 764 0034 7047     		bx	lr
 765              		.cfi_endproc
 766              	.LFE117:
 768 0036 00BF     		.section	.text.SPI_BiDirectionalLineConfig,"ax",%progbits
 769              		.align	2
 770              		.global	SPI_BiDirectionalLineConfig
 771              		.thumb
 772              		.thumb_func
 774              	SPI_BiDirectionalLineConfig:
 775              	.LFB118:
 576:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 577:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 578:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Selects the data transfer direction in bidirectional mode for the specified SPI.
 579:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
 580:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPI_Direction: specifies the data transfer direction in bidirectional mode. 
 581:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          This parameter can be one of the following values:
 582:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_Direction_Tx: Selects Tx transmission direction
 583:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_Direction_Rx: Selects Rx receive direction
 584:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval None
 585:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 586:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** void SPI_BiDirectionalLineConfig(SPI_TypeDef* SPIx, uint16_t SPI_Direction)
 587:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 776              		.loc 1 587 0
 777              		.cfi_startproc
 778              		@ args = 0, pretend = 0, frame = 8
 779              		@ frame_needed = 1, uses_anonymous_args = 0
 780              		@ link register save eliminated.
 781 0000 80B4     		push	{r7}
 782              	.LCFI24:
 783              		.cfi_def_cfa_offset 4
 784              		.cfi_offset 7, -4
 785 0002 83B0     		sub	sp, sp, #12
 786              	.LCFI25:
 787              		.cfi_def_cfa_offset 16
 788 0004 00AF     		add	r7, sp, #0
 789              	.LCFI26:
 790              		.cfi_def_cfa_register 7
 791 0006 7860     		str	r0, [r7, #4]
 792 0008 0B46     		mov	r3, r1
 793 000a 7B80     		strh	r3, [r7, #2]	@ movhi
 588:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the parameters */
 589:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 590:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_DIRECTION(SPI_Direction));
 591:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   if (SPI_Direction == SPI_Direction_Tx)
 794              		.loc 1 591 0
 795 000c 7B88     		ldrh	r3, [r7, #2]
 796 000e B3F5804F 		cmp	r3, #16384
 797 0012 08D1     		bne	.L30
 592:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 593:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Set the Tx only mode */
 594:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     SPIx->CR1 |= SPI_Direction_Tx;
 798              		.loc 1 594 0
 799 0014 7B68     		ldr	r3, [r7, #4]
 800 0016 1B88     		ldrh	r3, [r3]	@ movhi
 801 0018 9BB2     		uxth	r3, r3
 802 001a 43F48043 		orr	r3, r3, #16384
 803 001e 9AB2     		uxth	r2, r3
 804 0020 7B68     		ldr	r3, [r7, #4]
 805 0022 1A80     		strh	r2, [r3]	@ movhi
 806 0024 07E0     		b	.L29
 807              	.L30:
 595:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 596:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   else
 597:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 598:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Set the Rx only mode */
 599:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     SPIx->CR1 &= SPI_Direction_Rx;
 808              		.loc 1 599 0
 809 0026 7B68     		ldr	r3, [r7, #4]
 810 0028 1B88     		ldrh	r3, [r3]	@ movhi
 811 002a 9BB2     		uxth	r3, r3
 812 002c 23F48043 		bic	r3, r3, #16384
 813 0030 9AB2     		uxth	r2, r3
 814 0032 7B68     		ldr	r3, [r7, #4]
 815 0034 1A80     		strh	r2, [r3]	@ movhi
 816              	.L29:
 600:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 601:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 817              		.loc 1 601 0
 818 0036 0C37     		adds	r7, r7, #12
 819 0038 BD46     		mov	sp, r7
 820              		@ sp needed
 821 003a 5DF8047B 		ldr	r7, [sp], #4
 822 003e 7047     		bx	lr
 823              		.cfi_endproc
 824              	.LFE118:
 826              		.section	.text.SPI_NSSInternalSoftwareConfig,"ax",%progbits
 827              		.align	2
 828              		.global	SPI_NSSInternalSoftwareConfig
 829              		.thumb
 830              		.thumb_func
 832              	SPI_NSSInternalSoftwareConfig:
 833              	.LFB119:
 602:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 603:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 604:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Configures internally by software the NSS pin for the selected SPI.
 605:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
 606:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPI_NSSInternalSoft: specifies the SPI NSS internal state.
 607:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          This parameter can be one of the following values:
 608:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_NSSInternalSoft_Set: Set NSS pin internally
 609:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_NSSInternalSoft_Reset: Reset NSS pin internally
 610:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval None
 611:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 612:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** void SPI_NSSInternalSoftwareConfig(SPI_TypeDef* SPIx, uint16_t SPI_NSSInternalSoft)
 613:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 834              		.loc 1 613 0
 835              		.cfi_startproc
 836              		@ args = 0, pretend = 0, frame = 8
 837              		@ frame_needed = 1, uses_anonymous_args = 0
 838              		@ link register save eliminated.
 839 0000 80B4     		push	{r7}
 840              	.LCFI27:
 841              		.cfi_def_cfa_offset 4
 842              		.cfi_offset 7, -4
 843 0002 83B0     		sub	sp, sp, #12
 844              	.LCFI28:
 845              		.cfi_def_cfa_offset 16
 846 0004 00AF     		add	r7, sp, #0
 847              	.LCFI29:
 848              		.cfi_def_cfa_register 7
 849 0006 7860     		str	r0, [r7, #4]
 850 0008 0B46     		mov	r3, r1
 851 000a 7B80     		strh	r3, [r7, #2]	@ movhi
 614:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the parameters */
 615:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 616:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_NSS_INTERNAL(SPI_NSSInternalSoft));
 617:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   if (SPI_NSSInternalSoft != SPI_NSSInternalSoft_Reset)
 852              		.loc 1 617 0
 853 000c 7A88     		ldrh	r2, [r7, #2]
 854 000e 4FF6FF63 		movw	r3, #65279
 855 0012 9A42     		cmp	r2, r3
 856 0014 08D0     		beq	.L33
 618:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 619:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Set NSS pin internally by software */
 620:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     SPIx->CR1 |= SPI_NSSInternalSoft_Set;
 857              		.loc 1 620 0
 858 0016 7B68     		ldr	r3, [r7, #4]
 859 0018 1B88     		ldrh	r3, [r3]	@ movhi
 860 001a 9BB2     		uxth	r3, r3
 861 001c 43F48073 		orr	r3, r3, #256
 862 0020 9AB2     		uxth	r2, r3
 863 0022 7B68     		ldr	r3, [r7, #4]
 864 0024 1A80     		strh	r2, [r3]	@ movhi
 865 0026 07E0     		b	.L32
 866              	.L33:
 621:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 622:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   else
 623:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 624:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Reset NSS pin internally by software */
 625:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     SPIx->CR1 &= SPI_NSSInternalSoft_Reset;
 867              		.loc 1 625 0
 868 0028 7B68     		ldr	r3, [r7, #4]
 869 002a 1B88     		ldrh	r3, [r3]	@ movhi
 870 002c 9BB2     		uxth	r3, r3
 871 002e 23F48073 		bic	r3, r3, #256
 872 0032 9AB2     		uxth	r2, r3
 873 0034 7B68     		ldr	r3, [r7, #4]
 874 0036 1A80     		strh	r2, [r3]	@ movhi
 875              	.L32:
 626:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 627:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 876              		.loc 1 627 0
 877 0038 0C37     		adds	r7, r7, #12
 878 003a BD46     		mov	sp, r7
 879              		@ sp needed
 880 003c 5DF8047B 		ldr	r7, [sp], #4
 881 0040 7047     		bx	lr
 882              		.cfi_endproc
 883              	.LFE119:
 885 0042 00BF     		.section	.text.SPI_SSOutputCmd,"ax",%progbits
 886              		.align	2
 887              		.global	SPI_SSOutputCmd
 888              		.thumb
 889              		.thumb_func
 891              	SPI_SSOutputCmd:
 892              	.LFB120:
 628:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 629:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 630:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Enables or disables the SS output for the selected SPI.
 631:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
 632:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  NewState: new state of the SPIx SS output. 
 633:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          This parameter can be: ENABLE or DISABLE.
 634:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval None
 635:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 636:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** void SPI_SSOutputCmd(SPI_TypeDef* SPIx, FunctionalState NewState)
 637:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 893              		.loc 1 637 0
 894              		.cfi_startproc
 895              		@ args = 0, pretend = 0, frame = 8
 896              		@ frame_needed = 1, uses_anonymous_args = 0
 897              		@ link register save eliminated.
 898 0000 80B4     		push	{r7}
 899              	.LCFI30:
 900              		.cfi_def_cfa_offset 4
 901              		.cfi_offset 7, -4
 902 0002 83B0     		sub	sp, sp, #12
 903              	.LCFI31:
 904              		.cfi_def_cfa_offset 16
 905 0004 00AF     		add	r7, sp, #0
 906              	.LCFI32:
 907              		.cfi_def_cfa_register 7
 908 0006 7860     		str	r0, [r7, #4]
 909 0008 0B46     		mov	r3, r1
 910 000a FB70     		strb	r3, [r7, #3]
 638:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the parameters */
 639:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 640:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 641:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   if (NewState != DISABLE)
 911              		.loc 1 641 0
 912 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 913 000e 002B     		cmp	r3, #0
 914 0010 08D0     		beq	.L36
 642:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 643:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Enable the selected SPI SS output */
 644:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     SPIx->CR2 |= (uint16_t)SPI_CR2_SSOE;
 915              		.loc 1 644 0
 916 0012 7B68     		ldr	r3, [r7, #4]
 917 0014 9B88     		ldrh	r3, [r3, #4]	@ movhi
 918 0016 9BB2     		uxth	r3, r3
 919 0018 43F00403 		orr	r3, r3, #4
 920 001c 9AB2     		uxth	r2, r3
 921 001e 7B68     		ldr	r3, [r7, #4]
 922 0020 9A80     		strh	r2, [r3, #4]	@ movhi
 923 0022 07E0     		b	.L35
 924              	.L36:
 645:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 646:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   else
 647:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 648:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Disable the selected SPI SS output */
 649:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     SPIx->CR2 &= (uint16_t)~((uint16_t)SPI_CR2_SSOE);
 925              		.loc 1 649 0
 926 0024 7B68     		ldr	r3, [r7, #4]
 927 0026 9B88     		ldrh	r3, [r3, #4]	@ movhi
 928 0028 9BB2     		uxth	r3, r3
 929 002a 23F00403 		bic	r3, r3, #4
 930 002e 9AB2     		uxth	r2, r3
 931 0030 7B68     		ldr	r3, [r7, #4]
 932 0032 9A80     		strh	r2, [r3, #4]	@ movhi
 933              	.L35:
 650:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 651:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 934              		.loc 1 651 0
 935 0034 0C37     		adds	r7, r7, #12
 936 0036 BD46     		mov	sp, r7
 937              		@ sp needed
 938 0038 5DF8047B 		ldr	r7, [sp], #4
 939 003c 7047     		bx	lr
 940              		.cfi_endproc
 941              	.LFE120:
 943 003e 00BF     		.section	.text.SPI_TIModeCmd,"ax",%progbits
 944              		.align	2
 945              		.global	SPI_TIModeCmd
 946              		.thumb
 947              		.thumb_func
 949              	SPI_TIModeCmd:
 950              	.LFB121:
 652:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 653:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 654:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Enables or disables the SPIx/I2Sx DMA interface.
 655:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *   
 656:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @note   This function can be called only after the SPI_Init() function has 
 657:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         been called. 
 658:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @note   When TI mode is selected, the control bits SSM, SSI, CPOL and CPHA 
 659:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         are not taken into consideration and are configured by hardware
 660:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         respectively to the TI mode requirements.  
 661:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * 
 662:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: where x can be 1, 2 or 3 
 663:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  NewState: new state of the selected SPI TI communication mode.
 664:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          This parameter can be: ENABLE or DISABLE.
 665:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval None
 666:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 667:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** void SPI_TIModeCmd(SPI_TypeDef* SPIx, FunctionalState NewState)
 668:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 951              		.loc 1 668 0
 952              		.cfi_startproc
 953              		@ args = 0, pretend = 0, frame = 8
 954              		@ frame_needed = 1, uses_anonymous_args = 0
 955              		@ link register save eliminated.
 956 0000 80B4     		push	{r7}
 957              	.LCFI33:
 958              		.cfi_def_cfa_offset 4
 959              		.cfi_offset 7, -4
 960 0002 83B0     		sub	sp, sp, #12
 961              	.LCFI34:
 962              		.cfi_def_cfa_offset 16
 963 0004 00AF     		add	r7, sp, #0
 964              	.LCFI35:
 965              		.cfi_def_cfa_register 7
 966 0006 7860     		str	r0, [r7, #4]
 967 0008 0B46     		mov	r3, r1
 968 000a FB70     		strb	r3, [r7, #3]
 669:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the parameters */
 670:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 671:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 672:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 673:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   if (NewState != DISABLE)
 969              		.loc 1 673 0
 970 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 971 000e 002B     		cmp	r3, #0
 972 0010 08D0     		beq	.L39
 674:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 675:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Enable the TI mode for the selected SPI peripheral */
 676:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     SPIx->CR2 |= SPI_CR2_FRF;
 973              		.loc 1 676 0
 974 0012 7B68     		ldr	r3, [r7, #4]
 975 0014 9B88     		ldrh	r3, [r3, #4]	@ movhi
 976 0016 9BB2     		uxth	r3, r3
 977 0018 43F01003 		orr	r3, r3, #16
 978 001c 9AB2     		uxth	r2, r3
 979 001e 7B68     		ldr	r3, [r7, #4]
 980 0020 9A80     		strh	r2, [r3, #4]	@ movhi
 981 0022 07E0     		b	.L38
 982              	.L39:
 677:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 678:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   else
 679:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 680:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Disable the TI mode for the selected SPI peripheral */
 681:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     SPIx->CR2 &= (uint16_t)~SPI_CR2_FRF;
 983              		.loc 1 681 0
 984 0024 7B68     		ldr	r3, [r7, #4]
 985 0026 9B88     		ldrh	r3, [r3, #4]	@ movhi
 986 0028 9BB2     		uxth	r3, r3
 987 002a 23F01003 		bic	r3, r3, #16
 988 002e 9AB2     		uxth	r2, r3
 989 0030 7B68     		ldr	r3, [r7, #4]
 990 0032 9A80     		strh	r2, [r3, #4]	@ movhi
 991              	.L38:
 682:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 683:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 992              		.loc 1 683 0
 993 0034 0C37     		adds	r7, r7, #12
 994 0036 BD46     		mov	sp, r7
 995              		@ sp needed
 996 0038 5DF8047B 		ldr	r7, [sp], #4
 997 003c 7047     		bx	lr
 998              		.cfi_endproc
 999              	.LFE121:
 1001 003e 00BF     		.section	.text.I2S_FullDuplexConfig,"ax",%progbits
 1002              		.align	2
 1003              		.global	I2S_FullDuplexConfig
 1004              		.thumb
 1005              		.thumb_func
 1007              	I2S_FullDuplexConfig:
 1008              	.LFB122:
 684:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 685:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 686:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Configures the full duplex mode for the I2Sx peripheral using its
 687:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         extension I2Sxext according to the specified parameters in the 
 688:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         I2S_InitStruct.
 689:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  I2Sxext: where x can be  2 or 3 to select the I2S peripheral extension block.
 690:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  I2S_InitStruct: pointer to an I2S_InitTypeDef structure that
 691:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         contains the configuration information for the specified I2S peripheral
 692:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         extension.
 693:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * 
 694:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @note   The structure pointed by I2S_InitStruct parameter should be the same
 695:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         used for the master I2S peripheral. In this case, if the master is 
 696:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         configured as transmitter, the slave will be receiver and vice versa.
 697:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         Or you can force a different mode by modifying the field I2S_Mode to the
 698:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         value I2S_SlaveRx or I2S_SlaveTx indepedently of the master configuration.    
 699:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         
 700:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @note   The I2S full duplex extension can be configured in slave mode only.    
 701:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *  
 702:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval None
 703:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 704:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** void I2S_FullDuplexConfig(SPI_TypeDef* I2Sxext, I2S_InitTypeDef* I2S_InitStruct)
 705:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 1009              		.loc 1 705 0
 1010              		.cfi_startproc
 1011              		@ args = 0, pretend = 0, frame = 16
 1012              		@ frame_needed = 1, uses_anonymous_args = 0
 1013              		@ link register save eliminated.
 1014 0000 80B4     		push	{r7}
 1015              	.LCFI36:
 1016              		.cfi_def_cfa_offset 4
 1017              		.cfi_offset 7, -4
 1018 0002 85B0     		sub	sp, sp, #20
 1019              	.LCFI37:
 1020              		.cfi_def_cfa_offset 24
 1021 0004 00AF     		add	r7, sp, #0
 1022              	.LCFI38:
 1023              		.cfi_def_cfa_register 7
 1024 0006 7860     		str	r0, [r7, #4]
 1025 0008 3960     		str	r1, [r7]
 706:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   uint16_t tmpreg = 0, tmp = 0;
 1026              		.loc 1 706 0
 1027 000a 0023     		movs	r3, #0
 1028 000c BB81     		strh	r3, [r7, #12]	@ movhi
 1029 000e 0023     		movs	r3, #0
 1030 0010 FB81     		strh	r3, [r7, #14]	@ movhi
 707:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 708:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the I2S parameters */
 709:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_I2S_EXT_PERIPH(I2Sxext));
 710:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_I2S_MODE(I2S_InitStruct->I2S_Mode));
 711:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_I2S_STANDARD(I2S_InitStruct->I2S_Standard));
 712:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_I2S_DATA_FORMAT(I2S_InitStruct->I2S_DataFormat));
 713:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  
 714:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 715:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
 716:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
 717:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   I2Sxext->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
 1031              		.loc 1 717 0
 1032 0012 7B68     		ldr	r3, [r7, #4]
 1033 0014 9B8B     		ldrh	r3, [r3, #28]	@ movhi
 1034 0016 9BB2     		uxth	r3, r3
 1035 0018 23F47B63 		bic	r3, r3, #4016
 1036 001c 23F00F03 		bic	r3, r3, #15
 1037 0020 9AB2     		uxth	r2, r3
 1038 0022 7B68     		ldr	r3, [r7, #4]
 1039 0024 9A83     		strh	r2, [r3, #28]	@ movhi
 718:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   I2Sxext->I2SPR = 0x0002;
 1040              		.loc 1 718 0
 1041 0026 7B68     		ldr	r3, [r7, #4]
 1042 0028 0222     		movs	r2, #2
 1043 002a 1A84     		strh	r2, [r3, #32]	@ movhi
 719:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 720:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Get the I2SCFGR register value */
 721:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   tmpreg = I2Sxext->I2SCFGR;
 1044              		.loc 1 721 0
 1045 002c 7B68     		ldr	r3, [r7, #4]
 1046 002e 9B8B     		ldrh	r3, [r3, #28]	@ movhi
 1047 0030 BB81     		strh	r3, [r7, #12]	@ movhi
 722:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 723:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Get the mode to be configured for the extended I2S */
 724:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   if ((I2S_InitStruct->I2S_Mode == I2S_Mode_MasterTx) || (I2S_InitStruct->I2S_Mode == I2S_Mode_Slav
 1048              		.loc 1 724 0
 1049 0032 3B68     		ldr	r3, [r7]
 1050 0034 1B88     		ldrh	r3, [r3]
 1051 0036 B3F5007F 		cmp	r3, #512
 1052 003a 03D0     		beq	.L42
 1053              		.loc 1 724 0 is_stmt 0 discriminator 1
 1054 003c 3B68     		ldr	r3, [r7]
 1055 003e 1B88     		ldrh	r3, [r3]
 1056 0040 002B     		cmp	r3, #0
 1057 0042 03D1     		bne	.L43
 1058              	.L42:
 725:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 726:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     tmp = I2S_Mode_SlaveRx;
 1059              		.loc 1 726 0 is_stmt 1
 1060 0044 4FF48073 		mov	r3, #256
 1061 0048 FB81     		strh	r3, [r7, #14]	@ movhi
 1062 004a 0BE0     		b	.L44
 1063              	.L43:
 727:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 728:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   else
 729:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 730:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     if ((I2S_InitStruct->I2S_Mode == I2S_Mode_MasterRx) || (I2S_InitStruct->I2S_Mode == I2S_Mode_Sl
 1064              		.loc 1 730 0
 1065 004c 3B68     		ldr	r3, [r7]
 1066 004e 1B88     		ldrh	r3, [r3]
 1067 0050 B3F5407F 		cmp	r3, #768
 1068 0054 04D0     		beq	.L45
 1069              		.loc 1 730 0 is_stmt 0 discriminator 1
 1070 0056 3B68     		ldr	r3, [r7]
 1071 0058 1B88     		ldrh	r3, [r3]
 1072 005a B3F5807F 		cmp	r3, #256
 1073 005e 01D1     		bne	.L44
 1074              	.L45:
 731:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     {
 732:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       tmp = I2S_Mode_SlaveTx;
 1075              		.loc 1 732 0 is_stmt 1
 1076 0060 0023     		movs	r3, #0
 1077 0062 FB81     		strh	r3, [r7, #14]	@ movhi
 1078              	.L44:
 733:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     }
 734:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 735:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 736:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  
 737:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Configure the I2S with the SPI_InitStruct values */
 738:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 739:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****                   (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataForm
 1079              		.loc 1 739 0
 1080 0064 3B68     		ldr	r3, [r7]
 1081 0066 5A88     		ldrh	r2, [r3, #2]
 1082 0068 3B68     		ldr	r3, [r7]
 1083 006a 9988     		ldrh	r1, [r3, #4]
 740:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****                   (uint16_t)I2S_InitStruct->I2S_CPOL))));
 1084              		.loc 1 740 0
 1085 006c 3B68     		ldr	r3, [r7]
 1086 006e 9B89     		ldrh	r3, [r3, #12]
 739:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****                   (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataForm
 1087              		.loc 1 739 0
 1088 0070 0B43     		orrs	r3, r3, r1
 1089 0072 9BB2     		uxth	r3, r3
 1090 0074 1343     		orrs	r3, r3, r2
 1091 0076 9AB2     		uxth	r2, r3
 738:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 1092              		.loc 1 738 0
 1093 0078 FB89     		ldrh	r3, [r7, #14]	@ movhi
 1094 007a 1343     		orrs	r3, r3, r2
 1095 007c 9AB2     		uxth	r2, r3
 1096 007e BB89     		ldrh	r3, [r7, #12]	@ movhi
 1097 0080 1343     		orrs	r3, r3, r2
 1098 0082 9BB2     		uxth	r3, r3
 1099 0084 43F40063 		orr	r3, r3, #2048
 1100 0088 BB81     		strh	r3, [r7, #12]	@ movhi
 741:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  
 742:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Write to SPIx I2SCFGR */  
 743:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   I2Sxext->I2SCFGR = tmpreg;
 1101              		.loc 1 743 0
 1102 008a 7B68     		ldr	r3, [r7, #4]
 1103 008c BA89     		ldrh	r2, [r7, #12]	@ movhi
 1104 008e 9A83     		strh	r2, [r3, #28]	@ movhi
 744:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 1105              		.loc 1 744 0
 1106 0090 1437     		adds	r7, r7, #20
 1107 0092 BD46     		mov	sp, r7
 1108              		@ sp needed
 1109 0094 5DF8047B 		ldr	r7, [sp], #4
 1110 0098 7047     		bx	lr
 1111              		.cfi_endproc
 1112              	.LFE122:
 1114 009a 00BF     		.section	.text.SPI_I2S_ReceiveData,"ax",%progbits
 1115              		.align	2
 1116              		.global	SPI_I2S_ReceiveData
 1117              		.thumb
 1118              		.thumb_func
 1120              	SPI_I2S_ReceiveData:
 1121              	.LFB123:
 745:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 746:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 747:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @}
 748:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 749:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 750:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /** @defgroup SPI_Group2 Data transfers functions
 751:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  *  @brief   Data transfers functions
 752:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  *
 753:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** @verbatim   
 754:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  ===============================================================================
 755:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****                          Data transfers functions
 756:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  ===============================================================================  
 757:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 758:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   This section provides a set of functions allowing to manage the SPI data transfers
 759:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 760:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   In reception, data are received and then stored into an internal Rx buffer while 
 761:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   In transmission, data are first stored into an internal Tx buffer before being 
 762:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   transmitted.
 763:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 764:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   The read access of the SPI_DR register can be done using the SPI_I2S_ReceiveData()
 765:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   function and returns the Rx buffered value. Whereas a write access to the SPI_DR 
 766:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   can be done using SPI_I2S_SendData() function and stores the written data into 
 767:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   Tx buffer.
 768:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 769:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** @endverbatim
 770:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @{
 771:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 772:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 773:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 774:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Returns the most recent received data by the SPIx/I2Sx peripheral. 
 775:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2 or 3 
 776:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode. 
 777:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval The value of the received data.
 778:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 779:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** uint16_t SPI_I2S_ReceiveData(SPI_TypeDef* SPIx)
 780:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 1122              		.loc 1 780 0
 1123              		.cfi_startproc
 1124              		@ args = 0, pretend = 0, frame = 8
 1125              		@ frame_needed = 1, uses_anonymous_args = 0
 1126              		@ link register save eliminated.
 1127 0000 80B4     		push	{r7}
 1128              	.LCFI39:
 1129              		.cfi_def_cfa_offset 4
 1130              		.cfi_offset 7, -4
 1131 0002 83B0     		sub	sp, sp, #12
 1132              	.LCFI40:
 1133              		.cfi_def_cfa_offset 16
 1134 0004 00AF     		add	r7, sp, #0
 1135              	.LCFI41:
 1136              		.cfi_def_cfa_register 7
 1137 0006 7860     		str	r0, [r7, #4]
 781:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the parameters */
 782:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
 783:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 784:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Return the data in the DR register */
 785:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   return SPIx->DR;
 1138              		.loc 1 785 0
 1139 0008 7B68     		ldr	r3, [r7, #4]
 1140 000a 9B89     		ldrh	r3, [r3, #12]	@ movhi
 1141 000c 9BB2     		uxth	r3, r3
 786:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 1142              		.loc 1 786 0
 1143 000e 1846     		mov	r0, r3
 1144 0010 0C37     		adds	r7, r7, #12
 1145 0012 BD46     		mov	sp, r7
 1146              		@ sp needed
 1147 0014 5DF8047B 		ldr	r7, [sp], #4
 1148 0018 7047     		bx	lr
 1149              		.cfi_endproc
 1150              	.LFE123:
 1152 001a 00BF     		.section	.text.SPI_I2S_SendData,"ax",%progbits
 1153              		.align	2
 1154              		.global	SPI_I2S_SendData
 1155              		.thumb
 1156              		.thumb_func
 1158              	SPI_I2S_SendData:
 1159              	.LFB124:
 787:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 788:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 789:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Transmits a Data through the SPIx/I2Sx peripheral.
 790:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2 or 3 
 791:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.     
 792:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  Data: Data to be transmitted.
 793:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval None
 794:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 795:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
 796:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 1160              		.loc 1 796 0
 1161              		.cfi_startproc
 1162              		@ args = 0, pretend = 0, frame = 8
 1163              		@ frame_needed = 1, uses_anonymous_args = 0
 1164              		@ link register save eliminated.
 1165 0000 80B4     		push	{r7}
 1166              	.LCFI42:
 1167              		.cfi_def_cfa_offset 4
 1168              		.cfi_offset 7, -4
 1169 0002 83B0     		sub	sp, sp, #12
 1170              	.LCFI43:
 1171              		.cfi_def_cfa_offset 16
 1172 0004 00AF     		add	r7, sp, #0
 1173              	.LCFI44:
 1174              		.cfi_def_cfa_register 7
 1175 0006 7860     		str	r0, [r7, #4]
 1176 0008 0B46     		mov	r3, r1
 1177 000a 7B80     		strh	r3, [r7, #2]	@ movhi
 797:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the parameters */
 798:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
 799:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 800:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Write in the DR register the data to be sent */
 801:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPIx->DR = Data;
 1178              		.loc 1 801 0
 1179 000c 7B68     		ldr	r3, [r7, #4]
 1180 000e 7A88     		ldrh	r2, [r7, #2]	@ movhi
 1181 0010 9A81     		strh	r2, [r3, #12]	@ movhi
 802:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 1182              		.loc 1 802 0
 1183 0012 0C37     		adds	r7, r7, #12
 1184 0014 BD46     		mov	sp, r7
 1185              		@ sp needed
 1186 0016 5DF8047B 		ldr	r7, [sp], #4
 1187 001a 7047     		bx	lr
 1188              		.cfi_endproc
 1189              	.LFE124:
 1191              		.section	.text.SPI_CalculateCRC,"ax",%progbits
 1192              		.align	2
 1193              		.global	SPI_CalculateCRC
 1194              		.thumb
 1195              		.thumb_func
 1197              	SPI_CalculateCRC:
 1198              	.LFB125:
 803:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 804:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 805:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @}
 806:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 807:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 808:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /** @defgroup SPI_Group3 Hardware CRC Calculation functions
 809:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  *  @brief   Hardware CRC Calculation functions
 810:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  *
 811:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** @verbatim   
 812:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  ===============================================================================
 813:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****                          Hardware CRC Calculation functions
 814:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  ===============================================================================  
 815:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 816:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   This section provides a set of functions allowing to manage the SPI CRC hardware 
 817:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   calculation
 818:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 819:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPI communication using CRC is possible through the following procedure:
 820:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      1. Program the Data direction, Polarity, Phase, First Data, Baud Rate Prescaler, 
 821:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****         Slave Management, Peripheral Mode and CRC Polynomial values using the SPI_Init()
 822:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****         function.
 823:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      2. Enable the CRC calculation using the SPI_CalculateCRC() function.
 824:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      3. Enable the SPI using the SPI_Cmd() function
 825:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      4. Before writing the last data to the TX buffer, set the CRCNext bit using the 
 826:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       SPI_TransmitCRC() function to indicate that after transmission of the last 
 827:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       data, the CRC should be transmitted.
 828:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      5. After transmitting the last data, the SPI transmits the CRC. The SPI_CR1_CRCNEXT
 829:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****         bit is reset. The CRC is also received and compared against the SPI_RXCRCR 
 830:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****         value. 
 831:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****         If the value does not match, the SPI_FLAG_CRCERR flag is set and an interrupt
 832:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****         can be generated when the SPI_I2S_IT_ERR interrupt is enabled.
 833:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 834:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** @note It is advised not to read the calculated CRC values during the communication.
 835:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 836:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** @note When the SPI is in slave mode, be careful to enable CRC calculation only 
 837:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       when the clock is stable, that is, when the clock is in the steady state. 
 838:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       If not, a wrong CRC calculation may be done. In fact, the CRC is sensitive 
 839:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       to the SCK slave input clock as soon as CRCEN is set, and this, whatever 
 840:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       the value of the SPE bit.
 841:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 842:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** @note With high bitrate frequencies, be careful when transmitting the CRC.
 843:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       As the number of used CPU cycles has to be as low as possible in the CRC 
 844:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       transfer phase, it is forbidden to call software functions in the CRC 
 845:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       transmission sequence to avoid errors in the last data and CRC reception. 
 846:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       In fact, CRCNEXT bit has to be written before the end of the transmission/reception 
 847:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       of the last data.
 848:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 849:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** @note For high bit rate frequencies, it is advised to use the DMA mode to avoid the
 850:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       degradation of the SPI speed performance due to CPU accesses impacting the 
 851:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       SPI bandwidth.
 852:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 853:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** @note When the STM32F4xx is configured as slave and the NSS hardware mode is 
 854:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       used, the NSS pin needs to be kept low between the data phase and the CRC 
 855:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       phase.
 856:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 857:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** @note When the SPI is configured in slave mode with the CRC feature enabled, CRC
 858:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       calculation takes place even if a high level is applied on the NSS pin. 
 859:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       This may happen for example in case of a multi-slave environment where the 
 860:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       communication master addresses slaves alternately.
 861:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 862:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** @note Between a slave de-selection (high level on NSS) and a new slave selection 
 863:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       (low level on NSS), the CRC value should be cleared on both master and slave
 864:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       sides in order to resynchronize the master and slave for their respective 
 865:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       CRC calculation.
 866:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 867:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** @note To clear the CRC, follow the procedure below:
 868:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****         1. Disable SPI using the SPI_Cmd() function
 869:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****         2. Disable the CRC calculation using the SPI_CalculateCRC() function.
 870:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****         3. Enable the CRC calculation using the SPI_CalculateCRC() function.
 871:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****         4. Enable SPI using the SPI_Cmd() function.
 872:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 873:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** @endverbatim
 874:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @{
 875:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 876:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 877:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 878:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Enables or disables the CRC value calculation of the transferred bytes.
 879:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
 880:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  NewState: new state of the SPIx CRC value calculation.
 881:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          This parameter can be: ENABLE or DISABLE.
 882:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval None
 883:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 884:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** void SPI_CalculateCRC(SPI_TypeDef* SPIx, FunctionalState NewState)
 885:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 1199              		.loc 1 885 0
 1200              		.cfi_startproc
 1201              		@ args = 0, pretend = 0, frame = 8
 1202              		@ frame_needed = 1, uses_anonymous_args = 0
 1203              		@ link register save eliminated.
 1204 0000 80B4     		push	{r7}
 1205              	.LCFI45:
 1206              		.cfi_def_cfa_offset 4
 1207              		.cfi_offset 7, -4
 1208 0002 83B0     		sub	sp, sp, #12
 1209              	.LCFI46:
 1210              		.cfi_def_cfa_offset 16
 1211 0004 00AF     		add	r7, sp, #0
 1212              	.LCFI47:
 1213              		.cfi_def_cfa_register 7
 1214 0006 7860     		str	r0, [r7, #4]
 1215 0008 0B46     		mov	r3, r1
 1216 000a FB70     		strb	r3, [r7, #3]
 886:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the parameters */
 887:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 888:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 889:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   if (NewState != DISABLE)
 1217              		.loc 1 889 0
 1218 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1219 000e 002B     		cmp	r3, #0
 1220 0010 08D0     		beq	.L50
 890:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 891:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Enable the selected SPI CRC calculation */
 892:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     SPIx->CR1 |= SPI_CR1_CRCEN;
 1221              		.loc 1 892 0
 1222 0012 7B68     		ldr	r3, [r7, #4]
 1223 0014 1B88     		ldrh	r3, [r3]	@ movhi
 1224 0016 9BB2     		uxth	r3, r3
 1225 0018 43F40053 		orr	r3, r3, #8192
 1226 001c 9AB2     		uxth	r2, r3
 1227 001e 7B68     		ldr	r3, [r7, #4]
 1228 0020 1A80     		strh	r2, [r3]	@ movhi
 1229 0022 07E0     		b	.L49
 1230              	.L50:
 893:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 894:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   else
 895:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 896:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Disable the selected SPI CRC calculation */
 897:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_CRCEN);
 1231              		.loc 1 897 0
 1232 0024 7B68     		ldr	r3, [r7, #4]
 1233 0026 1B88     		ldrh	r3, [r3]	@ movhi
 1234 0028 9BB2     		uxth	r3, r3
 1235 002a 23F40053 		bic	r3, r3, #8192
 1236 002e 9AB2     		uxth	r2, r3
 1237 0030 7B68     		ldr	r3, [r7, #4]
 1238 0032 1A80     		strh	r2, [r3]	@ movhi
 1239              	.L49:
 898:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 899:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 1240              		.loc 1 899 0
 1241 0034 0C37     		adds	r7, r7, #12
 1242 0036 BD46     		mov	sp, r7
 1243              		@ sp needed
 1244 0038 5DF8047B 		ldr	r7, [sp], #4
 1245 003c 7047     		bx	lr
 1246              		.cfi_endproc
 1247              	.LFE125:
 1249 003e 00BF     		.section	.text.SPI_TransmitCRC,"ax",%progbits
 1250              		.align	2
 1251              		.global	SPI_TransmitCRC
 1252              		.thumb
 1253              		.thumb_func
 1255              	SPI_TransmitCRC:
 1256              	.LFB126:
 900:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 901:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 902:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Transmit the SPIx CRC value.
 903:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
 904:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval None
 905:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 906:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** void SPI_TransmitCRC(SPI_TypeDef* SPIx)
 907:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 1257              		.loc 1 907 0
 1258              		.cfi_startproc
 1259              		@ args = 0, pretend = 0, frame = 8
 1260              		@ frame_needed = 1, uses_anonymous_args = 0
 1261              		@ link register save eliminated.
 1262 0000 80B4     		push	{r7}
 1263              	.LCFI48:
 1264              		.cfi_def_cfa_offset 4
 1265              		.cfi_offset 7, -4
 1266 0002 83B0     		sub	sp, sp, #12
 1267              	.LCFI49:
 1268              		.cfi_def_cfa_offset 16
 1269 0004 00AF     		add	r7, sp, #0
 1270              	.LCFI50:
 1271              		.cfi_def_cfa_register 7
 1272 0006 7860     		str	r0, [r7, #4]
 908:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the parameters */
 909:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 910:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 911:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Enable the selected SPI CRC transmission */
 912:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPIx->CR1 |= SPI_CR1_CRCNEXT;
 1273              		.loc 1 912 0
 1274 0008 7B68     		ldr	r3, [r7, #4]
 1275 000a 1B88     		ldrh	r3, [r3]	@ movhi
 1276 000c 9BB2     		uxth	r3, r3
 1277 000e 43F48053 		orr	r3, r3, #4096
 1278 0012 9AB2     		uxth	r2, r3
 1279 0014 7B68     		ldr	r3, [r7, #4]
 1280 0016 1A80     		strh	r2, [r3]	@ movhi
 913:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 1281              		.loc 1 913 0
 1282 0018 0C37     		adds	r7, r7, #12
 1283 001a BD46     		mov	sp, r7
 1284              		@ sp needed
 1285 001c 5DF8047B 		ldr	r7, [sp], #4
 1286 0020 7047     		bx	lr
 1287              		.cfi_endproc
 1288              	.LFE126:
 1290 0022 00BF     		.section	.text.SPI_GetCRC,"ax",%progbits
 1291              		.align	2
 1292              		.global	SPI_GetCRC
 1293              		.thumb
 1294              		.thumb_func
 1296              	SPI_GetCRC:
 1297              	.LFB127:
 914:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 915:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 916:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Returns the transmit or the receive CRC register value for the specified SPI.
 917:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
 918:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPI_CRC: specifies the CRC register to be read.
 919:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          This parameter can be one of the following values:
 920:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_CRC_Tx: Selects Tx CRC register
 921:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_CRC_Rx: Selects Rx CRC register
 922:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval The selected CRC register value..
 923:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 924:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** uint16_t SPI_GetCRC(SPI_TypeDef* SPIx, uint8_t SPI_CRC)
 925:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 1298              		.loc 1 925 0
 1299              		.cfi_startproc
 1300              		@ args = 0, pretend = 0, frame = 16
 1301              		@ frame_needed = 1, uses_anonymous_args = 0
 1302              		@ link register save eliminated.
 1303 0000 80B4     		push	{r7}
 1304              	.LCFI51:
 1305              		.cfi_def_cfa_offset 4
 1306              		.cfi_offset 7, -4
 1307 0002 85B0     		sub	sp, sp, #20
 1308              	.LCFI52:
 1309              		.cfi_def_cfa_offset 24
 1310 0004 00AF     		add	r7, sp, #0
 1311              	.LCFI53:
 1312              		.cfi_def_cfa_register 7
 1313 0006 7860     		str	r0, [r7, #4]
 1314 0008 0B46     		mov	r3, r1
 1315 000a FB70     		strb	r3, [r7, #3]
 926:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   uint16_t crcreg = 0;
 1316              		.loc 1 926 0
 1317 000c 0023     		movs	r3, #0
 1318 000e FB81     		strh	r3, [r7, #14]	@ movhi
 927:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the parameters */
 928:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 929:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_CRC(SPI_CRC));
 930:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   if (SPI_CRC != SPI_CRC_Rx)
 1319              		.loc 1 930 0
 1320 0010 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1321 0012 012B     		cmp	r3, #1
 1322 0014 03D0     		beq	.L54
 931:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 932:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Get the Tx CRC register */
 933:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     crcreg = SPIx->TXCRCR;
 1323              		.loc 1 933 0
 1324 0016 7B68     		ldr	r3, [r7, #4]
 1325 0018 1B8B     		ldrh	r3, [r3, #24]	@ movhi
 1326 001a FB81     		strh	r3, [r7, #14]	@ movhi
 1327 001c 02E0     		b	.L55
 1328              	.L54:
 934:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 935:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   else
 936:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 937:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Get the Rx CRC register */
 938:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     crcreg = SPIx->RXCRCR;
 1329              		.loc 1 938 0
 1330 001e 7B68     		ldr	r3, [r7, #4]
 1331 0020 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 1332 0022 FB81     		strh	r3, [r7, #14]	@ movhi
 1333              	.L55:
 939:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 940:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Return the selected CRC register */
 941:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   return crcreg;
 1334              		.loc 1 941 0
 1335 0024 FB89     		ldrh	r3, [r7, #14]
 942:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 1336              		.loc 1 942 0
 1337 0026 1846     		mov	r0, r3
 1338 0028 1437     		adds	r7, r7, #20
 1339 002a BD46     		mov	sp, r7
 1340              		@ sp needed
 1341 002c 5DF8047B 		ldr	r7, [sp], #4
 1342 0030 7047     		bx	lr
 1343              		.cfi_endproc
 1344              	.LFE127:
 1346 0032 00BF     		.section	.text.SPI_GetCRCPolynomial,"ax",%progbits
 1347              		.align	2
 1348              		.global	SPI_GetCRCPolynomial
 1349              		.thumb
 1350              		.thumb_func
 1352              	SPI_GetCRCPolynomial:
 1353              	.LFB128:
 943:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 944:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 945:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Returns the CRC Polynomial register value for the specified SPI.
 946:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
 947:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval The CRC Polynomial register value.
 948:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 949:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** uint16_t SPI_GetCRCPolynomial(SPI_TypeDef* SPIx)
 950:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 1354              		.loc 1 950 0
 1355              		.cfi_startproc
 1356              		@ args = 0, pretend = 0, frame = 8
 1357              		@ frame_needed = 1, uses_anonymous_args = 0
 1358              		@ link register save eliminated.
 1359 0000 80B4     		push	{r7}
 1360              	.LCFI54:
 1361              		.cfi_def_cfa_offset 4
 1362              		.cfi_offset 7, -4
 1363 0002 83B0     		sub	sp, sp, #12
 1364              	.LCFI55:
 1365              		.cfi_def_cfa_offset 16
 1366 0004 00AF     		add	r7, sp, #0
 1367              	.LCFI56:
 1368              		.cfi_def_cfa_register 7
 1369 0006 7860     		str	r0, [r7, #4]
 951:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the parameters */
 952:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 953:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 954:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Return the CRC polynomial register */
 955:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   return SPIx->CRCPR;
 1370              		.loc 1 955 0
 1371 0008 7B68     		ldr	r3, [r7, #4]
 1372 000a 1B8A     		ldrh	r3, [r3, #16]	@ movhi
 1373 000c 9BB2     		uxth	r3, r3
 956:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 1374              		.loc 1 956 0
 1375 000e 1846     		mov	r0, r3
 1376 0010 0C37     		adds	r7, r7, #12
 1377 0012 BD46     		mov	sp, r7
 1378              		@ sp needed
 1379 0014 5DF8047B 		ldr	r7, [sp], #4
 1380 0018 7047     		bx	lr
 1381              		.cfi_endproc
 1382              	.LFE128:
 1384 001a 00BF     		.section	.text.SPI_I2S_DMACmd,"ax",%progbits
 1385              		.align	2
 1386              		.global	SPI_I2S_DMACmd
 1387              		.thumb
 1388              		.thumb_func
 1390              	SPI_I2S_DMACmd:
 1391              	.LFB129:
 957:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 958:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 959:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @}
 960:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 961:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 962:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /** @defgroup SPI_Group4 DMA transfers management functions
 963:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  *  @brief   DMA transfers management functions
 964:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *
 965:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** @verbatim   
 966:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  ===============================================================================
 967:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****                          DMA transfers management functions
 968:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  ===============================================================================  
 969:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 970:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** @endverbatim
 971:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @{
 972:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 973:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 974:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 975:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Enables or disables the SPIx/I2Sx DMA interface.
 976:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2 or 3 
 977:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode. 
 978:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPI_I2S_DMAReq: specifies the SPI DMA transfer request to be enabled or disabled. 
 979:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          This parameter can be any combination of the following values:
 980:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_I2S_DMAReq_Tx: Tx buffer DMA transfer request
 981:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_I2S_DMAReq_Rx: Rx buffer DMA transfer request
 982:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  NewState: new state of the selected SPI DMA transfer request.
 983:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          This parameter can be: ENABLE or DISABLE.
 984:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval None
 985:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 986:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** void SPI_I2S_DMACmd(SPI_TypeDef* SPIx, uint16_t SPI_I2S_DMAReq, FunctionalState NewState)
 987:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 1392              		.loc 1 987 0
 1393              		.cfi_startproc
 1394              		@ args = 0, pretend = 0, frame = 8
 1395              		@ frame_needed = 1, uses_anonymous_args = 0
 1396              		@ link register save eliminated.
 1397 0000 80B4     		push	{r7}
 1398              	.LCFI57:
 1399              		.cfi_def_cfa_offset 4
 1400              		.cfi_offset 7, -4
 1401 0002 83B0     		sub	sp, sp, #12
 1402              	.LCFI58:
 1403              		.cfi_def_cfa_offset 16
 1404 0004 00AF     		add	r7, sp, #0
 1405              	.LCFI59:
 1406              		.cfi_def_cfa_register 7
 1407 0006 7860     		str	r0, [r7, #4]
 1408 0008 1346     		mov	r3, r2
 1409 000a 0A46     		mov	r2, r1	@ movhi
 1410 000c 7A80     		strh	r2, [r7, #2]	@ movhi
 1411 000e 7B70     		strb	r3, [r7, #1]
 988:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the parameters */
 989:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
 990:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 991:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_I2S_DMAREQ(SPI_I2S_DMAReq));
 992:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 993:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   if (NewState != DISABLE)
 1412              		.loc 1 993 0
 1413 0010 7B78     		ldrb	r3, [r7, #1]	@ zero_extendqisi2
 1414 0012 002B     		cmp	r3, #0
 1415 0014 08D0     		beq	.L60
 994:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 995:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Enable the selected SPI DMA requests */
 996:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     SPIx->CR2 |= SPI_I2S_DMAReq;
 1416              		.loc 1 996 0
 1417 0016 7B68     		ldr	r3, [r7, #4]
 1418 0018 9B88     		ldrh	r3, [r3, #4]	@ movhi
 1419 001a 9AB2     		uxth	r2, r3
 1420 001c 7B88     		ldrh	r3, [r7, #2]	@ movhi
 1421 001e 1343     		orrs	r3, r3, r2
 1422 0020 9AB2     		uxth	r2, r3
 1423 0022 7B68     		ldr	r3, [r7, #4]
 1424 0024 9A80     		strh	r2, [r3, #4]	@ movhi
 1425 0026 09E0     		b	.L59
 1426              	.L60:
 997:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 998:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   else
 999:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
1000:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Disable the selected SPI DMA requests */
1001:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     SPIx->CR2 &= (uint16_t)~SPI_I2S_DMAReq;
 1427              		.loc 1 1001 0
 1428 0028 7B68     		ldr	r3, [r7, #4]
 1429 002a 9B88     		ldrh	r3, [r3, #4]	@ movhi
 1430 002c 9AB2     		uxth	r2, r3
 1431 002e 7B88     		ldrh	r3, [r7, #2]	@ movhi
 1432 0030 DB43     		mvns	r3, r3
 1433 0032 9BB2     		uxth	r3, r3
 1434 0034 1340     		ands	r3, r3, r2
 1435 0036 9AB2     		uxth	r2, r3
 1436 0038 7B68     		ldr	r3, [r7, #4]
 1437 003a 9A80     		strh	r2, [r3, #4]	@ movhi
 1438              	.L59:
1002:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
1003:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 1439              		.loc 1 1003 0
 1440 003c 0C37     		adds	r7, r7, #12
 1441 003e BD46     		mov	sp, r7
 1442              		@ sp needed
 1443 0040 5DF8047B 		ldr	r7, [sp], #4
 1444 0044 7047     		bx	lr
 1445              		.cfi_endproc
 1446              	.LFE129:
 1448 0046 00BF     		.section	.text.SPI_I2S_ITConfig,"ax",%progbits
 1449              		.align	2
 1450              		.global	SPI_I2S_ITConfig
 1451              		.thumb
 1452              		.thumb_func
 1454              	SPI_I2S_ITConfig:
 1455              	.LFB130:
1004:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1005:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
1006:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @}
1007:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
1008:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1009:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /** @defgroup SPI_Group5 Interrupts and flags management functions
1010:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  *  @brief   Interrupts and flags management functions
1011:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *
1012:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** @verbatim   
1013:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  ===============================================================================
1014:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****                          Interrupts and flags management functions
1015:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  ===============================================================================  
1016:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1017:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   This section provides a set of functions allowing to configure the SPI Interrupts 
1018:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   sources and check or clear the flags or pending bits status.
1019:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   The user should identify which mode will be used in his application to manage 
1020:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   the communication: Polling mode, Interrupt mode or DMA mode. 
1021:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     
1022:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   Polling Mode
1023:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   =============
1024:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   In Polling Mode, the SPI/I2S communication can be managed by 9 flags:
1025:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      1. SPI_I2S_FLAG_TXE : to indicate the status of the transmit buffer register
1026:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      2. SPI_I2S_FLAG_RXNE : to indicate the status of the receive buffer register
1027:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      3. SPI_I2S_FLAG_BSY : to indicate the state of the communication layer of the SPI.
1028:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      4. SPI_FLAG_CRCERR : to indicate if a CRC Calculation error occur              
1029:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      5. SPI_FLAG_MODF : to indicate if a Mode Fault error occur
1030:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      6. SPI_I2S_FLAG_OVR : to indicate if an Overrun error occur
1031:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      7. I2S_FLAG_TIFRFE: to indicate a Frame Format error occurs.
1032:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      8. I2S_FLAG_UDR: to indicate an Underrun error occurs.
1033:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      9. I2S_FLAG_CHSIDE: to indicate Channel Side.
1034:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1035:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** @note Do not use the BSY flag to handle each data transmission or reception.  It is
1036:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       better to use the TXE and RXNE flags instead.
1037:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1038:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   In this Mode it is advised to use the following functions:
1039:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      - FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG);
1040:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      - void SPI_I2S_ClearFlag(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG);
1041:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1042:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   Interrupt Mode
1043:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   ===============
1044:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   In Interrupt Mode, the SPI communication can be managed by 3 interrupt sources
1045:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   and 7 pending bits: 
1046:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   Pending Bits:
1047:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   ------------- 
1048:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      1. SPI_I2S_IT_TXE : to indicate the status of the transmit buffer register
1049:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      2. SPI_I2S_IT_RXNE : to indicate the status of the receive buffer register
1050:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      3. SPI_IT_CRCERR : to indicate if a CRC Calculation error occur (available in SPI mode only)  
1051:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      4. SPI_IT_MODF : to indicate if a Mode Fault error occur (available in SPI mode only)
1052:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      5. SPI_I2S_IT_OVR : to indicate if an Overrun error occur
1053:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      6. I2S_IT_UDR : to indicate an Underrun Error occurs (available in I2S mode only).
1054:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      7. I2S_FLAG_TIFRFE : to indicate a Frame Format error occurs (available in TI mode only).
1055:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1056:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   Interrupt Source:
1057:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   -----------------
1058:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      1. SPI_I2S_IT_TXE: specifies the interrupt source for the Tx buffer empty 
1059:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****                         interrupt.  
1060:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      2. SPI_I2S_IT_RXNE : specifies the interrupt source for the Rx buffer not 
1061:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****                           empty interrupt.
1062:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      3. SPI_I2S_IT_ERR : specifies the interrupt source for the errors interrupt.
1063:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1064:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   In this Mode it is advised to use the following functions:
1065:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      - void SPI_I2S_ITConfig(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT, FunctionalState NewState);
1066:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      - ITStatus SPI_I2S_GetITStatus(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT);
1067:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      - void SPI_I2S_ClearITPendingBit(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT);
1068:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1069:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   DMA Mode
1070:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   ========
1071:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   In DMA Mode, the SPI communication can be managed by 2 DMA Channel requests:
1072:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      1. SPI_I2S_DMAReq_Tx: specifies the Tx buffer DMA transfer request
1073:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      2. SPI_I2S_DMAReq_Rx: specifies the Rx buffer DMA transfer request
1074:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1075:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   In this Mode it is advised to use the following function:
1076:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     - void SPI_I2S_DMACmd(SPI_TypeDef* SPIx, uint16_t SPI_I2S_DMAReq, FunctionalState NewState);
1077:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1078:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** @endverbatim
1079:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @{
1080:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
1081:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1082:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
1083:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Enables or disables the specified SPI/I2S interrupts.
1084:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2 or 3 
1085:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode. 
1086:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPI_I2S_IT: specifies the SPI interrupt source to be enabled or disabled. 
1087:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          This parameter can be one of the following values:
1088:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_I2S_IT_TXE: Tx buffer empty interrupt mask
1089:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_I2S_IT_RXNE: Rx buffer not empty interrupt mask
1090:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_I2S_IT_ERR: Error interrupt mask
1091:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  NewState: new state of the specified SPI interrupt.
1092:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          This parameter can be: ENABLE or DISABLE.
1093:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval None
1094:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
1095:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** void SPI_I2S_ITConfig(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT, FunctionalState NewState)
1096:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 1456              		.loc 1 1096 0
 1457              		.cfi_startproc
 1458              		@ args = 0, pretend = 0, frame = 16
 1459              		@ frame_needed = 1, uses_anonymous_args = 0
 1460              		@ link register save eliminated.
 1461 0000 80B4     		push	{r7}
 1462              	.LCFI60:
 1463              		.cfi_def_cfa_offset 4
 1464              		.cfi_offset 7, -4
 1465 0002 85B0     		sub	sp, sp, #20
 1466              	.LCFI61:
 1467              		.cfi_def_cfa_offset 24
 1468 0004 00AF     		add	r7, sp, #0
 1469              	.LCFI62:
 1470              		.cfi_def_cfa_register 7
 1471 0006 7860     		str	r0, [r7, #4]
 1472 0008 1346     		mov	r3, r2
 1473 000a 0A46     		mov	r2, r1
 1474 000c FA70     		strb	r2, [r7, #3]
 1475 000e BB70     		strb	r3, [r7, #2]
1097:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   uint16_t itpos = 0, itmask = 0 ;
 1476              		.loc 1 1097 0
 1477 0010 0023     		movs	r3, #0
 1478 0012 FB81     		strh	r3, [r7, #14]	@ movhi
 1479 0014 0023     		movs	r3, #0
 1480 0016 BB81     		strh	r3, [r7, #12]	@ movhi
1098:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
1099:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the parameters */
1100:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
1101:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1102:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_I2S_CONFIG_IT(SPI_I2S_IT));
1103:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1104:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Get the SPI IT index */
1105:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   itpos = SPI_I2S_IT >> 4;
 1481              		.loc 1 1105 0
 1482 0018 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1483 001a 1B09     		lsrs	r3, r3, #4
 1484 001c DBB2     		uxtb	r3, r3
 1485 001e FB81     		strh	r3, [r7, #14]	@ movhi
1106:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1107:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Set the IT mask */
1108:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   itmask = (uint16_t)1 << (uint16_t)itpos;
 1486              		.loc 1 1108 0
 1487 0020 FB89     		ldrh	r3, [r7, #14]
 1488 0022 0122     		movs	r2, #1
 1489 0024 02FA03F3 		lsl	r3, r2, r3
 1490 0028 BB81     		strh	r3, [r7, #12]	@ movhi
1109:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1110:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   if (NewState != DISABLE)
 1491              		.loc 1 1110 0
 1492 002a BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 1493 002c 002B     		cmp	r3, #0
 1494 002e 08D0     		beq	.L63
1111:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
1112:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Enable the selected SPI interrupt */
1113:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     SPIx->CR2 |= itmask;
 1495              		.loc 1 1113 0
 1496 0030 7B68     		ldr	r3, [r7, #4]
 1497 0032 9B88     		ldrh	r3, [r3, #4]	@ movhi
 1498 0034 9AB2     		uxth	r2, r3
 1499 0036 BB89     		ldrh	r3, [r7, #12]	@ movhi
 1500 0038 1343     		orrs	r3, r3, r2
 1501 003a 9AB2     		uxth	r2, r3
 1502 003c 7B68     		ldr	r3, [r7, #4]
 1503 003e 9A80     		strh	r2, [r3, #4]	@ movhi
 1504 0040 09E0     		b	.L62
 1505              	.L63:
1114:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
1115:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   else
1116:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
1117:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Disable the selected SPI interrupt */
1118:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     SPIx->CR2 &= (uint16_t)~itmask;
 1506              		.loc 1 1118 0
 1507 0042 7B68     		ldr	r3, [r7, #4]
 1508 0044 9B88     		ldrh	r3, [r3, #4]	@ movhi
 1509 0046 9AB2     		uxth	r2, r3
 1510 0048 BB89     		ldrh	r3, [r7, #12]	@ movhi
 1511 004a DB43     		mvns	r3, r3
 1512 004c 9BB2     		uxth	r3, r3
 1513 004e 1340     		ands	r3, r3, r2
 1514 0050 9AB2     		uxth	r2, r3
 1515 0052 7B68     		ldr	r3, [r7, #4]
 1516 0054 9A80     		strh	r2, [r3, #4]	@ movhi
 1517              	.L62:
1119:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
1120:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 1518              		.loc 1 1120 0
 1519 0056 1437     		adds	r7, r7, #20
 1520 0058 BD46     		mov	sp, r7
 1521              		@ sp needed
 1522 005a 5DF8047B 		ldr	r7, [sp], #4
 1523 005e 7047     		bx	lr
 1524              		.cfi_endproc
 1525              	.LFE130:
 1527              		.section	.text.SPI_I2S_GetFlagStatus,"ax",%progbits
 1528              		.align	2
 1529              		.global	SPI_I2S_GetFlagStatus
 1530              		.thumb
 1531              		.thumb_func
 1533              	SPI_I2S_GetFlagStatus:
 1534              	.LFB131:
1121:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1122:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
1123:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Checks whether the specified SPIx/I2Sx flag is set or not.
1124:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2 or 3 
1125:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode. 
1126:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPI_I2S_FLAG: specifies the SPI flag to check. 
1127:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          This parameter can be one of the following values:
1128:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_I2S_FLAG_TXE: Transmit buffer empty flag.
1129:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_I2S_FLAG_RXNE: Receive buffer not empty flag.
1130:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_I2S_FLAG_BSY: Busy flag.
1131:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_I2S_FLAG_OVR: Overrun flag.
1132:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_FLAG_MODF: Mode Fault flag.
1133:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_FLAG_CRCERR: CRC Error flag.
1134:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_I2S_FLAG_TIFRFE: Format Error.
1135:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg I2S_FLAG_UDR: Underrun Error flag.
1136:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg I2S_FLAG_CHSIDE: Channel Side flag.  
1137:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval The new state of SPI_I2S_FLAG (SET or RESET).
1138:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
1139:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
1140:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 1535              		.loc 1 1140 0
 1536              		.cfi_startproc
 1537              		@ args = 0, pretend = 0, frame = 16
 1538              		@ frame_needed = 1, uses_anonymous_args = 0
 1539              		@ link register save eliminated.
 1540 0000 80B4     		push	{r7}
 1541              	.LCFI63:
 1542              		.cfi_def_cfa_offset 4
 1543              		.cfi_offset 7, -4
 1544 0002 85B0     		sub	sp, sp, #20
 1545              	.LCFI64:
 1546              		.cfi_def_cfa_offset 24
 1547 0004 00AF     		add	r7, sp, #0
 1548              	.LCFI65:
 1549              		.cfi_def_cfa_register 7
 1550 0006 7860     		str	r0, [r7, #4]
 1551 0008 0B46     		mov	r3, r1
 1552 000a 7B80     		strh	r3, [r7, #2]	@ movhi
1141:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   FlagStatus bitstatus = RESET;
 1553              		.loc 1 1141 0
 1554 000c 0023     		movs	r3, #0
 1555 000e FB73     		strb	r3, [r7, #15]
1142:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the parameters */
1143:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
1144:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
1145:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
1146:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the status of the specified SPI flag */
1147:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 1556              		.loc 1 1147 0
 1557 0010 7B68     		ldr	r3, [r7, #4]
 1558 0012 1B89     		ldrh	r3, [r3, #8]	@ movhi
 1559 0014 9AB2     		uxth	r2, r3
 1560 0016 7B88     		ldrh	r3, [r7, #2]	@ movhi
 1561 0018 1340     		ands	r3, r3, r2
 1562 001a 9BB2     		uxth	r3, r3
 1563 001c 002B     		cmp	r3, #0
 1564 001e 02D0     		beq	.L66
1148:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
1149:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* SPI_I2S_FLAG is set */
1150:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     bitstatus = SET;
 1565              		.loc 1 1150 0
 1566 0020 0123     		movs	r3, #1
 1567 0022 FB73     		strb	r3, [r7, #15]
 1568 0024 01E0     		b	.L67
 1569              	.L66:
1151:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
1152:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   else
1153:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
1154:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* SPI_I2S_FLAG is reset */
1155:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     bitstatus = RESET;
 1570              		.loc 1 1155 0
 1571 0026 0023     		movs	r3, #0
 1572 0028 FB73     		strb	r3, [r7, #15]
 1573              	.L67:
1156:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
1157:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Return the SPI_I2S_FLAG status */
1158:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   return  bitstatus;
 1574              		.loc 1 1158 0
 1575 002a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
1159:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 1576              		.loc 1 1159 0
 1577 002c 1846     		mov	r0, r3
 1578 002e 1437     		adds	r7, r7, #20
 1579 0030 BD46     		mov	sp, r7
 1580              		@ sp needed
 1581 0032 5DF8047B 		ldr	r7, [sp], #4
 1582 0036 7047     		bx	lr
 1583              		.cfi_endproc
 1584              	.LFE131:
 1586              		.section	.text.SPI_I2S_ClearFlag,"ax",%progbits
 1587              		.align	2
 1588              		.global	SPI_I2S_ClearFlag
 1589              		.thumb
 1590              		.thumb_func
 1592              	SPI_I2S_ClearFlag:
 1593              	.LFB132:
1160:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1161:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
1162:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Clears the SPIx CRC Error (CRCERR) flag.
1163:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2 or 3 
1164:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode. 
1165:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPI_I2S_FLAG: specifies the SPI flag to clear. 
1166:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          This function clears only CRCERR flag.
1167:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_FLAG_CRCERR: CRC Error flag.  
1168:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *  
1169:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @note   OVR (OverRun error) flag is cleared by software sequence: a read 
1170:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          operation to SPI_DR register (SPI_I2S_ReceiveData()) followed by a read 
1171:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          operation to SPI_SR register (SPI_I2S_GetFlagStatus()).
1172:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @note   UDR (UnderRun error) flag is cleared by a read operation to 
1173:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          SPI_SR register (SPI_I2S_GetFlagStatus()).   
1174:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @note   MODF (Mode Fault) flag is cleared by software sequence: a read/write 
1175:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          operation to SPI_SR register (SPI_I2S_GetFlagStatus()) followed by a 
1176:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          write operation to SPI_CR1 register (SPI_Cmd() to enable the SPI).
1177:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *  
1178:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval None
1179:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
1180:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** void SPI_I2S_ClearFlag(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
1181:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 1594              		.loc 1 1181 0
 1595              		.cfi_startproc
 1596              		@ args = 0, pretend = 0, frame = 8
 1597              		@ frame_needed = 1, uses_anonymous_args = 0
 1598              		@ link register save eliminated.
 1599 0000 80B4     		push	{r7}
 1600              	.LCFI66:
 1601              		.cfi_def_cfa_offset 4
 1602              		.cfi_offset 7, -4
 1603 0002 83B0     		sub	sp, sp, #12
 1604              	.LCFI67:
 1605              		.cfi_def_cfa_offset 16
 1606 0004 00AF     		add	r7, sp, #0
 1607              	.LCFI68:
 1608              		.cfi_def_cfa_register 7
 1609 0006 7860     		str	r0, [r7, #4]
 1610 0008 0B46     		mov	r3, r1
 1611 000a 7B80     		strh	r3, [r7, #2]	@ movhi
1182:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the parameters */
1183:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
1184:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_I2S_CLEAR_FLAG(SPI_I2S_FLAG));
1185:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     
1186:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Clear the selected SPI CRC Error (CRCERR) flag */
1187:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPIx->SR = (uint16_t)~SPI_I2S_FLAG;
 1612              		.loc 1 1187 0
 1613 000c 7B88     		ldrh	r3, [r7, #2]	@ movhi
 1614 000e DB43     		mvns	r3, r3
 1615 0010 9AB2     		uxth	r2, r3
 1616 0012 7B68     		ldr	r3, [r7, #4]
 1617 0014 1A81     		strh	r2, [r3, #8]	@ movhi
1188:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 1618              		.loc 1 1188 0
 1619 0016 0C37     		adds	r7, r7, #12
 1620 0018 BD46     		mov	sp, r7
 1621              		@ sp needed
 1622 001a 5DF8047B 		ldr	r7, [sp], #4
 1623 001e 7047     		bx	lr
 1624              		.cfi_endproc
 1625              	.LFE132:
 1627              		.section	.text.SPI_I2S_GetITStatus,"ax",%progbits
 1628              		.align	2
 1629              		.global	SPI_I2S_GetITStatus
 1630              		.thumb
 1631              		.thumb_func
 1633              	SPI_I2S_GetITStatus:
 1634              	.LFB133:
1189:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1190:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
1191:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Checks whether the specified SPIx/I2Sx interrupt has occurred or not.
1192:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2 or 3 
1193:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.  
1194:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPI_I2S_IT: specifies the SPI interrupt source to check. 
1195:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          This parameter can be one of the following values:
1196:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_I2S_IT_TXE: Transmit buffer empty interrupt.
1197:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_I2S_IT_RXNE: Receive buffer not empty interrupt.
1198:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_I2S_IT_OVR: Overrun interrupt.
1199:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_IT_MODF: Mode Fault interrupt.
1200:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_IT_CRCERR: CRC Error interrupt.
1201:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg I2S_IT_UDR: Underrun interrupt.  
1202:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_I2S_IT_TIFRFE: Format Error interrupt.  
1203:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval The new state of SPI_I2S_IT (SET or RESET).
1204:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
1205:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** ITStatus SPI_I2S_GetITStatus(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT)
1206:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 1635              		.loc 1 1206 0
 1636              		.cfi_startproc
 1637              		@ args = 0, pretend = 0, frame = 16
 1638              		@ frame_needed = 1, uses_anonymous_args = 0
 1639              		@ link register save eliminated.
 1640 0000 80B4     		push	{r7}
 1641              	.LCFI69:
 1642              		.cfi_def_cfa_offset 4
 1643              		.cfi_offset 7, -4
 1644 0002 85B0     		sub	sp, sp, #20
 1645              	.LCFI70:
 1646              		.cfi_def_cfa_offset 24
 1647 0004 00AF     		add	r7, sp, #0
 1648              	.LCFI71:
 1649              		.cfi_def_cfa_register 7
 1650 0006 7860     		str	r0, [r7, #4]
 1651 0008 0B46     		mov	r3, r1
 1652 000a FB70     		strb	r3, [r7, #3]
1207:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   ITStatus bitstatus = RESET;
 1653              		.loc 1 1207 0
 1654 000c 0023     		movs	r3, #0
 1655 000e FB73     		strb	r3, [r7, #15]
1208:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   uint16_t itpos = 0, itmask = 0, enablestatus = 0;
 1656              		.loc 1 1208 0
 1657 0010 0023     		movs	r3, #0
 1658 0012 BB81     		strh	r3, [r7, #12]	@ movhi
 1659 0014 0023     		movs	r3, #0
 1660 0016 7B81     		strh	r3, [r7, #10]	@ movhi
 1661 0018 0023     		movs	r3, #0
 1662 001a 3B81     		strh	r3, [r7, #8]	@ movhi
1209:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1210:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the parameters */
1211:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
1212:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_I2S_GET_IT(SPI_I2S_IT));
1213:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1214:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Get the SPI_I2S_IT index */
1215:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   itpos = 0x01 << (SPI_I2S_IT & 0x0F);
 1663              		.loc 1 1215 0
 1664 001c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1665 001e 03F00F03 		and	r3, r3, #15
 1666 0022 0122     		movs	r2, #1
 1667 0024 02FA03F3 		lsl	r3, r2, r3
 1668 0028 BB81     		strh	r3, [r7, #12]	@ movhi
1216:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1217:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Get the SPI_I2S_IT IT mask */
1218:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   itmask = SPI_I2S_IT >> 4;
 1669              		.loc 1 1218 0
 1670 002a FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1671 002c 1B09     		lsrs	r3, r3, #4
 1672 002e DBB2     		uxtb	r3, r3
 1673 0030 7B81     		strh	r3, [r7, #10]	@ movhi
1219:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1220:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Set the IT mask */
1221:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   itmask = 0x01 << itmask;
 1674              		.loc 1 1221 0
 1675 0032 7B89     		ldrh	r3, [r7, #10]
 1676 0034 0122     		movs	r2, #1
 1677 0036 02FA03F3 		lsl	r3, r2, r3
 1678 003a 7B81     		strh	r3, [r7, #10]	@ movhi
1222:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1223:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Get the SPI_I2S_IT enable bit status */
1224:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   enablestatus = (SPIx->CR2 & itmask) ;
 1679              		.loc 1 1224 0
 1680 003c 7B68     		ldr	r3, [r7, #4]
 1681 003e 9B88     		ldrh	r3, [r3, #4]	@ movhi
 1682 0040 9AB2     		uxth	r2, r3
 1683 0042 7B89     		ldrh	r3, [r7, #10]	@ movhi
 1684 0044 1340     		ands	r3, r3, r2
 1685 0046 3B81     		strh	r3, [r7, #8]	@ movhi
1225:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1226:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the status of the specified SPI interrupt */
1227:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
 1686              		.loc 1 1227 0
 1687 0048 7B68     		ldr	r3, [r7, #4]
 1688 004a 1B89     		ldrh	r3, [r3, #8]	@ movhi
 1689 004c 9AB2     		uxth	r2, r3
 1690 004e BB89     		ldrh	r3, [r7, #12]	@ movhi
 1691 0050 1340     		ands	r3, r3, r2
 1692 0052 9BB2     		uxth	r3, r3
 1693 0054 002B     		cmp	r3, #0
 1694 0056 05D0     		beq	.L71
 1695              		.loc 1 1227 0 is_stmt 0 discriminator 1
 1696 0058 3B89     		ldrh	r3, [r7, #8]
 1697 005a 002B     		cmp	r3, #0
 1698 005c 02D0     		beq	.L71
1228:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
1229:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* SPI_I2S_IT is set */
1230:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     bitstatus = SET;
 1699              		.loc 1 1230 0 is_stmt 1
 1700 005e 0123     		movs	r3, #1
 1701 0060 FB73     		strb	r3, [r7, #15]
 1702 0062 01E0     		b	.L72
 1703              	.L71:
1231:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
1232:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   else
1233:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
1234:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* SPI_I2S_IT is reset */
1235:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     bitstatus = RESET;
 1704              		.loc 1 1235 0
 1705 0064 0023     		movs	r3, #0
 1706 0066 FB73     		strb	r3, [r7, #15]
 1707              	.L72:
1236:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
1237:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Return the SPI_I2S_IT status */
1238:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   return bitstatus;
 1708              		.loc 1 1238 0
 1709 0068 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
1239:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 1710              		.loc 1 1239 0
 1711 006a 1846     		mov	r0, r3
 1712 006c 1437     		adds	r7, r7, #20
 1713 006e BD46     		mov	sp, r7
 1714              		@ sp needed
 1715 0070 5DF8047B 		ldr	r7, [sp], #4
 1716 0074 7047     		bx	lr
 1717              		.cfi_endproc
 1718              	.LFE133:
 1720 0076 00BF     		.section	.text.SPI_I2S_ClearITPendingBit,"ax",%progbits
 1721              		.align	2
 1722              		.global	SPI_I2S_ClearITPendingBit
 1723              		.thumb
 1724              		.thumb_func
 1726              	SPI_I2S_ClearITPendingBit:
 1727              	.LFB134:
1240:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1241:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
1242:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Clears the SPIx CRC Error (CRCERR) interrupt pending bit.
1243:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2 or 3 
1244:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.  
1245:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPI_I2S_IT: specifies the SPI interrupt pending bit to clear.
1246:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         This function clears only CRCERR interrupt pending bit.   
1247:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_IT_CRCERR: CRC Error interrupt.
1248:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *   
1249:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @note   OVR (OverRun Error) interrupt pending bit is cleared by software 
1250:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          sequence: a read operation to SPI_DR register (SPI_I2S_ReceiveData()) 
1251:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          followed by a read operation to SPI_SR register (SPI_I2S_GetITStatus()).
1252:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @note   UDR (UnderRun Error) interrupt pending bit is cleared by a read 
1253:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          operation to SPI_SR register (SPI_I2S_GetITStatus()).   
1254:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @note   MODF (Mode Fault) interrupt pending bit is cleared by software sequence:
1255:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          a read/write operation to SPI_SR register (SPI_I2S_GetITStatus()) 
1256:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          followed by a write operation to SPI_CR1 register (SPI_Cmd() to enable 
1257:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          the SPI).
1258:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval None
1259:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
1260:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** void SPI_I2S_ClearITPendingBit(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT)
1261:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 1728              		.loc 1 1261 0
 1729              		.cfi_startproc
 1730              		@ args = 0, pretend = 0, frame = 16
 1731              		@ frame_needed = 1, uses_anonymous_args = 0
 1732              		@ link register save eliminated.
 1733 0000 80B4     		push	{r7}
 1734              	.LCFI72:
 1735              		.cfi_def_cfa_offset 4
 1736              		.cfi_offset 7, -4
 1737 0002 85B0     		sub	sp, sp, #20
 1738              	.LCFI73:
 1739              		.cfi_def_cfa_offset 24
 1740 0004 00AF     		add	r7, sp, #0
 1741              	.LCFI74:
 1742              		.cfi_def_cfa_register 7
 1743 0006 7860     		str	r0, [r7, #4]
 1744 0008 0B46     		mov	r3, r1
 1745 000a FB70     		strb	r3, [r7, #3]
1262:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   uint16_t itpos = 0;
 1746              		.loc 1 1262 0
 1747 000c 0023     		movs	r3, #0
 1748 000e FB81     		strh	r3, [r7, #14]	@ movhi
1263:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the parameters */
1264:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
1265:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_I2S_CLEAR_IT(SPI_I2S_IT));
1266:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1267:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Get the SPI_I2S IT index */
1268:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   itpos = 0x01 << (SPI_I2S_IT & 0x0F);
 1749              		.loc 1 1268 0
 1750 0010 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1751 0012 03F00F03 		and	r3, r3, #15
 1752 0016 0122     		movs	r2, #1
 1753 0018 02FA03F3 		lsl	r3, r2, r3
 1754 001c FB81     		strh	r3, [r7, #14]	@ movhi
1269:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1270:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Clear the selected SPI CRC Error (CRCERR) interrupt pending bit */
1271:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPIx->SR = (uint16_t)~itpos;
 1755              		.loc 1 1271 0
 1756 001e FB89     		ldrh	r3, [r7, #14]	@ movhi
 1757 0020 DB43     		mvns	r3, r3
 1758 0022 9AB2     		uxth	r2, r3
 1759 0024 7B68     		ldr	r3, [r7, #4]
 1760 0026 1A81     		strh	r2, [r3, #8]	@ movhi
1272:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 1761              		.loc 1 1272 0
 1762 0028 1437     		adds	r7, r7, #20
 1763 002a BD46     		mov	sp, r7
 1764              		@ sp needed
 1765 002c 5DF8047B 		ldr	r7, [sp], #4
 1766 0030 7047     		bx	lr
 1767              		.cfi_endproc
 1768              	.LFE134:
 1770 0032 00BF     		.text
 1771              	.Letext0:
 1772              		.file 2 "/home/shihyu/data/STM32F4/gcc-arm-none-eabi-4_8-2013q4/arm-none-eabi/include/stdint.h"
 1773              		.file 3 "libs/Device/STM32F4xx/Include/stm32f4xx.h"
 1774              		.file 4 "libs/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_spi.h"
 1775              		.file 5 "libs/CMSIS/Include/core_cm4.h"
DEFINED SYMBOLS
                            *ABS*:00000000 stm32f4xx_spi.c
     /tmp/ccoP3kj0.s:20     .text.SPI_I2S_DeInit:00000000 $t
     /tmp/ccoP3kj0.s:25     .text.SPI_I2S_DeInit:00000000 SPI_I2S_DeInit
     /tmp/ccoP3kj0.s:96     .text.SPI_I2S_DeInit:00000068 $d
     /tmp/ccoP3kj0.s:103    .text.SPI_Init:00000000 $t
     /tmp/ccoP3kj0.s:108    .text.SPI_Init:00000000 SPI_Init
     /tmp/ccoP3kj0.s:211    .text.I2S_Init:00000000 $t
     /tmp/ccoP3kj0.s:216    .text.I2S_Init:00000000 I2S_Init
     /tmp/ccoP3kj0.s:468    .text.I2S_Init:000001a4 $d
     /tmp/ccoP3kj0.s:475    .text.SPI_StructInit:00000000 $t
     /tmp/ccoP3kj0.s:480    .text.SPI_StructInit:00000000 SPI_StructInit
     /tmp/ccoP3kj0.s:544    .text.I2S_StructInit:00000000 $t
     /tmp/ccoP3kj0.s:549    .text.I2S_StructInit:00000000 I2S_StructInit
     /tmp/ccoP3kj0.s:601    .text.SPI_Cmd:00000000 $t
     /tmp/ccoP3kj0.s:606    .text.SPI_Cmd:00000000 SPI_Cmd
     /tmp/ccoP3kj0.s:659    .text.I2S_Cmd:00000000 $t
     /tmp/ccoP3kj0.s:664    .text.I2S_Cmd:00000000 I2S_Cmd
     /tmp/ccoP3kj0.s:717    .text.SPI_DataSizeConfig:00000000 $t
     /tmp/ccoP3kj0.s:722    .text.SPI_DataSizeConfig:00000000 SPI_DataSizeConfig
     /tmp/ccoP3kj0.s:769    .text.SPI_BiDirectionalLineConfig:00000000 $t
     /tmp/ccoP3kj0.s:774    .text.SPI_BiDirectionalLineConfig:00000000 SPI_BiDirectionalLineConfig
     /tmp/ccoP3kj0.s:827    .text.SPI_NSSInternalSoftwareConfig:00000000 $t
     /tmp/ccoP3kj0.s:832    .text.SPI_NSSInternalSoftwareConfig:00000000 SPI_NSSInternalSoftwareConfig
     /tmp/ccoP3kj0.s:886    .text.SPI_SSOutputCmd:00000000 $t
     /tmp/ccoP3kj0.s:891    .text.SPI_SSOutputCmd:00000000 SPI_SSOutputCmd
     /tmp/ccoP3kj0.s:944    .text.SPI_TIModeCmd:00000000 $t
     /tmp/ccoP3kj0.s:949    .text.SPI_TIModeCmd:00000000 SPI_TIModeCmd
     /tmp/ccoP3kj0.s:1002   .text.I2S_FullDuplexConfig:00000000 $t
     /tmp/ccoP3kj0.s:1007   .text.I2S_FullDuplexConfig:00000000 I2S_FullDuplexConfig
     /tmp/ccoP3kj0.s:1115   .text.SPI_I2S_ReceiveData:00000000 $t
     /tmp/ccoP3kj0.s:1120   .text.SPI_I2S_ReceiveData:00000000 SPI_I2S_ReceiveData
     /tmp/ccoP3kj0.s:1153   .text.SPI_I2S_SendData:00000000 $t
     /tmp/ccoP3kj0.s:1158   .text.SPI_I2S_SendData:00000000 SPI_I2S_SendData
     /tmp/ccoP3kj0.s:1192   .text.SPI_CalculateCRC:00000000 $t
     /tmp/ccoP3kj0.s:1197   .text.SPI_CalculateCRC:00000000 SPI_CalculateCRC
     /tmp/ccoP3kj0.s:1250   .text.SPI_TransmitCRC:00000000 $t
     /tmp/ccoP3kj0.s:1255   .text.SPI_TransmitCRC:00000000 SPI_TransmitCRC
     /tmp/ccoP3kj0.s:1291   .text.SPI_GetCRC:00000000 $t
     /tmp/ccoP3kj0.s:1296   .text.SPI_GetCRC:00000000 SPI_GetCRC
     /tmp/ccoP3kj0.s:1347   .text.SPI_GetCRCPolynomial:00000000 $t
     /tmp/ccoP3kj0.s:1352   .text.SPI_GetCRCPolynomial:00000000 SPI_GetCRCPolynomial
     /tmp/ccoP3kj0.s:1385   .text.SPI_I2S_DMACmd:00000000 $t
     /tmp/ccoP3kj0.s:1390   .text.SPI_I2S_DMACmd:00000000 SPI_I2S_DMACmd
     /tmp/ccoP3kj0.s:1449   .text.SPI_I2S_ITConfig:00000000 $t
     /tmp/ccoP3kj0.s:1454   .text.SPI_I2S_ITConfig:00000000 SPI_I2S_ITConfig
     /tmp/ccoP3kj0.s:1528   .text.SPI_I2S_GetFlagStatus:00000000 $t
     /tmp/ccoP3kj0.s:1533   .text.SPI_I2S_GetFlagStatus:00000000 SPI_I2S_GetFlagStatus
     /tmp/ccoP3kj0.s:1587   .text.SPI_I2S_ClearFlag:00000000 $t
     /tmp/ccoP3kj0.s:1592   .text.SPI_I2S_ClearFlag:00000000 SPI_I2S_ClearFlag
     /tmp/ccoP3kj0.s:1628   .text.SPI_I2S_GetITStatus:00000000 $t
     /tmp/ccoP3kj0.s:1633   .text.SPI_I2S_GetITStatus:00000000 SPI_I2S_GetITStatus
     /tmp/ccoP3kj0.s:1721   .text.SPI_I2S_ClearITPendingBit:00000000 $t
     /tmp/ccoP3kj0.s:1726   .text.SPI_I2S_ClearITPendingBit:00000000 SPI_I2S_ClearITPendingBit
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
RCC_APB2PeriphResetCmd
RCC_APB1PeriphResetCmd
